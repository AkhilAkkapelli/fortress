(* THIS FILE WAS AUTOMATICALLY GENERATED BY
   com.sun.fortress.astgen.FortressAstGenerator FROM Fortress.ast *)

component FortressAst
import List.{...}
import FortressLibrary.{...} except ExtentRange
export FortressAst

trait ASTNode extends Node  end
trait Applicable extends Info  end
trait Generic extends ASTNode  end
trait InAfterTypeChecking extends InOutPhases  end
trait InOutPhases extends Info  end
trait Info extends Node  end
trait Lhs extends Info  end
trait Node   end
trait ObjectConstructor extends Generic  end
trait OutAfterTypeChecking extends InOutPhases  end
trait TemplateGap extends Info  end
trait TypeOrPattern extends Info  end
trait TypeVariable extends Info  end
object APIName  extends Name
 asString():String = "APIName"
 end
trait ASTNodeInfo extends DataNode  end
trait AbbreviatedType extends BaseType  end
trait AbstractNode   end
trait AbstractObjectExpr extends Expr  end
object Accumulator  extends BigOpApp
 asString():String = "Accumulator"
 end
object AliasedAPIName  extends AbstractNode
 asString():String = "AliasedAPIName"
 end
object AliasedSimpleName  extends AbstractNode
 asString():String = "AliasedSimpleName"
 end
object AmbiguousMultifixOpExpr  extends { Primary, OutAfterTypeChecking }
 asString():String = "AmbiguousMultifixOpExpr"
 end
object AndPredicateSymbol  extends SyntaxSymbol
 asString():String = "AndPredicateSymbol"
 end
object AnonymousFnName  extends AnonymousName
 asString():String = "AnonymousFnName"
 end
trait AnonymousName extends IdOrOpOrAnonymousName  end
object AnyCharacterSymbol  extends SpecialSymbol
 asString():String = "AnyCharacterSymbol"
 end
object AnyType  extends BaseType
 asString():String = "AnyType"
 end
object Api  extends CompilationUnit
 asString():String = "Api"
 end
object ArrayComprehension  extends BigOpApp
 asString():String = "ArrayComprehension"
 end
object ArrayComprehensionClause  extends AbstractNode
 asString():String = "ArrayComprehensionClause"
 end
object ArrayElement  extends ArrayExpr
 asString():String = "ArrayElement"
 end
object ArrayElements  extends ArrayExpr
 asString():String = "ArrayElements"
 end
trait ArrayExpr extends Primary  end
object ArrayType  extends { AbbreviatedType, OutAfterTypeChecking }
 asString():String = "ArrayType"
 end
object ArrowCoercionInvocation  extends CoercionInvocation
 asString():String = "ArrowCoercionInvocation"
 end
object ArrowType  extends Type
 asString():String = "ArrowType"
 end
object AsExpr  extends TypeAnnotatedExpr
 asString():String = "AsExpr"
 end
object AsIfExpr  extends TypeAnnotatedExpr
 asString():String = "AsIfExpr"
 end
object Assignment  extends Expr
 asString():String = "Assignment"
 end
object AtomicExpr  extends Expr
 asString():String = "AtomicExpr"
 end
object BackspaceSymbol  extends SpecialSymbol
 asString():String = "BackspaceSymbol"
 end
trait BaseType extends Type  end
object BigFixity  extends Fixity
 asString():String = "BigFixity"
 end
trait BigOpApp extends Expr  end
trait Binding extends { AbstractNode, Lhs }  end
object Block  extends Expr
 asString():String = "Block"
 end
object BoolArg  extends StaticArg
 asString():String = "BoolArg"
 end
object BoolBase  extends BoolExpr
 asString():String = "BoolBase"
 end
object BoolBinaryOp  extends BoolConstraint
 asString():String = "BoolBinaryOp"
 end
trait BoolConstraint extends BoolExpr  end
object BoolConstraintExpr  extends WhereConstraint
 asString():String = "BoolConstraintExpr"
 end
trait BoolExpr extends StaticExpr  end
object BoolRef  extends BoolExpr
 asString():String = "BoolRef"
 end
object BoolUnaryOp  extends BoolConstraint
 asString():String = "BoolUnaryOp"
 end
object BooleanLiteralExpr  extends LiteralExpr
 asString():String = "BooleanLiteralExpr"
 end
object BottomType  extends BaseType
 asString():String = "BottomType"
 end
trait BoundType extends Type  end
object BreaklineSymbol  extends SpecialSymbol
 asString():String = "BreaklineSymbol"
 end
object CarriageReturnSymbol  extends SpecialSymbol
 asString():String = "CarriageReturnSymbol"
 end
object CaseClause  extends AbstractNode
 asString():String = "CaseClause"
 end
object CaseExpr  extends Expr
 asString():String = "CaseExpr"
 end
object CaseTransformer  extends Transformer
 asString():String = "CaseTransformer"
 end
object CaseTransformerClause  extends AbstractNode
 asString():String = "CaseTransformerClause"
 end
object Catch  extends AbstractNode
 asString():String = "Catch"
 end
object CatchClause  extends AbstractNode
 asString():String = "CatchClause"
 end
object ChainExpr  extends Primary
 asString():String = "ChainExpr"
 end
object CharLiteralExpr  extends LiteralExpr
 asString():String = "CharLiteralExpr"
 end
object CharSymbol  extends CharacterSymbol
 asString():String = "CharSymbol"
 end
object CharacterClassSymbol  extends SyntaxSymbol
 asString():String = "CharacterClassSymbol"
 end
object CharacterInterval  extends CharacterSymbol
 asString():String = "CharacterInterval"
 end
trait CharacterSymbol extends SyntaxSymbol  end
trait CoercionInvocation extends Primary  end
trait CompilationUnit extends AbstractNode  end
object Component  extends CompilationUnit
 asString():String = "Component"
 end
object CompoundAssignmentInfo  extends DataNode
 asString():String = "CompoundAssignmentInfo"
 end
object ConstructorFnName  extends AnonymousName
 asString():String = "ConstructorFnName"
 end
object Contract  extends AbstractNode
 asString():String = "Contract"
 end
trait DataNode extends InfoNode  end
trait Decl extends AbstractNode  end
trait DeclHeader extends GenericHeader  end
object DimArg  extends StaticArg
 asString():String = "DimArg"
 end
object DimBase  extends DimExpr
 asString():String = "DimBase"
 end
object DimBinaryOp  extends DimExpr
 asString():String = "DimBinaryOp"
 end
object DimDecl  extends DimUnitDecl
 asString():String = "DimDecl"
 end
object DimExponent  extends DimExpr
 asString():String = "DimExponent"
 end
trait DimExpr extends Type  end
object DimRef  extends DimExpr
 asString():String = "DimRef"
 end
object DimUnaryOp  extends DimExpr
 asString():String = "DimUnaryOp"
 end
trait DimUnitDecl extends Decl  end
object Do  extends Expr
 asString():String = "Do"
 end
object DummyExpr  extends Expr
 asString():String = "DummyExpr"
 end
object Effect  extends AbstractNode
 asString():String = "Effect"
 end
object EnclosingFixity  extends Fixity
 asString():String = "EnclosingFixity"
 end
object EnsuresClause  extends AbstractNode
 asString():String = "EnsuresClause"
 end
object Exit  extends Expr
 asString():String = "Exit"
 end
object ExponentiationMI  extends NonExprMI
 asString():String = "ExponentiationMI"
 end
trait Expr   end
object ExprInfo  extends ParenthesizedInfo
 asString():String = "ExprInfo"
 end
trait ExprMI extends MathItem  end
object ExtentRange  extends AbstractNode
 asString():String = "ExtentRange"
 end
object FieldRef  extends { Primary, Lhs }
 asString():String = "FieldRef"
 end
object FixedPointType  extends Type
 asString():String = "FixedPointType"
 end
trait Fixity extends InfoNode  end
object FloatLiteralExpr  extends NumberLiteralExpr
 asString():String = "FloatLiteralExpr"
 end
object FnDecl  extends { Decl, Generic }
 asString():String = "FnDecl"
 end
object FnExpr  extends Expr
 asString():String = "FnExpr"
 end
object FnHeader  extends DeclHeader
 asString():String = "FnHeader"
 end
object FnRef  extends FunctionalRef
 asString():String = "FnRef"
 end
object For  extends Expr
 asString():String = "For"
 end
object FormfeedSymbol  extends SpecialSymbol
 asString():String = "FormfeedSymbol"
 end
trait FunctionalRef extends Primary  end
object GeneratorClause  extends AbstractNode
 asString():String = "GeneratorClause"
 end
trait GenericHeader extends DataNode  end
object GrammarDecl  extends Decl
 asString():String = "GrammarDecl"
 end
trait GrammarMemberDecl extends Decl  end
object GroupSymbol  extends SyntaxSymbol
 asString():String = "GroupSymbol"
 end
object Id  extends IdOrOp
 asString():String = "Id"
 end
trait IdOrOp extends IdOrOpOrAnonymousName  end
trait IdOrOpOrAnonymousName extends Name  end
object If  extends Expr
 asString():String = "If"
 end
object IfClause  extends AbstractNode
 asString():String = "IfClause"
 end
trait Import extends AbstractNode  end
object ImportApi  extends Import
 asString():String = "ImportApi"
 end
object ImportNames  extends ImportedNames
 asString():String = "ImportNames"
 end
object ImportStar  extends ImportedNames
 asString():String = "ImportStar"
 end
trait ImportedNames extends Import  end
object InFixity  extends Fixity
 asString():String = "InFixity"
 end
object Indices  extends AbstractNode
 asString():String = "Indices"
 end
trait InfoNode extends Info  end
object IntArg  extends StaticArg
 asString():String = "IntArg"
 end
object IntBase  extends IntExpr
 asString():String = "IntBase"
 end
object IntBinaryOp  extends IntExpr
 asString():String = "IntBinaryOp"
 end
object IntConstraint  extends WhereConstraint
 asString():String = "IntConstraint"
 end
trait IntExpr extends StaticExpr  end
object IntLiteralExpr  extends NumberLiteralExpr
 asString():String = "IntLiteralExpr"
 end
object IntRef  extends IntExpr
 asString():String = "IntRef"
 end
object IntersectionType  extends BoundType
 asString():String = "IntersectionType"
 end
object ItemSymbol  extends SyntaxSymbol
 asString():String = "ItemSymbol"
 end
object Juxt  extends { Primary, OutAfterTypeChecking }
 asString():String = "Juxt"
 end
object KeywordExpr  extends AbstractNode
 asString():String = "KeywordExpr"
 end
object KeywordSymbol  extends SyntaxSymbol
 asString():String = "KeywordSymbol"
 end
object KeywordType  extends AbstractNode
 asString():String = "KeywordType"
 end
object KindBool  extends StaticParamKind
 asString():String = "KindBool"
 end
object KindDim  extends StaticParamKind
 asString():String = "KindDim"
 end
object KindInt  extends StaticParamKind
 asString():String = "KindInt"
 end
object KindNat  extends StaticParamKind
 asString():String = "KindNat"
 end
object KindOp  extends StaticParamKind
 asString():String = "KindOp"
 end
object KindType  extends StaticParamKind
 asString():String = "KindType"
 end
object KindUnit  extends StaticParamKind
 asString():String = "KindUnit"
 end
object LValue  extends Binding
 asString():String = "LValue"
 end
object Label  extends Expr
 asString():String = "Label"
 end
object LabelType  extends Type
 asString():String = "LabelType"
 end
trait LetExpr extends Expr  end
object LetFn  extends LetExpr
 asString():String = "LetFn"
 end
object Level  extends InfoNode
 asString():String = "Level"
 end
object Link  extends AbstractNode
 asString():String = "Link"
 end
trait LiteralExpr extends Primary  end
object LocalVarDecl  extends LetExpr
 asString():String = "LocalVarDecl"
 end
trait MathItem extends { AbstractNode, OutAfterTypeChecking }  end
object MathPrimary  extends { Primary, OutAfterTypeChecking }
 asString():String = "MathPrimary"
 end
object MatrixType  extends { AbbreviatedType, OutAfterTypeChecking }
 asString():String = "MatrixType"
 end
object MethodInfo  extends DataNode
 asString():String = "MethodInfo"
 end
object MethodInvocation  extends Primary
 asString():String = "MethodInvocation"
 end
object MultiFixity  extends Fixity
 asString():String = "MultiFixity"
 end
trait Name extends AbstractNode  end
object NamedOp  extends Op
 asString():String = "NamedOp"
 end
object NamedTransformerDef  extends TransformerDecl
 asString():String = "NamedTransformerDef"
 end
trait NamedType extends BaseType  end
object NestedPattern  extends PatternBinding
 asString():String = "NestedPattern"
 end
object NewlineSymbol  extends SpecialSymbol
 asString():String = "NewlineSymbol"
 end
object NoFixity  extends Fixity
 asString():String = "NoFixity"
 end
object NoWhitespaceSymbol  extends SyntaxSymbol
 asString():String = "NoWhitespaceSymbol"
 end
object NodeTransformer  extends Transformer
 asString():String = "NodeTransformer"
 end
trait NonExprMI extends MathItem  end
object NonParenthesisDelimitedMI  extends ExprMI
 asString():String = "NonParenthesisDelimitedMI"
 end
trait NonterminalDecl extends GrammarMemberDecl  end
object NonterminalDef  extends NonterminalDecl
 asString():String = "NonterminalDef"
 end
object NonterminalExtensionDef  extends NonterminalDecl
 asString():String = "NonterminalExtensionDef"
 end
object NonterminalHeader  extends AbstractNode
 asString():String = "NonterminalHeader"
 end
object NonterminalParameter  extends AbstractNode
 asString():String = "NonterminalParameter"
 end
object NonterminalSymbol  extends SyntaxSymbol
 asString():String = "NonterminalSymbol"
 end
object NotPredicateSymbol  extends SyntaxSymbol
 asString():String = "NotPredicateSymbol"
 end
trait NumberLiteralExpr extends LiteralExpr  end
object ObjectDecl  extends { TraitObjectDecl, ObjectConstructor }
 asString():String = "ObjectDecl"
 end
object ObjectExpr  extends AbstractObjectExpr
 asString():String = "ObjectExpr"
 end
object ObjectExprType  extends SelfType
 asString():String = "ObjectExprType"
 end
trait Op extends IdOrOp  end
object OpArg  extends StaticArg
 asString():String = "OpArg"
 end
object OpExpr  extends Primary
 asString():String = "OpExpr"
 end
object OpRef  extends FunctionalRef
 asString():String = "OpRef"
 end
object OptionalSymbol  extends SyntaxSymbol
 asString():String = "OptionalSymbol"
 end
object Overloading  extends AbstractNode
 asString():String = "Overloading"
 end
object Param  extends Binding
 asString():String = "Param"
 end
object ParenthesisDelimitedMI  extends ExprMI
 asString():String = "ParenthesisDelimitedMI"
 end
trait ParenthesizedInfo extends ASTNodeInfo  end
object Pattern  extends { AbstractNode, TypeOrPattern }
 asString():String = "Pattern"
 end
object PatternArgs  extends AbstractNode
 asString():String = "PatternArgs"
 end
trait PatternBinding extends AbstractNode  end
object PlainPattern  extends PatternBinding
 asString():String = "PlainPattern"
 end
object PostFixity  extends Fixity
 asString():String = "PostFixity"
 end
object PreFixity  extends Fixity
 asString():String = "PreFixity"
 end
object PreTransformerDef  extends TransformerDecl
 asString():String = "PreTransformerDef"
 end
object PrefixedSymbol  extends SyntaxSymbol
 asString():String = "PrefixedSymbol"
 end
trait Primary extends SimpleExpr  end
object PropertyDecl  extends Decl
 asString():String = "PropertyDecl"
 end
object RepeatOneOrMoreSymbol  extends SyntaxSymbol
 asString():String = "RepeatOneOrMoreSymbol"
 end
object RepeatSymbol  extends SyntaxSymbol
 asString():String = "RepeatSymbol"
 end
trait SelfType extends BaseType  end
trait SimpleExpr extends Expr  end
object SpanInfo  extends ASTNodeInfo
 asString():String = "SpanInfo"
 end
object Spawn  extends Expr
 asString():String = "Spawn"
 end
trait SpecialSymbol extends SyntaxSymbol  end
trait StaticArg   end
trait StaticExpr extends AbstractNode  end
object StaticParam  extends AbstractNode
 asString():String = "StaticParam"
 end
trait StaticParamKind extends InfoNode  end
object StringLiteralExpr  extends LiteralExpr
 asString():String = "StringLiteralExpr"
 end
object SubscriptExpr  extends { SimpleExpr, Lhs }
 asString():String = "SubscriptExpr"
 end
object SubscriptingMI  extends NonExprMI
 asString():String = "SubscriptingMI"
 end
object SuperSyntaxDef  extends SyntaxDecl
 asString():String = "SuperSyntaxDef"
 end
trait SyntaxDecl extends AbstractNode  end
object SyntaxDef  extends SyntaxDecl
 asString():String = "SyntaxDef"
 end
trait SyntaxSymbol extends AbstractNode  end
object TabSymbol  extends SpecialSymbol
 asString():String = "TabSymbol"
 end
object TaggedDimType  extends AbbreviatedType
 asString():String = "TaggedDimType"
 end
object TaggedUnitType  extends AbbreviatedType
 asString():String = "TaggedUnitType"
 end
object TestDecl  extends Decl
 asString():String = "TestDecl"
 end
object Throw  extends Expr
 asString():String = "Throw"
 end
object TokenSymbol  extends SyntaxSymbol
 asString():String = "TokenSymbol"
 end
object TraitCoercionInvocation  extends CoercionInvocation
 asString():String = "TraitCoercionInvocation"
 end
object TraitDecl  extends TraitObjectDecl
 asString():String = "TraitDecl"
 end
trait TraitObjectDecl extends { Decl, Generic }  end
object TraitSelfType  extends SelfType
 asString():String = "TraitSelfType"
 end
object TraitType  extends NamedType
 asString():String = "TraitType"
 end
object TraitTypeHeader  extends DeclHeader
 asString():String = "TraitTypeHeader"
 end
object TraitTypeWhere  extends AbstractNode
 asString():String = "TraitTypeWhere"
 end
trait Transformer extends AbstractNode  end
trait TransformerDecl extends AbstractNode  end
object Try  extends Expr
 asString():String = "Try"
 end
object TryAtomicExpr  extends Expr
 asString():String = "TryAtomicExpr"
 end
object TupleCoercionInvocation  extends CoercionInvocation
 asString():String = "TupleCoercionInvocation"
 end
object TupleExpr  extends Expr
 asString():String = "TupleExpr"
 end
object TupleType  extends Type
 asString():String = "TupleType"
 end
trait Type   end
object TypeAlias  extends Decl
 asString():String = "TypeAlias"
 end
trait TypeAnnotatedExpr extends Expr  end
object TypeArg  extends StaticArg
 asString():String = "TypeArg"
 end
object TypeInfo  extends ParenthesizedInfo
 asString():String = "TypeInfo"
 end
object TypePattern  extends PatternBinding
 asString():String = "TypePattern"
 end
object Typecase  extends Expr
 asString():String = "Typecase"
 end
object TypecaseClause  extends AbstractNode
 asString():String = "TypecaseClause"
 end
object UnionCoercionInvocation  extends CoercionInvocation
 asString():String = "UnionCoercionInvocation"
 end
object UnionType  extends BoundType
 asString():String = "UnionType"
 end
object UnitArg  extends StaticArg
 asString():String = "UnitArg"
 end
object UnitBinaryOp  extends UnitExpr
 asString():String = "UnitBinaryOp"
 end
object UnitConstraint  extends WhereConstraint
 asString():String = "UnitConstraint"
 end
object UnitDecl  extends DimUnitDecl
 asString():String = "UnitDecl"
 end
trait UnitExpr extends StaticExpr  end
object UnitRef  extends UnitExpr
 asString():String = "UnitRef"
 end
object UnknownFixity  extends Fixity
 asString():String = "UnknownFixity"
 end
object UnknownType  extends BaseType
 asString():String = "UnknownType"
 end
object UnparsedTransformer  extends Transformer
 asString():String = "UnparsedTransformer"
 end
object VarDecl  extends Decl
 asString():String = "VarDecl"
 end
object VarRef  extends { Primary, Lhs }
 asString():String = "VarRef"
 end
object VarType  extends { NamedType, TypeVariable }
 asString():String = "VarType"
 end
object VoidLiteralExpr  extends LiteralExpr
 asString():String = "VoidLiteralExpr"
 end
object WhereBinding  extends AbstractNode
 asString():String = "WhereBinding"
 end
object WhereClause  extends AbstractNode
 asString():String = "WhereClause"
 end
object WhereCoerces  extends WhereConstraint
 asString():String = "WhereCoerces"
 end
trait WhereConstraint extends AbstractNode  end
object WhereEquals  extends WhereConstraint
 asString():String = "WhereEquals"
 end
object WhereExtends  extends WhereConstraint
 asString():String = "WhereExtends"
 end
object WhereTypeAlias  extends WhereConstraint
 asString():String = "WhereTypeAlias"
 end
object While  extends Expr
 asString():String = "While"
 end
object WhitespaceSymbol  extends SpecialSymbol
 asString():String = "WhitespaceSymbol"
 end

end

/* THIS FILE WAS AUTOMATICALLY GENERATED BY
   com.sun.fortress.astgen.ScalaAstGenerator FROM Fortress.ast */

package com.sun.fortress.scala_src.nodes
import com.sun.fortress.scala_src.useful._
import com.sun.fortress.nodes_util._
import com.sun.fortress.useful.HasAt
import _root_.scala.collection.mutable.ListBuffer
import _root_.java.math.BigInteger
import com.sun.fortress.scala_src.useful.ASTGenHelper._


object SASTNode {
   def unapply(node:com.sun.fortress.nodes.ASTNode) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
}
object SApplicable {
   def unapply(node:com.sun.fortress.nodes.Applicable) = 
      Some((scalaify(node.getHeader()).asInstanceOf[com.sun.fortress.nodes.FnHeader]))
}
object SGeneric {
   def unapply(node:com.sun.fortress.nodes.Generic) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getHeader()).asInstanceOf[com.sun.fortress.nodes.GenericHeader]))
}
object SInAfterTypeChecking {
   def unapply(node:com.sun.fortress.nodes.InAfterTypeChecking) = 
      Some(())
}
object SInOutPhases {
   def unapply(node:com.sun.fortress.nodes.InOutPhases) = 
      Some(())
}
object SInfo {
   def unapply(node:com.sun.fortress.nodes.Info) = 
      Some(())
}
object SLhs {
   def unapply(node:com.sun.fortress.nodes.Lhs) = 
      Some(())
}
object SNode {
   def unapply(node:com.sun.fortress.nodes.Node) = 
      Some(())
}
object SObjectConstructor {
   def unapply(node:com.sun.fortress.nodes.ObjectConstructor) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getHeader()).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader]))
}
object SOutAfterTypeChecking {
   def unapply(node:com.sun.fortress.nodes.OutAfterTypeChecking) = 
      Some(())
}
object STemplateGap {
   def unapply(node:com.sun.fortress.nodes.TemplateGap) = 
      Some((scalaify(node.getGapId()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getTemplateParams()).asInstanceOf[List[com.sun.fortress.nodes.Id]]))
}
object STypeOrPattern {
   def unapply(node:com.sun.fortress.nodes.TypeOrPattern) = 
      Some(())
}
object STypeVariable {
   def unapply(node:com.sun.fortress.nodes.TypeVariable) = 
      Some(())
}
object S_Ellipses {
   def unapply(node:com.sun.fortress.nodes._Ellipses) = 
      Some((scalaify(node.getRepeatedNode()).asInstanceOf[com.sun.fortress.nodes.AbstractNode]))
}
object S_SyntaxTransformation {
   def unapply(node:com.sun.fortress.nodes._SyntaxTransformation) = 
      Some((scalaify(node.getSyntaxTransformer()).asInstanceOf[String], scalaify(node.getVariables()).asInstanceOf[Map[String, com.sun.fortress.nodes.Level]], scalaify(node.getSyntaxParameters()).asInstanceOf[List[String]]))
}
object SAPIName {
   def unapply(node:com.sun.fortress.nodes.APIName) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getIds()).asInstanceOf[List[com.sun.fortress.nodes.Id]], scalaify(node.getText()).asInstanceOf[String]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getIds:List[com.sun.fortress.nodes.Id], getText:String) = 
      new com.sun.fortress.nodes.APIName(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getIds).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Id]], javaify(getText).asInstanceOf[String])
}
object SASTNodeInfo {
   def unapply(node:com.sun.fortress.nodes.ASTNodeInfo) = 
      Some((scalaify(node.getSpan()).asInstanceOf[com.sun.fortress.nodes_util.Span]))
}
object SAbbreviatedType {
   def unapply(node:com.sun.fortress.nodes.AbbreviatedType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getElemType()).asInstanceOf[com.sun.fortress.nodes.Type]))
}
object SAbstractNode {
   def unapply(node:com.sun.fortress.nodes.AbstractNode) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
}
object SAbstractObjectExpr {
   def unapply(node:com.sun.fortress.nodes.AbstractObjectExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getHeader()).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader]))
}
object SAccumulator {
   def unapply(node:com.sun.fortress.nodes.Accumulator) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], scalaify(node.getAccOp()).asInstanceOf[com.sun.fortress.nodes.Op], scalaify(node.getGens()).asInstanceOf[List[com.sun.fortress.nodes.GeneratorClause]], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getStaticArgs:List[com.sun.fortress.nodes.StaticArg], getAccOp:com.sun.fortress.nodes.Op, getGens:List[com.sun.fortress.nodes.GeneratorClause], getBody:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.Accumulator(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getStaticArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]], javaify(getAccOp).asInstanceOf[com.sun.fortress.nodes.Op], javaify(getGens).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.GeneratorClause]], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object SAliasedAPIName {
   def unapply(node:com.sun.fortress.nodes.AliasedAPIName) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getApiName()).asInstanceOf[com.sun.fortress.nodes.APIName], scalaify(node.getAlias()).asInstanceOf[Option[com.sun.fortress.nodes.Id]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getApiName:com.sun.fortress.nodes.APIName, getAlias:Option[com.sun.fortress.nodes.Id]) = 
      new com.sun.fortress.nodes.AliasedAPIName(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getApiName).asInstanceOf[com.sun.fortress.nodes.APIName], javaify(getAlias).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Id]])
}
object SAliasedSimpleName {
   def unapply(node:com.sun.fortress.nodes.AliasedSimpleName) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.IdOrOpOrAnonymousName], scalaify(node.getAlias()).asInstanceOf[Option[com.sun.fortress.nodes.IdOrOpOrAnonymousName]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.IdOrOpOrAnonymousName, getAlias:Option[com.sun.fortress.nodes.IdOrOpOrAnonymousName]) = 
      new com.sun.fortress.nodes.AliasedSimpleName(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.IdOrOpOrAnonymousName], javaify(getAlias).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.IdOrOpOrAnonymousName]])
}
object SAmbiguousMultifixOpExpr {
   def unapply(node:com.sun.fortress.nodes.AmbiguousMultifixOpExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getInfix_op()).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], scalaify(node.getMultifix_op()).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], scalaify(node.getArgs()).asInstanceOf[List[com.sun.fortress.nodes.Expr]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getInfix_op:com.sun.fortress.nodes.FunctionalRef, getMultifix_op:com.sun.fortress.nodes.FunctionalRef, getArgs:List[com.sun.fortress.nodes.Expr]) = 
      new com.sun.fortress.nodes.AmbiguousMultifixOpExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getInfix_op).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], javaify(getMultifix_op).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], javaify(getArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Expr]])
}
object SAndPredicateSymbol {
   def unapply(node:com.sun.fortress.nodes.AndPredicateSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getSymbol()).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getSymbol:com.sun.fortress.nodes.SyntaxSymbol) = 
      new com.sun.fortress.nodes.AndPredicateSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
}
object SAnonymousFnName {
   def unapply(node:com.sun.fortress.nodes.AnonymousFnName) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getApiName()).asInstanceOf[Option[com.sun.fortress.nodes.APIName]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getApiName:Option[com.sun.fortress.nodes.APIName]) = 
      new com.sun.fortress.nodes.AnonymousFnName(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getApiName).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.APIName]])
}
object SAnonymousName {
   def unapply(node:com.sun.fortress.nodes.AnonymousName) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getApiName()).asInstanceOf[Option[com.sun.fortress.nodes.APIName]]))
}
object SAnyCharacterSymbol {
   def unapply(node:com.sun.fortress.nodes.AnyCharacterSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo) = 
      new com.sun.fortress.nodes.AnyCharacterSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo])
}
object SAnyType {
   def unapply(node:com.sun.fortress.nodes.AnyType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo) = 
      new com.sun.fortress.nodes.AnyType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo])
}
object SApi {
   def unapply(node:com.sun.fortress.nodes.Api) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.APIName], scalaify(node.getImports()).asInstanceOf[List[com.sun.fortress.nodes.Import]], scalaify(node.getDecls()).asInstanceOf[List[com.sun.fortress.nodes.Decl]], scalaify(node.getComprises()).asInstanceOf[List[com.sun.fortress.nodes.APIName]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.APIName, getImports:List[com.sun.fortress.nodes.Import], getDecls:List[com.sun.fortress.nodes.Decl], getComprises:List[com.sun.fortress.nodes.APIName]) = 
      new com.sun.fortress.nodes.Api(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.APIName], javaify(getImports).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Import]], javaify(getDecls).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Decl]], javaify(getComprises).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.APIName]])
}
object SArrayComprehension {
   def unapply(node:com.sun.fortress.nodes.ArrayComprehension) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], scalaify(node.getClauses()).asInstanceOf[List[com.sun.fortress.nodes.ArrayComprehensionClause]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getStaticArgs:List[com.sun.fortress.nodes.StaticArg], getClauses:List[com.sun.fortress.nodes.ArrayComprehensionClause]) = 
      new com.sun.fortress.nodes.ArrayComprehension(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getStaticArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]], javaify(getClauses).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.ArrayComprehensionClause]])
}
object SArrayComprehensionClause {
   def unapply(node:com.sun.fortress.nodes.ArrayComprehensionClause) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getBind()).asInstanceOf[List[com.sun.fortress.nodes.Expr]], scalaify(node.getInit()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getGens()).asInstanceOf[List[com.sun.fortress.nodes.GeneratorClause]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getBind:List[com.sun.fortress.nodes.Expr], getInit:com.sun.fortress.nodes.Expr, getGens:List[com.sun.fortress.nodes.GeneratorClause]) = 
      new com.sun.fortress.nodes.ArrayComprehensionClause(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getBind).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Expr]], javaify(getInit).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getGens).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.GeneratorClause]])
}
object SArrayElement {
   def unapply(node:com.sun.fortress.nodes.ArrayElement) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], scalaify(node.getElement()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getStaticArgs:List[com.sun.fortress.nodes.StaticArg], getElement:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.ArrayElement(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getStaticArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]], javaify(getElement).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object SArrayElements {
   def unapply(node:com.sun.fortress.nodes.ArrayElements) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], scalaify(node.getDimension()).asInstanceOf[Int], scalaify(node.getElements()).asInstanceOf[List[com.sun.fortress.nodes.ArrayExpr]], scalaify(node.isOutermost()).asInstanceOf[Boolean]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getStaticArgs:List[com.sun.fortress.nodes.StaticArg], getDimension:Int, getElements:List[com.sun.fortress.nodes.ArrayExpr], isOutermost:Boolean) = 
      new com.sun.fortress.nodes.ArrayElements(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getStaticArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]], javaify(getDimension).asInstanceOf[Int], javaify(getElements).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.ArrayExpr]], javaify(isOutermost).asInstanceOf[Boolean])
}
object SArrayExpr {
   def unapply(node:com.sun.fortress.nodes.ArrayExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]]))
}
object SArrayType {
   def unapply(node:com.sun.fortress.nodes.ArrayType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getElemType()).asInstanceOf[com.sun.fortress.nodes.Type], scalaify(node.getIndices()).asInstanceOf[com.sun.fortress.nodes.Indices]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getElemType:com.sun.fortress.nodes.Type, getIndices:com.sun.fortress.nodes.Indices) = 
      new com.sun.fortress.nodes.ArrayType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getElemType).asInstanceOf[com.sun.fortress.nodes.Type], javaify(getIndices).asInstanceOf[com.sun.fortress.nodes.Indices])
}
object SArrowCoercionInvocation {
   def unapply(node:com.sun.fortress.nodes.ArrowCoercionInvocation) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getArg()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getToType()).asInstanceOf[com.sun.fortress.nodes.ArrowType], scalaify(node.getDomainCoercion()).asInstanceOf[Option[com.sun.fortress.nodes.CoercionInvocation]], scalaify(node.getRangeCoercion()).asInstanceOf[Option[com.sun.fortress.nodes.CoercionInvocation]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getArg:com.sun.fortress.nodes.Expr, getToType:com.sun.fortress.nodes.ArrowType, getDomainCoercion:Option[com.sun.fortress.nodes.CoercionInvocation], getRangeCoercion:Option[com.sun.fortress.nodes.CoercionInvocation]) = 
      new com.sun.fortress.nodes.ArrowCoercionInvocation(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getArg).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getToType).asInstanceOf[com.sun.fortress.nodes.ArrowType], javaify(getDomainCoercion).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.CoercionInvocation]], javaify(getRangeCoercion).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.CoercionInvocation]])
}
object SArrowType {
   def unapply(node:com.sun.fortress.nodes.ArrowType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getDomain()).asInstanceOf[com.sun.fortress.nodes.Type], scalaify(node.getRange()).asInstanceOf[com.sun.fortress.nodes.Type], scalaify(node.getEffect()).asInstanceOf[com.sun.fortress.nodes.Effect], scalaify(node.isIo()).asInstanceOf[Boolean], scalaify(node.getMethodInfo()).asInstanceOf[Option[com.sun.fortress.nodes.MethodInfo]]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getDomain:com.sun.fortress.nodes.Type, getRange:com.sun.fortress.nodes.Type, getEffect:com.sun.fortress.nodes.Effect, isIo:Boolean, getMethodInfo:Option[com.sun.fortress.nodes.MethodInfo]) = 
      new com.sun.fortress.nodes.ArrowType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getDomain).asInstanceOf[com.sun.fortress.nodes.Type], javaify(getRange).asInstanceOf[com.sun.fortress.nodes.Type], javaify(getEffect).asInstanceOf[com.sun.fortress.nodes.Effect], javaify(isIo).asInstanceOf[Boolean], javaify(getMethodInfo).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.MethodInfo]])
}
object SAsExpr {
   def unapply(node:com.sun.fortress.nodes.AsExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getExpr()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getAnnType()).asInstanceOf[com.sun.fortress.nodes.Type]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getExpr:com.sun.fortress.nodes.Expr, getAnnType:com.sun.fortress.nodes.Type) = 
      new com.sun.fortress.nodes.AsExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getAnnType).asInstanceOf[com.sun.fortress.nodes.Type])
}
object SAsIfExpr {
   def unapply(node:com.sun.fortress.nodes.AsIfExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getExpr()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getAnnType()).asInstanceOf[com.sun.fortress.nodes.Type]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getExpr:com.sun.fortress.nodes.Expr, getAnnType:com.sun.fortress.nodes.Type) = 
      new com.sun.fortress.nodes.AsIfExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getAnnType).asInstanceOf[com.sun.fortress.nodes.Type])
}
object SAssignment {
   def unapply(node:com.sun.fortress.nodes.Assignment) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getLhs()).asInstanceOf[List[com.sun.fortress.nodes.Lhs]], scalaify(node.getAssignOp()).asInstanceOf[Option[com.sun.fortress.nodes.FunctionalRef]], scalaify(node.getRhs()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getAssignmentInfos()).asInstanceOf[List[com.sun.fortress.nodes.CompoundAssignmentInfo]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getLhs:List[com.sun.fortress.nodes.Lhs], getAssignOp:Option[com.sun.fortress.nodes.FunctionalRef], getRhs:com.sun.fortress.nodes.Expr, getAssignmentInfos:List[com.sun.fortress.nodes.CompoundAssignmentInfo]) = 
      new com.sun.fortress.nodes.Assignment(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getLhs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Lhs]], javaify(getAssignOp).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.FunctionalRef]], javaify(getRhs).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getAssignmentInfos).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.CompoundAssignmentInfo]])
}
object SAtomicExpr {
   def unapply(node:com.sun.fortress.nodes.AtomicExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getExpr()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getExpr:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.AtomicExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object SBackspaceSymbol {
   def unapply(node:com.sun.fortress.nodes.BackspaceSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo) = 
      new com.sun.fortress.nodes.BackspaceSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo])
}
object SBaseType {
   def unapply(node:com.sun.fortress.nodes.BaseType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo]))
}
object SBigFixity {
   def unapply(node:com.sun.fortress.nodes.BigFixity) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.BigFixity
}
object SBigOpApp {
   def unapply(node:com.sun.fortress.nodes.BigOpApp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]]))
}
object SBinding {
   def unapply(node:com.sun.fortress.nodes.Binding) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getMods()).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], scalaify(node.getIdType()).asInstanceOf[Option[com.sun.fortress.nodes.TypeOrPattern]]))
}
object SBlock {
   def unapply(node:com.sun.fortress.nodes.Block) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getLoc()).asInstanceOf[Option[com.sun.fortress.nodes.Expr]], scalaify(node.isAtomicBlock()).asInstanceOf[Boolean], scalaify(node.isWithinDo()).asInstanceOf[Boolean], scalaify(node.getExprs()).asInstanceOf[List[com.sun.fortress.nodes.Expr]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getLoc:Option[com.sun.fortress.nodes.Expr], isAtomicBlock:Boolean, isWithinDo:Boolean, getExprs:List[com.sun.fortress.nodes.Expr]) = 
      new com.sun.fortress.nodes.Block(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getLoc).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Expr]], javaify(isAtomicBlock).asInstanceOf[Boolean], javaify(isWithinDo).asInstanceOf[Boolean], javaify(getExprs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Expr]])
}
object SBoolArg {
   def unapply(node:com.sun.fortress.nodes.BoolArg) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isLifted()).asInstanceOf[Boolean], scalaify(node.getBoolArg()).asInstanceOf[com.sun.fortress.nodes.BoolExpr]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isLifted:Boolean, getBoolArg:com.sun.fortress.nodes.BoolExpr) = 
      new com.sun.fortress.nodes.BoolArg(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isLifted).asInstanceOf[Boolean], javaify(getBoolArg).asInstanceOf[com.sun.fortress.nodes.BoolExpr])
}
object SBoolBase {
   def unapply(node:com.sun.fortress.nodes.BoolBase) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean], scalaify(node.isBoolVal()).asInstanceOf[Boolean]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isParenthesized:Boolean, isBoolVal:Boolean) = 
      new com.sun.fortress.nodes.BoolBase(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isParenthesized).asInstanceOf[Boolean], javaify(isBoolVal).asInstanceOf[Boolean])
}
object SBoolBinaryOp {
   def unapply(node:com.sun.fortress.nodes.BoolBinaryOp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean], scalaify(node.getLeft()).asInstanceOf[com.sun.fortress.nodes.BoolExpr], scalaify(node.getRight()).asInstanceOf[com.sun.fortress.nodes.BoolExpr], scalaify(node.getOp()).asInstanceOf[com.sun.fortress.nodes.Op]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isParenthesized:Boolean, getLeft:com.sun.fortress.nodes.BoolExpr, getRight:com.sun.fortress.nodes.BoolExpr, getOp:com.sun.fortress.nodes.Op) = 
      new com.sun.fortress.nodes.BoolBinaryOp(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isParenthesized).asInstanceOf[Boolean], javaify(getLeft).asInstanceOf[com.sun.fortress.nodes.BoolExpr], javaify(getRight).asInstanceOf[com.sun.fortress.nodes.BoolExpr], javaify(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
}
object SBoolConstraint {
   def unapply(node:com.sun.fortress.nodes.BoolConstraint) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean]))
}
object SBoolConstraintExpr {
   def unapply(node:com.sun.fortress.nodes.BoolConstraintExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getConstraint()).asInstanceOf[com.sun.fortress.nodes.BoolConstraint]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getConstraint:com.sun.fortress.nodes.BoolConstraint) = 
      new com.sun.fortress.nodes.BoolConstraintExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getConstraint).asInstanceOf[com.sun.fortress.nodes.BoolConstraint])
}
object SBoolExpr {
   def unapply(node:com.sun.fortress.nodes.BoolExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean]))
}
object SBoolRef {
   def unapply(node:com.sun.fortress.nodes.BoolRef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getLexicalDepth()).asInstanceOf[Int]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isParenthesized:Boolean, getName:com.sun.fortress.nodes.Id, getLexicalDepth:Int) = 
      new com.sun.fortress.nodes.BoolRef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isParenthesized).asInstanceOf[Boolean], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getLexicalDepth).asInstanceOf[Int])
}
object SBoolUnaryOp {
   def unapply(node:com.sun.fortress.nodes.BoolUnaryOp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean], scalaify(node.getBoolVal()).asInstanceOf[com.sun.fortress.nodes.BoolExpr], scalaify(node.getOp()).asInstanceOf[com.sun.fortress.nodes.Op]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isParenthesized:Boolean, getBoolVal:com.sun.fortress.nodes.BoolExpr, getOp:com.sun.fortress.nodes.Op) = 
      new com.sun.fortress.nodes.BoolUnaryOp(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isParenthesized).asInstanceOf[Boolean], javaify(getBoolVal).asInstanceOf[com.sun.fortress.nodes.BoolExpr], javaify(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
}
object SBooleanLiteralExpr {
   def unapply(node:com.sun.fortress.nodes.BooleanLiteralExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getText()).asInstanceOf[String], scalaify(node.getBooleanVal()).asInstanceOf[Int]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getText:String, getBooleanVal:Int) = 
      new com.sun.fortress.nodes.BooleanLiteralExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getText).asInstanceOf[String], javaify(getBooleanVal).asInstanceOf[Int])
}
object SBottomType {
   def unapply(node:com.sun.fortress.nodes.BottomType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo) = 
      new com.sun.fortress.nodes.BottomType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo])
}
object SBoundType {
   def unapply(node:com.sun.fortress.nodes.BoundType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getElements()).asInstanceOf[List[com.sun.fortress.nodes.Type]]))
}
object SBreaklineSymbol {
   def unapply(node:com.sun.fortress.nodes.BreaklineSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getS()).asInstanceOf[String]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getS:String) = 
      new com.sun.fortress.nodes.BreaklineSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getS).asInstanceOf[String])
}
object SCarriageReturnSymbol {
   def unapply(node:com.sun.fortress.nodes.CarriageReturnSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo) = 
      new com.sun.fortress.nodes.CarriageReturnSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo])
}
object SCaseClause {
   def unapply(node:com.sun.fortress.nodes.CaseClause) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getMatchClause()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Block], scalaify(node.getOp()).asInstanceOf[Option[com.sun.fortress.nodes.FunctionalRef]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getMatchClause:com.sun.fortress.nodes.Expr, getBody:com.sun.fortress.nodes.Block, getOp:Option[com.sun.fortress.nodes.FunctionalRef]) = 
      new com.sun.fortress.nodes.CaseClause(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getMatchClause).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Block], javaify(getOp).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.FunctionalRef]])
}
object SCaseExpr {
   def unapply(node:com.sun.fortress.nodes.CaseExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getParam()).asInstanceOf[Option[com.sun.fortress.nodes.Expr]], scalaify(node.getCompare()).asInstanceOf[Option[com.sun.fortress.nodes.FunctionalRef]], scalaify(node.getEqualsOp()).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], scalaify(node.getInOp()).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], scalaify(node.getClauses()).asInstanceOf[List[com.sun.fortress.nodes.CaseClause]], scalaify(node.getElseClause()).asInstanceOf[Option[com.sun.fortress.nodes.Block]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getParam:Option[com.sun.fortress.nodes.Expr], getCompare:Option[com.sun.fortress.nodes.FunctionalRef], getEqualsOp:com.sun.fortress.nodes.FunctionalRef, getInOp:com.sun.fortress.nodes.FunctionalRef, getClauses:List[com.sun.fortress.nodes.CaseClause], getElseClause:Option[com.sun.fortress.nodes.Block]) = 
      new com.sun.fortress.nodes.CaseExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getParam).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Expr]], javaify(getCompare).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.FunctionalRef]], javaify(getEqualsOp).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], javaify(getInOp).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], javaify(getClauses).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.CaseClause]], javaify(getElseClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Block]])
}
object SCaseTransformer {
   def unapply(node:com.sun.fortress.nodes.CaseTransformer) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getGapName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getClauses()).asInstanceOf[List[com.sun.fortress.nodes.CaseTransformerClause]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getGapName:com.sun.fortress.nodes.Id, getClauses:List[com.sun.fortress.nodes.CaseTransformerClause]) = 
      new com.sun.fortress.nodes.CaseTransformer(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getGapName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getClauses).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.CaseTransformerClause]])
}
object SCaseTransformerClause {
   def unapply(node:com.sun.fortress.nodes.CaseTransformerClause) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getConstructor()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getParameters()).asInstanceOf[List[com.sun.fortress.nodes.Id]], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Transformer]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getConstructor:com.sun.fortress.nodes.Id, getParameters:List[com.sun.fortress.nodes.Id], getBody:com.sun.fortress.nodes.Transformer) = 
      new com.sun.fortress.nodes.CaseTransformerClause(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getConstructor).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getParameters).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Id]], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Transformer])
}
object SCatch {
   def unapply(node:com.sun.fortress.nodes.Catch) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getClauses()).asInstanceOf[List[com.sun.fortress.nodes.CatchClause]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id, getClauses:List[com.sun.fortress.nodes.CatchClause]) = 
      new com.sun.fortress.nodes.Catch(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getClauses).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.CatchClause]])
}
object SCatchClause {
   def unapply(node:com.sun.fortress.nodes.CatchClause) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getMatchType()).asInstanceOf[com.sun.fortress.nodes.BaseType], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Block]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getMatchType:com.sun.fortress.nodes.BaseType, getBody:com.sun.fortress.nodes.Block) = 
      new com.sun.fortress.nodes.CatchClause(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getMatchType).asInstanceOf[com.sun.fortress.nodes.BaseType], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Block])
}
object SChainExpr {
   def unapply(node:com.sun.fortress.nodes.ChainExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getFirst()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getLinks()).asInstanceOf[List[com.sun.fortress.nodes.Link]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getFirst:com.sun.fortress.nodes.Expr, getLinks:List[com.sun.fortress.nodes.Link]) = 
      new com.sun.fortress.nodes.ChainExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getFirst).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getLinks).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Link]])
}
object SCharLiteralExpr {
   def unapply(node:com.sun.fortress.nodes.CharLiteralExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getText()).asInstanceOf[String], scalaify(node.getCharVal()).asInstanceOf[Int]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getText:String, getCharVal:Int) = 
      new com.sun.fortress.nodes.CharLiteralExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getText).asInstanceOf[String], javaify(getCharVal).asInstanceOf[Int])
}
object SCharSymbol {
   def unapply(node:com.sun.fortress.nodes.CharSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getString()).asInstanceOf[String]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getString:String) = 
      new com.sun.fortress.nodes.CharSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getString).asInstanceOf[String])
}
object SCharacterClassSymbol {
   def unapply(node:com.sun.fortress.nodes.CharacterClassSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getCharacters()).asInstanceOf[List[com.sun.fortress.nodes.CharacterSymbol]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getCharacters:List[com.sun.fortress.nodes.CharacterSymbol]) = 
      new com.sun.fortress.nodes.CharacterClassSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getCharacters).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.CharacterSymbol]])
}
object SCharacterInterval {
   def unapply(node:com.sun.fortress.nodes.CharacterInterval) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getBeginSymbol()).asInstanceOf[String], scalaify(node.getEndSymbol()).asInstanceOf[String]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getBeginSymbol:String, getEndSymbol:String) = 
      new com.sun.fortress.nodes.CharacterInterval(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getBeginSymbol).asInstanceOf[String], javaify(getEndSymbol).asInstanceOf[String])
}
object SCharacterSymbol {
   def unapply(node:com.sun.fortress.nodes.CharacterSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
}
object SCoercionInvocation {
   def unapply(node:com.sun.fortress.nodes.CoercionInvocation) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getToType()).asInstanceOf[com.sun.fortress.nodes.Type], scalaify(node.getArg()).asInstanceOf[com.sun.fortress.nodes.Expr]))
}
object SCompilationUnit {
   def unapply(node:com.sun.fortress.nodes.CompilationUnit) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.APIName], scalaify(node.getImports()).asInstanceOf[List[com.sun.fortress.nodes.Import]], scalaify(node.getDecls()).asInstanceOf[List[com.sun.fortress.nodes.Decl]], scalaify(node.getComprises()).asInstanceOf[List[com.sun.fortress.nodes.APIName]]))
}
object SComponent {
   def unapply(node:com.sun.fortress.nodes.Component) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.APIName], scalaify(node.getImports()).asInstanceOf[List[com.sun.fortress.nodes.Import]], scalaify(node.getDecls()).asInstanceOf[List[com.sun.fortress.nodes.Decl]], scalaify(node.getComprises()).asInstanceOf[List[com.sun.fortress.nodes.APIName]], scalaify(node.is_native()).asInstanceOf[Boolean], scalaify(node.getExports()).asInstanceOf[List[com.sun.fortress.nodes.APIName]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.APIName, getImports:List[com.sun.fortress.nodes.Import], getDecls:List[com.sun.fortress.nodes.Decl], getComprises:List[com.sun.fortress.nodes.APIName], is_native:Boolean, getExports:List[com.sun.fortress.nodes.APIName]) = 
      new com.sun.fortress.nodes.Component(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.APIName], javaify(getImports).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Import]], javaify(getDecls).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Decl]], javaify(getComprises).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.APIName]], javaify(is_native).asInstanceOf[Boolean], javaify(getExports).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.APIName]])
}
object SCompoundAssignmentInfo {
   def unapply(node:com.sun.fortress.nodes.CompoundAssignmentInfo) = 
      Some((scalaify(node.getOpForLhs()).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], scalaify(node.getCompoundCoercionOuter()).asInstanceOf[Option[com.sun.fortress.nodes.CoercionInvocation]], scalaify(node.getCompoundCoercionInner()).asInstanceOf[Option[com.sun.fortress.nodes.CoercionInvocation]]))
   def apply(getOpForLhs:com.sun.fortress.nodes.FunctionalRef, getCompoundCoercionOuter:Option[com.sun.fortress.nodes.CoercionInvocation], getCompoundCoercionInner:Option[com.sun.fortress.nodes.CoercionInvocation]) = 
      new com.sun.fortress.nodes.CompoundAssignmentInfo(javaify(getOpForLhs).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], javaify(getCompoundCoercionOuter).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.CoercionInvocation]], javaify(getCompoundCoercionInner).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.CoercionInvocation]])
}
object SConstructorFnName {
   def unapply(node:com.sun.fortress.nodes.ConstructorFnName) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getApiName()).asInstanceOf[Option[com.sun.fortress.nodes.APIName]], scalaify(node.getConstructor()).asInstanceOf[com.sun.fortress.nodes.ObjectConstructor]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getApiName:Option[com.sun.fortress.nodes.APIName], getConstructor:com.sun.fortress.nodes.ObjectConstructor) = 
      new com.sun.fortress.nodes.ConstructorFnName(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getApiName).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.APIName]], javaify(getConstructor).asInstanceOf[com.sun.fortress.nodes.ObjectConstructor])
}
object SContract {
   def unapply(node:com.sun.fortress.nodes.Contract) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getRequiresClause()).asInstanceOf[Option[List[com.sun.fortress.nodes.Expr]]], scalaify(node.getEnsuresClause()).asInstanceOf[Option[List[com.sun.fortress.nodes.EnsuresClause]]], scalaify(node.getInvariantsClause()).asInstanceOf[Option[List[com.sun.fortress.nodes.Expr]]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getRequiresClause:Option[List[com.sun.fortress.nodes.Expr]], getEnsuresClause:Option[List[com.sun.fortress.nodes.EnsuresClause]], getInvariantsClause:Option[List[com.sun.fortress.nodes.Expr]]) = 
      new com.sun.fortress.nodes.Contract(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getRequiresClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[_root_.java.util.List[com.sun.fortress.nodes.Expr]]], javaify(getEnsuresClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[_root_.java.util.List[com.sun.fortress.nodes.EnsuresClause]]], javaify(getInvariantsClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[_root_.java.util.List[com.sun.fortress.nodes.Expr]]])
}
object SDataNode {
   def unapply(node:com.sun.fortress.nodes.DataNode) = 
      Some(())
}
object SDecl {
   def unapply(node:com.sun.fortress.nodes.Decl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
}
object SDeclHeader {
   def unapply(node:com.sun.fortress.nodes.DeclHeader) = 
      Some((scalaify(node.getStaticParams()).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]], scalaify(node.getMods()).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.IdOrOpOrAnonymousName], scalaify(node.getWhereClause()).asInstanceOf[Option[com.sun.fortress.nodes.WhereClause]], scalaify(node.getThrowsClause()).asInstanceOf[Option[List[com.sun.fortress.nodes.Type]]], scalaify(node.getContract()).asInstanceOf[Option[com.sun.fortress.nodes.Contract]]))
}
object SDimArg {
   def unapply(node:com.sun.fortress.nodes.DimArg) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isLifted()).asInstanceOf[Boolean], scalaify(node.getDimArg()).asInstanceOf[com.sun.fortress.nodes.DimExpr]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isLifted:Boolean, getDimArg:com.sun.fortress.nodes.DimExpr) = 
      new com.sun.fortress.nodes.DimArg(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isLifted).asInstanceOf[Boolean], javaify(getDimArg).asInstanceOf[com.sun.fortress.nodes.DimExpr])
}
object SDimBase {
   def unapply(node:com.sun.fortress.nodes.DimBase) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo) = 
      new com.sun.fortress.nodes.DimBase(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo])
}
object SDimBinaryOp {
   def unapply(node:com.sun.fortress.nodes.DimBinaryOp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getLeft()).asInstanceOf[com.sun.fortress.nodes.DimExpr], scalaify(node.getRight()).asInstanceOf[com.sun.fortress.nodes.DimExpr], scalaify(node.getOp()).asInstanceOf[com.sun.fortress.nodes.Op]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getLeft:com.sun.fortress.nodes.DimExpr, getRight:com.sun.fortress.nodes.DimExpr, getOp:com.sun.fortress.nodes.Op) = 
      new com.sun.fortress.nodes.DimBinaryOp(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getLeft).asInstanceOf[com.sun.fortress.nodes.DimExpr], javaify(getRight).asInstanceOf[com.sun.fortress.nodes.DimExpr], javaify(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
}
object SDimDecl {
   def unapply(node:com.sun.fortress.nodes.DimDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getDimId()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getDerived()).asInstanceOf[Option[com.sun.fortress.nodes.Type]], scalaify(node.getDefaultId()).asInstanceOf[Option[com.sun.fortress.nodes.Id]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getDimId:com.sun.fortress.nodes.Id, getDerived:Option[com.sun.fortress.nodes.Type], getDefaultId:Option[com.sun.fortress.nodes.Id]) = 
      new com.sun.fortress.nodes.DimDecl(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getDimId).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getDerived).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]], javaify(getDefaultId).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Id]])
}
object SDimExponent {
   def unapply(node:com.sun.fortress.nodes.DimExponent) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getBase()).asInstanceOf[com.sun.fortress.nodes.Type], scalaify(node.getPower()).asInstanceOf[com.sun.fortress.nodes.IntExpr]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getBase:com.sun.fortress.nodes.Type, getPower:com.sun.fortress.nodes.IntExpr) = 
      new com.sun.fortress.nodes.DimExponent(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getBase).asInstanceOf[com.sun.fortress.nodes.Type], javaify(getPower).asInstanceOf[com.sun.fortress.nodes.IntExpr])
}
object SDimExpr {
   def unapply(node:com.sun.fortress.nodes.DimExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo]))
}
object SDimRef {
   def unapply(node:com.sun.fortress.nodes.DimRef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getName:com.sun.fortress.nodes.Id) = 
      new com.sun.fortress.nodes.DimRef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id])
}
object SDimUnaryOp {
   def unapply(node:com.sun.fortress.nodes.DimUnaryOp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getDimVal()).asInstanceOf[com.sun.fortress.nodes.DimExpr], scalaify(node.getOp()).asInstanceOf[com.sun.fortress.nodes.Op]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getDimVal:com.sun.fortress.nodes.DimExpr, getOp:com.sun.fortress.nodes.Op) = 
      new com.sun.fortress.nodes.DimUnaryOp(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getDimVal).asInstanceOf[com.sun.fortress.nodes.DimExpr], javaify(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
}
object SDimUnitDecl {
   def unapply(node:com.sun.fortress.nodes.DimUnitDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
}
object SDo {
   def unapply(node:com.sun.fortress.nodes.Do) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getFronts()).asInstanceOf[List[com.sun.fortress.nodes.Block]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getFronts:List[com.sun.fortress.nodes.Block]) = 
      new com.sun.fortress.nodes.Do(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getFronts).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Block]])
}
object SDummyExpr {
   def unapply(node:com.sun.fortress.nodes.DummyExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo) = 
      new com.sun.fortress.nodes.DummyExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo])
}
object SEffect {
   def unapply(node:com.sun.fortress.nodes.Effect) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getThrowsClause()).asInstanceOf[Option[List[com.sun.fortress.nodes.Type]]], scalaify(node.isIoEffect()).asInstanceOf[Boolean]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getThrowsClause:Option[List[com.sun.fortress.nodes.Type]], isIoEffect:Boolean) = 
      new com.sun.fortress.nodes.Effect(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getThrowsClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[_root_.java.util.List[com.sun.fortress.nodes.Type]]], javaify(isIoEffect).asInstanceOf[Boolean])
}
object SEnclosingFixity {
   def unapply(node:com.sun.fortress.nodes.EnclosingFixity) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.EnclosingFixity
}
object SEnsuresClause {
   def unapply(node:com.sun.fortress.nodes.EnsuresClause) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getPost()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getPre()).asInstanceOf[Option[com.sun.fortress.nodes.Expr]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getPost:com.sun.fortress.nodes.Expr, getPre:Option[com.sun.fortress.nodes.Expr]) = 
      new com.sun.fortress.nodes.EnsuresClause(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getPost).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getPre).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Expr]])
}
object SExit {
   def unapply(node:com.sun.fortress.nodes.Exit) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getTarget()).asInstanceOf[Option[com.sun.fortress.nodes.Id]], scalaify(node.getReturnExpr()).asInstanceOf[Option[com.sun.fortress.nodes.Expr]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getTarget:Option[com.sun.fortress.nodes.Id], getReturnExpr:Option[com.sun.fortress.nodes.Expr]) = 
      new com.sun.fortress.nodes.Exit(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getTarget).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Id]], javaify(getReturnExpr).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Expr]])
}
object SExponentiationMI {
   def unapply(node:com.sun.fortress.nodes.ExponentiationMI) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getOp()).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], scalaify(node.getExpr()).asInstanceOf[Option[com.sun.fortress.nodes.Expr]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getOp:com.sun.fortress.nodes.FunctionalRef, getExpr:Option[com.sun.fortress.nodes.Expr]) = 
      new com.sun.fortress.nodes.ExponentiationMI(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getOp).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], javaify(getExpr).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Expr]])
}
object SExpr {
   def unapply(node:com.sun.fortress.nodes.Expr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo]))
}
object SExprInfo {
   def unapply(node:com.sun.fortress.nodes.ExprInfo) = 
      Some((scalaify(node.getSpan()).asInstanceOf[com.sun.fortress.nodes_util.Span], scalaify(node.isParenthesized()).asInstanceOf[Boolean], scalaify(node.getExprType()).asInstanceOf[Option[com.sun.fortress.nodes.Type]]))
   def apply(getSpan:com.sun.fortress.nodes_util.Span, isParenthesized:Boolean, getExprType:Option[com.sun.fortress.nodes.Type]) = 
      new com.sun.fortress.nodes.ExprInfo(javaify(getSpan).asInstanceOf[com.sun.fortress.nodes_util.Span], javaify(isParenthesized).asInstanceOf[Boolean], javaify(getExprType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]])
}
object SExprMI {
   def unapply(node:com.sun.fortress.nodes.ExprMI) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getExpr()).asInstanceOf[com.sun.fortress.nodes.Expr]))
}
object SExtentRange {
   def unapply(node:com.sun.fortress.nodes.ExtentRange) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getBase()).asInstanceOf[Option[com.sun.fortress.nodes.StaticArg]], scalaify(node.getSize()).asInstanceOf[Option[com.sun.fortress.nodes.StaticArg]], scalaify(node.getOp()).asInstanceOf[Option[com.sun.fortress.nodes.Op]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getBase:Option[com.sun.fortress.nodes.StaticArg], getSize:Option[com.sun.fortress.nodes.StaticArg], getOp:Option[com.sun.fortress.nodes.Op]) = 
      new com.sun.fortress.nodes.ExtentRange(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getBase).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.StaticArg]], javaify(getSize).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.StaticArg]], javaify(getOp).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Op]])
}
object SFieldRef {
   def unapply(node:com.sun.fortress.nodes.FieldRef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getObj()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getField()).asInstanceOf[com.sun.fortress.nodes.Id]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getObj:com.sun.fortress.nodes.Expr, getField:com.sun.fortress.nodes.Id) = 
      new com.sun.fortress.nodes.FieldRef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getObj).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getField).asInstanceOf[com.sun.fortress.nodes.Id])
}
object SFixedPointType {
   def unapply(node:com.sun.fortress.nodes.FixedPointType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes._InferenceVarType], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Type]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getName:com.sun.fortress.nodes._InferenceVarType, getBody:com.sun.fortress.nodes.Type) = 
      new com.sun.fortress.nodes.FixedPointType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes._InferenceVarType], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Type])
}
object SFixity {
   def unapply(node:com.sun.fortress.nodes.Fixity) = 
      Some(())
}
object SFloatLiteralExpr {
   def unapply(node:com.sun.fortress.nodes.FloatLiteralExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getText()).asInstanceOf[String], scalaify(node.getIntPart()).asInstanceOf[_root_.java.math.BigInteger], scalaify(node.getNumerator()).asInstanceOf[_root_.java.math.BigInteger], scalaify(node.getDenomBase()).asInstanceOf[Int], scalaify(node.getDenomPower()).asInstanceOf[Int]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getText:String, getIntPart:_root_.java.math.BigInteger, getNumerator:_root_.java.math.BigInteger, getDenomBase:Int, getDenomPower:Int) = 
      new com.sun.fortress.nodes.FloatLiteralExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getText).asInstanceOf[String], javaify(getIntPart).asInstanceOf[_root_.java.math.BigInteger], javaify(getNumerator).asInstanceOf[_root_.java.math.BigInteger], javaify(getDenomBase).asInstanceOf[Int], javaify(getDenomPower).asInstanceOf[Int])
}
object SFnDecl {
   def unapply(node:com.sun.fortress.nodes.FnDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getHeader()).asInstanceOf[com.sun.fortress.nodes.FnHeader], scalaify(node.getUnambiguousName()).asInstanceOf[com.sun.fortress.nodes.IdOrOp], scalaify(node.getBody()).asInstanceOf[Option[com.sun.fortress.nodes.Expr]], scalaify(node.getImplementsUnambiguousName()).asInstanceOf[Option[com.sun.fortress.nodes.IdOrOp]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getHeader:com.sun.fortress.nodes.FnHeader, getUnambiguousName:com.sun.fortress.nodes.IdOrOp, getBody:Option[com.sun.fortress.nodes.Expr], getImplementsUnambiguousName:Option[com.sun.fortress.nodes.IdOrOp]) = 
      new com.sun.fortress.nodes.FnDecl(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getHeader).asInstanceOf[com.sun.fortress.nodes.FnHeader], javaify(getUnambiguousName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], javaify(getBody).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Expr]], javaify(getImplementsUnambiguousName).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.IdOrOp]])
}
object SFnExpr {
   def unapply(node:com.sun.fortress.nodes.FnExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getHeader()).asInstanceOf[com.sun.fortress.nodes.FnHeader], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getHeader:com.sun.fortress.nodes.FnHeader, getBody:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.FnExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getHeader).asInstanceOf[com.sun.fortress.nodes.FnHeader], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object SFnHeader {
   def unapply(node:com.sun.fortress.nodes.FnHeader) = 
      Some((scalaify(node.getStaticParams()).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]], scalaify(node.getMods()).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.IdOrOpOrAnonymousName], scalaify(node.getWhereClause()).asInstanceOf[Option[com.sun.fortress.nodes.WhereClause]], scalaify(node.getThrowsClause()).asInstanceOf[Option[List[com.sun.fortress.nodes.Type]]], scalaify(node.getContract()).asInstanceOf[Option[com.sun.fortress.nodes.Contract]], scalaify(node.getParams()).asInstanceOf[List[com.sun.fortress.nodes.Param]], scalaify(node.getReturnType()).asInstanceOf[Option[com.sun.fortress.nodes.Type]]))
   def apply(getStaticParams:List[com.sun.fortress.nodes.StaticParam], getMods:com.sun.fortress.nodes_util.Modifiers, getName:com.sun.fortress.nodes.IdOrOpOrAnonymousName, getWhereClause:Option[com.sun.fortress.nodes.WhereClause], getThrowsClause:Option[List[com.sun.fortress.nodes.Type]], getContract:Option[com.sun.fortress.nodes.Contract], getParams:List[com.sun.fortress.nodes.Param], getReturnType:Option[com.sun.fortress.nodes.Type]) = 
      new com.sun.fortress.nodes.FnHeader(javaify(getStaticParams).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticParam]], javaify(getMods).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], javaify(getName).asInstanceOf[com.sun.fortress.nodes.IdOrOpOrAnonymousName], javaify(getWhereClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.WhereClause]], javaify(getThrowsClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[_root_.java.util.List[com.sun.fortress.nodes.Type]]], javaify(getContract).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Contract]], javaify(getParams).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Param]], javaify(getReturnType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]])
}
object SFnRef {
   def unapply(node:com.sun.fortress.nodes.FnRef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], scalaify(node.getLexicalDepth()).asInstanceOf[Int], scalaify(node.getOriginalName()).asInstanceOf[com.sun.fortress.nodes.IdOrOp], scalaify(node.getNames()).asInstanceOf[List[com.sun.fortress.nodes.IdOrOp]], scalaify(node.getInterpOverloadings()).asInstanceOf[List[com.sun.fortress.nodes.Overloading]], scalaify(node.getNewOverloadings()).asInstanceOf[List[com.sun.fortress.nodes.Overloading]], scalaify(node.getOverloadingType()).asInstanceOf[Option[com.sun.fortress.nodes.Type]], scalaify(node.getOverloadingSchema()).asInstanceOf[Option[com.sun.fortress.nodes.Type]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getStaticArgs:List[com.sun.fortress.nodes.StaticArg], getLexicalDepth:Int, getOriginalName:com.sun.fortress.nodes.IdOrOp, getNames:List[com.sun.fortress.nodes.IdOrOp], getInterpOverloadings:List[com.sun.fortress.nodes.Overloading], getNewOverloadings:List[com.sun.fortress.nodes.Overloading], getOverloadingType:Option[com.sun.fortress.nodes.Type], getOverloadingSchema:Option[com.sun.fortress.nodes.Type]) = 
      new com.sun.fortress.nodes.FnRef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getStaticArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]], javaify(getLexicalDepth).asInstanceOf[Int], javaify(getOriginalName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], javaify(getNames).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.IdOrOp]], javaify(getInterpOverloadings).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Overloading]], javaify(getNewOverloadings).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Overloading]], javaify(getOverloadingType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]], javaify(getOverloadingSchema).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]])
}
object SFor {
   def unapply(node:com.sun.fortress.nodes.For) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getGens()).asInstanceOf[List[com.sun.fortress.nodes.GeneratorClause]], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Block]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getGens:List[com.sun.fortress.nodes.GeneratorClause], getBody:com.sun.fortress.nodes.Block) = 
      new com.sun.fortress.nodes.For(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getGens).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.GeneratorClause]], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Block])
}
object SFormfeedSymbol {
   def unapply(node:com.sun.fortress.nodes.FormfeedSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo) = 
      new com.sun.fortress.nodes.FormfeedSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo])
}
object SFunctionalRef {
   def unapply(node:com.sun.fortress.nodes.FunctionalRef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], scalaify(node.getLexicalDepth()).asInstanceOf[Int], scalaify(node.getOriginalName()).asInstanceOf[com.sun.fortress.nodes.IdOrOp], scalaify(node.getNames()).asInstanceOf[List[com.sun.fortress.nodes.IdOrOp]], scalaify(node.getInterpOverloadings()).asInstanceOf[List[com.sun.fortress.nodes.Overloading]], scalaify(node.getNewOverloadings()).asInstanceOf[List[com.sun.fortress.nodes.Overloading]], scalaify(node.getOverloadingType()).asInstanceOf[Option[com.sun.fortress.nodes.Type]], scalaify(node.getOverloadingSchema()).asInstanceOf[Option[com.sun.fortress.nodes.Type]]))
}
object SGeneratorClause {
   def unapply(node:com.sun.fortress.nodes.GeneratorClause) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getBind()).asInstanceOf[List[com.sun.fortress.nodes.Id]], scalaify(node.getInit()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getBind:List[com.sun.fortress.nodes.Id], getInit:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.GeneratorClause(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getBind).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Id]], javaify(getInit).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object SGenericHeader {
   def unapply(node:com.sun.fortress.nodes.GenericHeader) = 
      Some((scalaify(node.getStaticParams()).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]]))
}
object SGrammarDecl {
   def unapply(node:com.sun.fortress.nodes.GrammarDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getExtendsClause()).asInstanceOf[List[com.sun.fortress.nodes.Id]], scalaify(node.getMembers()).asInstanceOf[List[com.sun.fortress.nodes.GrammarMemberDecl]], scalaify(node.getTransformers()).asInstanceOf[List[com.sun.fortress.nodes.TransformerDecl]], scalaify(node.isNativeDef()).asInstanceOf[Boolean]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id, getExtendsClause:List[com.sun.fortress.nodes.Id], getMembers:List[com.sun.fortress.nodes.GrammarMemberDecl], getTransformers:List[com.sun.fortress.nodes.TransformerDecl], isNativeDef:Boolean) = 
      new com.sun.fortress.nodes.GrammarDecl(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getExtendsClause).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Id]], javaify(getMembers).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.GrammarMemberDecl]], javaify(getTransformers).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.TransformerDecl]], javaify(isNativeDef).asInstanceOf[Boolean])
}
object SGrammarMemberDecl {
   def unapply(node:com.sun.fortress.nodes.GrammarMemberDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id]))
}
object SGroupSymbol {
   def unapply(node:com.sun.fortress.nodes.GroupSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getSymbols()).asInstanceOf[List[com.sun.fortress.nodes.SyntaxSymbol]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getSymbols:List[com.sun.fortress.nodes.SyntaxSymbol]) = 
      new com.sun.fortress.nodes.GroupSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getSymbols).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.SyntaxSymbol]])
}
object SId {
   def unapply(node:com.sun.fortress.nodes.Id) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getApiName()).asInstanceOf[Option[com.sun.fortress.nodes.APIName]], scalaify(node.getText()).asInstanceOf[String]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getApiName:Option[com.sun.fortress.nodes.APIName], getText:String) = 
      new com.sun.fortress.nodes.Id(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getApiName).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.APIName]], javaify(getText).asInstanceOf[String])
}
object SIdOrOp {
   def unapply(node:com.sun.fortress.nodes.IdOrOp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getApiName()).asInstanceOf[Option[com.sun.fortress.nodes.APIName]], scalaify(node.getText()).asInstanceOf[String]))
}
object SIdOrOpOrAnonymousName {
   def unapply(node:com.sun.fortress.nodes.IdOrOpOrAnonymousName) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getApiName()).asInstanceOf[Option[com.sun.fortress.nodes.APIName]]))
}
object SIf {
   def unapply(node:com.sun.fortress.nodes.If) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getClauses()).asInstanceOf[List[com.sun.fortress.nodes.IfClause]], scalaify(node.getElseClause()).asInstanceOf[Option[com.sun.fortress.nodes.Block]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getClauses:List[com.sun.fortress.nodes.IfClause], getElseClause:Option[com.sun.fortress.nodes.Block]) = 
      new com.sun.fortress.nodes.If(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getClauses).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.IfClause]], javaify(getElseClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Block]])
}
object SIfClause {
   def unapply(node:com.sun.fortress.nodes.IfClause) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getTestClause()).asInstanceOf[com.sun.fortress.nodes.GeneratorClause], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Block]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getTestClause:com.sun.fortress.nodes.GeneratorClause, getBody:com.sun.fortress.nodes.Block) = 
      new com.sun.fortress.nodes.IfClause(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getTestClause).asInstanceOf[com.sun.fortress.nodes.GeneratorClause], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Block])
}
object SImport {
   def unapply(node:com.sun.fortress.nodes.Import) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getForeignLanguage()).asInstanceOf[Option[String]]))
}
object SImportApi {
   def unapply(node:com.sun.fortress.nodes.ImportApi) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getForeignLanguage()).asInstanceOf[Option[String]], scalaify(node.getApis()).asInstanceOf[List[com.sun.fortress.nodes.AliasedAPIName]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getForeignLanguage:Option[String], getApis:List[com.sun.fortress.nodes.AliasedAPIName]) = 
      new com.sun.fortress.nodes.ImportApi(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getForeignLanguage).asInstanceOf[edu.rice.cs.plt.tuple.Option[String]], javaify(getApis).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.AliasedAPIName]])
}
object SImportNames {
   def unapply(node:com.sun.fortress.nodes.ImportNames) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getForeignLanguage()).asInstanceOf[Option[String]], scalaify(node.getApiName()).asInstanceOf[com.sun.fortress.nodes.APIName], scalaify(node.getAliasedNames()).asInstanceOf[List[com.sun.fortress.nodes.AliasedSimpleName]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getForeignLanguage:Option[String], getApiName:com.sun.fortress.nodes.APIName, getAliasedNames:List[com.sun.fortress.nodes.AliasedSimpleName]) = 
      new com.sun.fortress.nodes.ImportNames(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getForeignLanguage).asInstanceOf[edu.rice.cs.plt.tuple.Option[String]], javaify(getApiName).asInstanceOf[com.sun.fortress.nodes.APIName], javaify(getAliasedNames).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.AliasedSimpleName]])
}
object SImportStar {
   def unapply(node:com.sun.fortress.nodes.ImportStar) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getForeignLanguage()).asInstanceOf[Option[String]], scalaify(node.getApiName()).asInstanceOf[com.sun.fortress.nodes.APIName], scalaify(node.getExceptNames()).asInstanceOf[List[com.sun.fortress.nodes.IdOrOpOrAnonymousName]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getForeignLanguage:Option[String], getApiName:com.sun.fortress.nodes.APIName, getExceptNames:List[com.sun.fortress.nodes.IdOrOpOrAnonymousName]) = 
      new com.sun.fortress.nodes.ImportStar(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getForeignLanguage).asInstanceOf[edu.rice.cs.plt.tuple.Option[String]], javaify(getApiName).asInstanceOf[com.sun.fortress.nodes.APIName], javaify(getExceptNames).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.IdOrOpOrAnonymousName]])
}
object SImportedNames {
   def unapply(node:com.sun.fortress.nodes.ImportedNames) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getForeignLanguage()).asInstanceOf[Option[String]], scalaify(node.getApiName()).asInstanceOf[com.sun.fortress.nodes.APIName]))
}
object SInFixity {
   def unapply(node:com.sun.fortress.nodes.InFixity) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.InFixity
}
object SIndices {
   def unapply(node:com.sun.fortress.nodes.Indices) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getExtents()).asInstanceOf[List[com.sun.fortress.nodes.ExtentRange]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getExtents:List[com.sun.fortress.nodes.ExtentRange]) = 
      new com.sun.fortress.nodes.Indices(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getExtents).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.ExtentRange]])
}
object SInfoNode {
   def unapply(node:com.sun.fortress.nodes.InfoNode) = 
      Some(())
}
object SIntArg {
   def unapply(node:com.sun.fortress.nodes.IntArg) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isLifted()).asInstanceOf[Boolean], scalaify(node.getIntVal()).asInstanceOf[com.sun.fortress.nodes.IntExpr]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isLifted:Boolean, getIntVal:com.sun.fortress.nodes.IntExpr) = 
      new com.sun.fortress.nodes.IntArg(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isLifted).asInstanceOf[Boolean], javaify(getIntVal).asInstanceOf[com.sun.fortress.nodes.IntExpr])
}
object SIntBase {
   def unapply(node:com.sun.fortress.nodes.IntBase) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean], scalaify(node.getIntVal()).asInstanceOf[com.sun.fortress.nodes.IntLiteralExpr]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isParenthesized:Boolean, getIntVal:com.sun.fortress.nodes.IntLiteralExpr) = 
      new com.sun.fortress.nodes.IntBase(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isParenthesized).asInstanceOf[Boolean], javaify(getIntVal).asInstanceOf[com.sun.fortress.nodes.IntLiteralExpr])
}
object SIntBinaryOp {
   def unapply(node:com.sun.fortress.nodes.IntBinaryOp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean], scalaify(node.getLeft()).asInstanceOf[com.sun.fortress.nodes.IntExpr], scalaify(node.getRight()).asInstanceOf[com.sun.fortress.nodes.IntExpr], scalaify(node.getOp()).asInstanceOf[com.sun.fortress.nodes.Op]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isParenthesized:Boolean, getLeft:com.sun.fortress.nodes.IntExpr, getRight:com.sun.fortress.nodes.IntExpr, getOp:com.sun.fortress.nodes.Op) = 
      new com.sun.fortress.nodes.IntBinaryOp(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isParenthesized).asInstanceOf[Boolean], javaify(getLeft).asInstanceOf[com.sun.fortress.nodes.IntExpr], javaify(getRight).asInstanceOf[com.sun.fortress.nodes.IntExpr], javaify(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
}
object SIntConstraint {
   def unapply(node:com.sun.fortress.nodes.IntConstraint) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getLeft()).asInstanceOf[com.sun.fortress.nodes.IntExpr], scalaify(node.getRight()).asInstanceOf[com.sun.fortress.nodes.IntExpr], scalaify(node.getOp()).asInstanceOf[com.sun.fortress.nodes.Op]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getLeft:com.sun.fortress.nodes.IntExpr, getRight:com.sun.fortress.nodes.IntExpr, getOp:com.sun.fortress.nodes.Op) = 
      new com.sun.fortress.nodes.IntConstraint(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getLeft).asInstanceOf[com.sun.fortress.nodes.IntExpr], javaify(getRight).asInstanceOf[com.sun.fortress.nodes.IntExpr], javaify(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
}
object SIntExpr {
   def unapply(node:com.sun.fortress.nodes.IntExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean]))
}
object SIntLiteralExpr {
   def unapply(node:com.sun.fortress.nodes.IntLiteralExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getText()).asInstanceOf[String], scalaify(node.getIntVal()).asInstanceOf[_root_.java.math.BigInteger]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getText:String, getIntVal:_root_.java.math.BigInteger) = 
      new com.sun.fortress.nodes.IntLiteralExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getText).asInstanceOf[String], javaify(getIntVal).asInstanceOf[_root_.java.math.BigInteger])
}
object SIntRef {
   def unapply(node:com.sun.fortress.nodes.IntRef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getLexicalDepth()).asInstanceOf[Int]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isParenthesized:Boolean, getName:com.sun.fortress.nodes.Id, getLexicalDepth:Int) = 
      new com.sun.fortress.nodes.IntRef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isParenthesized).asInstanceOf[Boolean], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getLexicalDepth).asInstanceOf[Int])
}
object SIntersectionType {
   def unapply(node:com.sun.fortress.nodes.IntersectionType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getElements()).asInstanceOf[List[com.sun.fortress.nodes.Type]]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getElements:List[com.sun.fortress.nodes.Type]) = 
      new com.sun.fortress.nodes.IntersectionType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getElements).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Type]])
}
object SItemSymbol {
   def unapply(node:com.sun.fortress.nodes.ItemSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getItem()).asInstanceOf[String]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getItem:String) = 
      new com.sun.fortress.nodes.ItemSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getItem).asInstanceOf[String])
}
object SJuxt {
   def unapply(node:com.sun.fortress.nodes.Juxt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getMultiJuxt()).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], scalaify(node.getInfixJuxt()).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], scalaify(node.getExprs()).asInstanceOf[List[com.sun.fortress.nodes.Expr]], scalaify(node.isFnApp()).asInstanceOf[Boolean], scalaify(node.isTight()).asInstanceOf[Boolean]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getMultiJuxt:com.sun.fortress.nodes.FunctionalRef, getInfixJuxt:com.sun.fortress.nodes.FunctionalRef, getExprs:List[com.sun.fortress.nodes.Expr], isFnApp:Boolean, isTight:Boolean) = 
      new com.sun.fortress.nodes.Juxt(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getMultiJuxt).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], javaify(getInfixJuxt).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], javaify(getExprs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Expr]], javaify(isFnApp).asInstanceOf[Boolean], javaify(isTight).asInstanceOf[Boolean])
}
object SKeywordExpr {
   def unapply(node:com.sun.fortress.nodes.KeywordExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getInit()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id, getInit:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.KeywordExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getInit).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object SKeywordSymbol {
   def unapply(node:com.sun.fortress.nodes.KeywordSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getToken()).asInstanceOf[String]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getToken:String) = 
      new com.sun.fortress.nodes.KeywordSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getToken).asInstanceOf[String])
}
object SKeywordType {
   def unapply(node:com.sun.fortress.nodes.KeywordType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getKeywordType()).asInstanceOf[com.sun.fortress.nodes.Type]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id, getKeywordType:com.sun.fortress.nodes.Type) = 
      new com.sun.fortress.nodes.KeywordType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getKeywordType).asInstanceOf[com.sun.fortress.nodes.Type])
}
object SKindBool {
   def unapply(node:com.sun.fortress.nodes.KindBool) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.KindBool
}
object SKindDim {
   def unapply(node:com.sun.fortress.nodes.KindDim) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.KindDim
}
object SKindInt {
   def unapply(node:com.sun.fortress.nodes.KindInt) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.KindInt
}
object SKindNat {
   def unapply(node:com.sun.fortress.nodes.KindNat) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.KindNat
}
object SKindOp {
   def unapply(node:com.sun.fortress.nodes.KindOp) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.KindOp
}
object SKindType {
   def unapply(node:com.sun.fortress.nodes.KindType) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.KindType
}
object SKindUnit {
   def unapply(node:com.sun.fortress.nodes.KindUnit) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.KindUnit
}
object SLValue {
   def unapply(node:com.sun.fortress.nodes.LValue) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getMods()).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], scalaify(node.getIdType()).asInstanceOf[Option[com.sun.fortress.nodes.TypeOrPattern]], scalaify(node.isMutable()).asInstanceOf[Boolean]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id, getMods:com.sun.fortress.nodes_util.Modifiers, getIdType:Option[com.sun.fortress.nodes.TypeOrPattern], isMutable:Boolean) = 
      new com.sun.fortress.nodes.LValue(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getMods).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], javaify(getIdType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.TypeOrPattern]], javaify(isMutable).asInstanceOf[Boolean])
}
object SLabel {
   def unapply(node:com.sun.fortress.nodes.Label) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Block]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getName:com.sun.fortress.nodes.Id, getBody:com.sun.fortress.nodes.Block) = 
      new com.sun.fortress.nodes.Label(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Block])
}
object SLabelType {
   def unapply(node:com.sun.fortress.nodes.LabelType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo) = 
      new com.sun.fortress.nodes.LabelType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo])
}
object SLetExpr {
   def unapply(node:com.sun.fortress.nodes.LetExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Block]))
}
object SLetFn {
   def unapply(node:com.sun.fortress.nodes.LetFn) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Block], scalaify(node.getFns()).asInstanceOf[List[com.sun.fortress.nodes.FnDecl]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getBody:com.sun.fortress.nodes.Block, getFns:List[com.sun.fortress.nodes.FnDecl]) = 
      new com.sun.fortress.nodes.LetFn(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Block], javaify(getFns).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.FnDecl]])
}
object SLevel {
   def unapply(node:com.sun.fortress.nodes.Level) = 
      Some((scalaify(node.getLevel()).asInstanceOf[Int], scalaify(node.get_object()).asInstanceOf[_root_.java.lang.Object]))
   def apply(getLevel:Int, get_object:_root_.java.lang.Object) = 
      new com.sun.fortress.nodes.Level(javaify(getLevel).asInstanceOf[Int], javaify(get_object).asInstanceOf[_root_.java.lang.Object])
}
object SLink {
   def unapply(node:com.sun.fortress.nodes.Link) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getOp()).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], scalaify(node.getExpr()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getOp:com.sun.fortress.nodes.FunctionalRef, getExpr:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.Link(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getOp).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], javaify(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object SLiteralExpr {
   def unapply(node:com.sun.fortress.nodes.LiteralExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getText()).asInstanceOf[String]))
}
object SLocalVarDecl {
   def unapply(node:com.sun.fortress.nodes.LocalVarDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Block], scalaify(node.getLhs()).asInstanceOf[List[com.sun.fortress.nodes.LValue]], scalaify(node.getRhs()).asInstanceOf[Option[com.sun.fortress.nodes.Expr]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getBody:com.sun.fortress.nodes.Block, getLhs:List[com.sun.fortress.nodes.LValue], getRhs:Option[com.sun.fortress.nodes.Expr]) = 
      new com.sun.fortress.nodes.LocalVarDecl(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Block], javaify(getLhs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.LValue]], javaify(getRhs).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Expr]])
}
object SMathItem {
   def unapply(node:com.sun.fortress.nodes.MathItem) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
}
object SMathPrimary {
   def unapply(node:com.sun.fortress.nodes.MathPrimary) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getMultiJuxt()).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], scalaify(node.getInfixJuxt()).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], scalaify(node.getFront()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getRest()).asInstanceOf[List[com.sun.fortress.nodes.MathItem]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getMultiJuxt:com.sun.fortress.nodes.FunctionalRef, getInfixJuxt:com.sun.fortress.nodes.FunctionalRef, getFront:com.sun.fortress.nodes.Expr, getRest:List[com.sun.fortress.nodes.MathItem]) = 
      new com.sun.fortress.nodes.MathPrimary(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getMultiJuxt).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], javaify(getInfixJuxt).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], javaify(getFront).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getRest).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.MathItem]])
}
object SMatrixType {
   def unapply(node:com.sun.fortress.nodes.MatrixType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getElemType()).asInstanceOf[com.sun.fortress.nodes.Type], scalaify(node.getDimensions()).asInstanceOf[List[com.sun.fortress.nodes.ExtentRange]]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getElemType:com.sun.fortress.nodes.Type, getDimensions:List[com.sun.fortress.nodes.ExtentRange]) = 
      new com.sun.fortress.nodes.MatrixType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getElemType).asInstanceOf[com.sun.fortress.nodes.Type], javaify(getDimensions).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.ExtentRange]])
}
object SMethodInfo {
   def unapply(node:com.sun.fortress.nodes.MethodInfo) = 
      Some((scalaify(node.getSelfType()).asInstanceOf[com.sun.fortress.nodes.Type], scalaify(node.getSelfPosition()).asInstanceOf[Int]))
   def apply(getSelfType:com.sun.fortress.nodes.Type, getSelfPosition:Int) = 
      new com.sun.fortress.nodes.MethodInfo(javaify(getSelfType).asInstanceOf[com.sun.fortress.nodes.Type], javaify(getSelfPosition).asInstanceOf[Int])
}
object SMethodInvocation {
   def unapply(node:com.sun.fortress.nodes.MethodInvocation) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getObj()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getMethod()).asInstanceOf[com.sun.fortress.nodes.IdOrOp], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], scalaify(node.getArg()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getOverloadingType()).asInstanceOf[Option[com.sun.fortress.nodes.Type]], scalaify(node.getOverloadingSchema()).asInstanceOf[Option[com.sun.fortress.nodes.Type]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getObj:com.sun.fortress.nodes.Expr, getMethod:com.sun.fortress.nodes.IdOrOp, getStaticArgs:List[com.sun.fortress.nodes.StaticArg], getArg:com.sun.fortress.nodes.Expr, getOverloadingType:Option[com.sun.fortress.nodes.Type], getOverloadingSchema:Option[com.sun.fortress.nodes.Type]) = 
      new com.sun.fortress.nodes.MethodInvocation(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getObj).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getMethod).asInstanceOf[com.sun.fortress.nodes.IdOrOp], javaify(getStaticArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]], javaify(getArg).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getOverloadingType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]], javaify(getOverloadingSchema).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]])
}
object SMultiFixity {
   def unapply(node:com.sun.fortress.nodes.MultiFixity) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.MultiFixity
}
object SName {
   def unapply(node:com.sun.fortress.nodes.Name) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
}
object SNamedOp {
   def unapply(node:com.sun.fortress.nodes.NamedOp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getApiName()).asInstanceOf[Option[com.sun.fortress.nodes.APIName]], scalaify(node.getText()).asInstanceOf[String], scalaify(node.getFixity()).asInstanceOf[com.sun.fortress.nodes.Fixity], scalaify(node.isEnclosing()).asInstanceOf[Boolean]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getApiName:Option[com.sun.fortress.nodes.APIName], getText:String, getFixity:com.sun.fortress.nodes.Fixity, isEnclosing:Boolean) = 
      new com.sun.fortress.nodes.NamedOp(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getApiName).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.APIName]], javaify(getText).asInstanceOf[String], javaify(getFixity).asInstanceOf[com.sun.fortress.nodes.Fixity], javaify(isEnclosing).asInstanceOf[Boolean])
}
object SNamedTransformerDef {
   def unapply(node:com.sun.fortress.nodes.NamedTransformerDef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[String], scalaify(node.getParameters()).asInstanceOf[List[com.sun.fortress.nodes.NonterminalParameter]], scalaify(node.getTransformer()).asInstanceOf[com.sun.fortress.nodes.Transformer]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:String, getParameters:List[com.sun.fortress.nodes.NonterminalParameter], getTransformer:com.sun.fortress.nodes.Transformer) = 
      new com.sun.fortress.nodes.NamedTransformerDef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[String], javaify(getParameters).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.NonterminalParameter]], javaify(getTransformer).asInstanceOf[com.sun.fortress.nodes.Transformer])
}
object SNamedType {
   def unapply(node:com.sun.fortress.nodes.NamedType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id]))
}
object SNestedPattern {
   def unapply(node:com.sun.fortress.nodes.NestedPattern) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getField()).asInstanceOf[Option[com.sun.fortress.nodes.Id]], scalaify(node.getPat()).asInstanceOf[com.sun.fortress.nodes.Pattern]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getField:Option[com.sun.fortress.nodes.Id], getPat:com.sun.fortress.nodes.Pattern) = 
      new com.sun.fortress.nodes.NestedPattern(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getField).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Id]], javaify(getPat).asInstanceOf[com.sun.fortress.nodes.Pattern])
}
object SNewlineSymbol {
   def unapply(node:com.sun.fortress.nodes.NewlineSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo) = 
      new com.sun.fortress.nodes.NewlineSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo])
}
object SNoFixity {
   def unapply(node:com.sun.fortress.nodes.NoFixity) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.NoFixity
}
object SNoWhitespaceSymbol {
   def unapply(node:com.sun.fortress.nodes.NoWhitespaceSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getSymbol()).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getSymbol:com.sun.fortress.nodes.SyntaxSymbol) = 
      new com.sun.fortress.nodes.NoWhitespaceSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
}
object SNodeTransformer {
   def unapply(node:com.sun.fortress.nodes.NodeTransformer) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getNode()).asInstanceOf[com.sun.fortress.nodes.AbstractNode]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getNode:com.sun.fortress.nodes.AbstractNode) = 
      new com.sun.fortress.nodes.NodeTransformer(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getNode).asInstanceOf[com.sun.fortress.nodes.AbstractNode])
}
object SNonExprMI {
   def unapply(node:com.sun.fortress.nodes.NonExprMI) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
}
object SNonParenthesisDelimitedMI {
   def unapply(node:com.sun.fortress.nodes.NonParenthesisDelimitedMI) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getExpr()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getExpr:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.NonParenthesisDelimitedMI(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object SNonterminalDecl {
   def unapply(node:com.sun.fortress.nodes.NonterminalDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getSyntaxDecls()).asInstanceOf[List[com.sun.fortress.nodes.SyntaxDecl]]))
}
object SNonterminalDef {
   def unapply(node:com.sun.fortress.nodes.NonterminalDef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getSyntaxDecls()).asInstanceOf[List[com.sun.fortress.nodes.SyntaxDecl]], scalaify(node.getHeader()).asInstanceOf[com.sun.fortress.nodes.NonterminalHeader], scalaify(node.getAstType()).asInstanceOf[Option[com.sun.fortress.nodes.BaseType]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id, getSyntaxDecls:List[com.sun.fortress.nodes.SyntaxDecl], getHeader:com.sun.fortress.nodes.NonterminalHeader, getAstType:Option[com.sun.fortress.nodes.BaseType]) = 
      new com.sun.fortress.nodes.NonterminalDef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getSyntaxDecls).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.SyntaxDecl]], javaify(getHeader).asInstanceOf[com.sun.fortress.nodes.NonterminalHeader], javaify(getAstType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.BaseType]])
}
object SNonterminalExtensionDef {
   def unapply(node:com.sun.fortress.nodes.NonterminalExtensionDef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getSyntaxDecls()).asInstanceOf[List[com.sun.fortress.nodes.SyntaxDecl]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id, getSyntaxDecls:List[com.sun.fortress.nodes.SyntaxDecl]) = 
      new com.sun.fortress.nodes.NonterminalExtensionDef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getSyntaxDecls).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.SyntaxDecl]])
}
object SNonterminalHeader {
   def unapply(node:com.sun.fortress.nodes.NonterminalHeader) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getMods()).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getParams()).asInstanceOf[List[com.sun.fortress.nodes.NonterminalParameter]], scalaify(node.getStaticParams()).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]], scalaify(node.getParamType()).asInstanceOf[Option[com.sun.fortress.nodes.Type]], scalaify(node.getWhereClause()).asInstanceOf[Option[com.sun.fortress.nodes.WhereClause]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getMods:com.sun.fortress.nodes_util.Modifiers, getName:com.sun.fortress.nodes.Id, getParams:List[com.sun.fortress.nodes.NonterminalParameter], getStaticParams:List[com.sun.fortress.nodes.StaticParam], getParamType:Option[com.sun.fortress.nodes.Type], getWhereClause:Option[com.sun.fortress.nodes.WhereClause]) = 
      new com.sun.fortress.nodes.NonterminalHeader(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getMods).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getParams).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.NonterminalParameter]], javaify(getStaticParams).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticParam]], javaify(getParamType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]], javaify(getWhereClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.WhereClause]])
}
object SNonterminalParameter {
   def unapply(node:com.sun.fortress.nodes.NonterminalParameter) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getParamType()).asInstanceOf[com.sun.fortress.nodes.BaseType]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id, getParamType:com.sun.fortress.nodes.BaseType) = 
      new com.sun.fortress.nodes.NonterminalParameter(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getParamType).asInstanceOf[com.sun.fortress.nodes.BaseType])
}
object SNonterminalSymbol {
   def unapply(node:com.sun.fortress.nodes.NonterminalSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getNonterminal()).asInstanceOf[com.sun.fortress.nodes.Id]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getNonterminal:com.sun.fortress.nodes.Id) = 
      new com.sun.fortress.nodes.NonterminalSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getNonterminal).asInstanceOf[com.sun.fortress.nodes.Id])
}
object SNotPredicateSymbol {
   def unapply(node:com.sun.fortress.nodes.NotPredicateSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getSymbol()).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getSymbol:com.sun.fortress.nodes.SyntaxSymbol) = 
      new com.sun.fortress.nodes.NotPredicateSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
}
object SNumberLiteralExpr {
   def unapply(node:com.sun.fortress.nodes.NumberLiteralExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getText()).asInstanceOf[String]))
}
object SObjectDecl {
   def unapply(node:com.sun.fortress.nodes.ObjectDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getHeader()).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader], scalaify(node.getSelfType()).asInstanceOf[Option[com.sun.fortress.nodes.SelfType]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getHeader:com.sun.fortress.nodes.TraitTypeHeader, getSelfType:Option[com.sun.fortress.nodes.SelfType]) = 
      new com.sun.fortress.nodes.ObjectDecl(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getHeader).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader], javaify(getSelfType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.SelfType]])
}
object SObjectExpr {
   def unapply(node:com.sun.fortress.nodes.ObjectExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getHeader()).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader], scalaify(node.getSelfType()).asInstanceOf[Option[com.sun.fortress.nodes.SelfType]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getHeader:com.sun.fortress.nodes.TraitTypeHeader, getSelfType:Option[com.sun.fortress.nodes.SelfType]) = 
      new com.sun.fortress.nodes.ObjectExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getHeader).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader], javaify(getSelfType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.SelfType]])
}
object SObjectExprType {
   def unapply(node:com.sun.fortress.nodes.ObjectExprType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getExtended()).asInstanceOf[List[com.sun.fortress.nodes.BaseType]]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getExtended:List[com.sun.fortress.nodes.BaseType]) = 
      new com.sun.fortress.nodes.ObjectExprType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getExtended).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.BaseType]])
}
object SOp {
   def unapply(node:com.sun.fortress.nodes.Op) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getApiName()).asInstanceOf[Option[com.sun.fortress.nodes.APIName]], scalaify(node.getText()).asInstanceOf[String], scalaify(node.getFixity()).asInstanceOf[com.sun.fortress.nodes.Fixity], scalaify(node.isEnclosing()).asInstanceOf[Boolean]))
}
object SOpArg {
   def unapply(node:com.sun.fortress.nodes.OpArg) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isLifted()).asInstanceOf[Boolean], scalaify(node.getId()).asInstanceOf[com.sun.fortress.nodes.Op]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isLifted:Boolean, getId:com.sun.fortress.nodes.Op) = 
      new com.sun.fortress.nodes.OpArg(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isLifted).asInstanceOf[Boolean], javaify(getId).asInstanceOf[com.sun.fortress.nodes.Op])
}
object SOpExpr {
   def unapply(node:com.sun.fortress.nodes.OpExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getOp()).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], scalaify(node.getArgs()).asInstanceOf[List[com.sun.fortress.nodes.Expr]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getOp:com.sun.fortress.nodes.FunctionalRef, getArgs:List[com.sun.fortress.nodes.Expr]) = 
      new com.sun.fortress.nodes.OpExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getOp).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], javaify(getArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Expr]])
}
object SOpRef {
   def unapply(node:com.sun.fortress.nodes.OpRef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], scalaify(node.getLexicalDepth()).asInstanceOf[Int], scalaify(node.getOriginalName()).asInstanceOf[com.sun.fortress.nodes.IdOrOp], scalaify(node.getNames()).asInstanceOf[List[com.sun.fortress.nodes.IdOrOp]], scalaify(node.getInterpOverloadings()).asInstanceOf[List[com.sun.fortress.nodes.Overloading]], scalaify(node.getNewOverloadings()).asInstanceOf[List[com.sun.fortress.nodes.Overloading]], scalaify(node.getOverloadingType()).asInstanceOf[Option[com.sun.fortress.nodes.Type]], scalaify(node.getOverloadingSchema()).asInstanceOf[Option[com.sun.fortress.nodes.Type]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getStaticArgs:List[com.sun.fortress.nodes.StaticArg], getLexicalDepth:Int, getOriginalName:com.sun.fortress.nodes.IdOrOp, getNames:List[com.sun.fortress.nodes.IdOrOp], getInterpOverloadings:List[com.sun.fortress.nodes.Overloading], getNewOverloadings:List[com.sun.fortress.nodes.Overloading], getOverloadingType:Option[com.sun.fortress.nodes.Type], getOverloadingSchema:Option[com.sun.fortress.nodes.Type]) = 
      new com.sun.fortress.nodes.OpRef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getStaticArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]], javaify(getLexicalDepth).asInstanceOf[Int], javaify(getOriginalName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], javaify(getNames).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.IdOrOp]], javaify(getInterpOverloadings).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Overloading]], javaify(getNewOverloadings).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Overloading]], javaify(getOverloadingType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]], javaify(getOverloadingSchema).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]])
}
object SOptionalSymbol {
   def unapply(node:com.sun.fortress.nodes.OptionalSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getSymbol()).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getSymbol:com.sun.fortress.nodes.SyntaxSymbol) = 
      new com.sun.fortress.nodes.OptionalSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
}
object SOverloading {
   def unapply(node:com.sun.fortress.nodes.Overloading) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getUnambiguousName()).asInstanceOf[com.sun.fortress.nodes.IdOrOp], scalaify(node.getOriginalName()).asInstanceOf[com.sun.fortress.nodes.IdOrOp], scalaify(node.getType()).asInstanceOf[Option[com.sun.fortress.nodes.ArrowType]], scalaify(node.getSchema()).asInstanceOf[Option[com.sun.fortress.nodes.ArrowType]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getUnambiguousName:com.sun.fortress.nodes.IdOrOp, getOriginalName:com.sun.fortress.nodes.IdOrOp, getType:Option[com.sun.fortress.nodes.ArrowType], getSchema:Option[com.sun.fortress.nodes.ArrowType]) = 
      new com.sun.fortress.nodes.Overloading(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getUnambiguousName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], javaify(getOriginalName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], javaify(getType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.ArrowType]], javaify(getSchema).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.ArrowType]])
}
object SParam {
   def unapply(node:com.sun.fortress.nodes.Param) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getMods()).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], scalaify(node.getIdType()).asInstanceOf[Option[com.sun.fortress.nodes.TypeOrPattern]], scalaify(node.getDefaultExpr()).asInstanceOf[Option[com.sun.fortress.nodes.Expr]], scalaify(node.getVarargsType()).asInstanceOf[Option[com.sun.fortress.nodes.Type]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id, getMods:com.sun.fortress.nodes_util.Modifiers, getIdType:Option[com.sun.fortress.nodes.TypeOrPattern], getDefaultExpr:Option[com.sun.fortress.nodes.Expr], getVarargsType:Option[com.sun.fortress.nodes.Type]) = 
      new com.sun.fortress.nodes.Param(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getMods).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], javaify(getIdType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.TypeOrPattern]], javaify(getDefaultExpr).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Expr]], javaify(getVarargsType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]])
}
object SParenthesisDelimitedMI {
   def unapply(node:com.sun.fortress.nodes.ParenthesisDelimitedMI) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getExpr()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getExpr:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.ParenthesisDelimitedMI(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object SParenthesizedInfo {
   def unapply(node:com.sun.fortress.nodes.ParenthesizedInfo) = 
      Some((scalaify(node.getSpan()).asInstanceOf[com.sun.fortress.nodes_util.Span], scalaify(node.isParenthesized()).asInstanceOf[Boolean]))
}
object SPattern {
   def unapply(node:com.sun.fortress.nodes.Pattern) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[Option[com.sun.fortress.nodes.Type]], scalaify(node.getPatterns()).asInstanceOf[com.sun.fortress.nodes.PatternArgs]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:Option[com.sun.fortress.nodes.Type], getPatterns:com.sun.fortress.nodes.PatternArgs) = 
      new com.sun.fortress.nodes.Pattern(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]], javaify(getPatterns).asInstanceOf[com.sun.fortress.nodes.PatternArgs])
}
object SPatternArgs {
   def unapply(node:com.sun.fortress.nodes.PatternArgs) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getPatterns()).asInstanceOf[List[com.sun.fortress.nodes.PatternBinding]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getPatterns:List[com.sun.fortress.nodes.PatternBinding]) = 
      new com.sun.fortress.nodes.PatternArgs(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getPatterns).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.PatternBinding]])
}
object SPatternBinding {
   def unapply(node:com.sun.fortress.nodes.PatternBinding) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getField()).asInstanceOf[Option[com.sun.fortress.nodes.Id]]))
}
object SPlainPattern {
   def unapply(node:com.sun.fortress.nodes.PlainPattern) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getField()).asInstanceOf[Option[com.sun.fortress.nodes.Id]], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getMods()).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], scalaify(node.getIdType()).asInstanceOf[Option[com.sun.fortress.nodes.TypeOrPattern]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getField:Option[com.sun.fortress.nodes.Id], getName:com.sun.fortress.nodes.Id, getMods:com.sun.fortress.nodes_util.Modifiers, getIdType:Option[com.sun.fortress.nodes.TypeOrPattern]) = 
      new com.sun.fortress.nodes.PlainPattern(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getField).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Id]], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getMods).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], javaify(getIdType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.TypeOrPattern]])
}
object SPostFixity {
   def unapply(node:com.sun.fortress.nodes.PostFixity) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.PostFixity
}
object SPreFixity {
   def unapply(node:com.sun.fortress.nodes.PreFixity) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.PreFixity
}
object SPreTransformerDef {
   def unapply(node:com.sun.fortress.nodes.PreTransformerDef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getTransformer()).asInstanceOf[com.sun.fortress.nodes.Transformer]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getTransformer:com.sun.fortress.nodes.Transformer) = 
      new com.sun.fortress.nodes.PreTransformerDef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getTransformer).asInstanceOf[com.sun.fortress.nodes.Transformer])
}
object SPrefixedSymbol {
   def unapply(node:com.sun.fortress.nodes.PrefixedSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getId()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getSymbol()).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getId:com.sun.fortress.nodes.Id, getSymbol:com.sun.fortress.nodes.SyntaxSymbol) = 
      new com.sun.fortress.nodes.PrefixedSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getId).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
}
object SPrimary {
   def unapply(node:com.sun.fortress.nodes.Primary) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo]))
}
object SPropertyDecl {
   def unapply(node:com.sun.fortress.nodes.PropertyDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[Option[com.sun.fortress.nodes.Id]], scalaify(node.getParams()).asInstanceOf[List[com.sun.fortress.nodes.Param]], scalaify(node.getExpr()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:Option[com.sun.fortress.nodes.Id], getParams:List[com.sun.fortress.nodes.Param], getExpr:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.PropertyDecl(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Id]], javaify(getParams).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Param]], javaify(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object SRepeatOneOrMoreSymbol {
   def unapply(node:com.sun.fortress.nodes.RepeatOneOrMoreSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getSymbol()).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getSymbol:com.sun.fortress.nodes.SyntaxSymbol) = 
      new com.sun.fortress.nodes.RepeatOneOrMoreSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
}
object SRepeatSymbol {
   def unapply(node:com.sun.fortress.nodes.RepeatSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getSymbol()).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getSymbol:com.sun.fortress.nodes.SyntaxSymbol) = 
      new com.sun.fortress.nodes.RepeatSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
}
object SSelfType {
   def unapply(node:com.sun.fortress.nodes.SelfType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo]))
}
object SSimpleExpr {
   def unapply(node:com.sun.fortress.nodes.SimpleExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo]))
}
object SSpanInfo {
   def unapply(node:com.sun.fortress.nodes.SpanInfo) = 
      Some((scalaify(node.getSpan()).asInstanceOf[com.sun.fortress.nodes_util.Span]))
   def apply(getSpan:com.sun.fortress.nodes_util.Span) = 
      new com.sun.fortress.nodes.SpanInfo(javaify(getSpan).asInstanceOf[com.sun.fortress.nodes_util.Span])
}
object SSpawn {
   def unapply(node:com.sun.fortress.nodes.Spawn) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getBody:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.Spawn(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object SSpecialSymbol {
   def unapply(node:com.sun.fortress.nodes.SpecialSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
}
object SStaticArg {
   def unapply(node:com.sun.fortress.nodes.StaticArg) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isLifted()).asInstanceOf[Boolean]))
}
object SStaticExpr {
   def unapply(node:com.sun.fortress.nodes.StaticExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean]))
}
object SStaticParam {
   def unapply(node:com.sun.fortress.nodes.StaticParam) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getVariance()).asInstanceOf[Int], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.IdOrOp], scalaify(node.getExtendsClause()).asInstanceOf[List[com.sun.fortress.nodes.BaseType]], scalaify(node.getDominatesClause()).asInstanceOf[List[com.sun.fortress.nodes.BaseType]], scalaify(node.getDimParam()).asInstanceOf[Option[com.sun.fortress.nodes.Type]], scalaify(node.isAbsorbsParam()).asInstanceOf[Boolean], scalaify(node.getKind()).asInstanceOf[com.sun.fortress.nodes.StaticParamKind], scalaify(node.isLifted()).asInstanceOf[Boolean]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getVariance:Int, getName:com.sun.fortress.nodes.IdOrOp, getExtendsClause:List[com.sun.fortress.nodes.BaseType], getDominatesClause:List[com.sun.fortress.nodes.BaseType], getDimParam:Option[com.sun.fortress.nodes.Type], isAbsorbsParam:Boolean, getKind:com.sun.fortress.nodes.StaticParamKind, isLifted:Boolean) = 
      new com.sun.fortress.nodes.StaticParam(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getVariance).asInstanceOf[Int], javaify(getName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], javaify(getExtendsClause).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.BaseType]], javaify(getDominatesClause).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.BaseType]], javaify(getDimParam).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]], javaify(isAbsorbsParam).asInstanceOf[Boolean], javaify(getKind).asInstanceOf[com.sun.fortress.nodes.StaticParamKind], javaify(isLifted).asInstanceOf[Boolean])
}
object SStaticParamKind {
   def unapply(node:com.sun.fortress.nodes.StaticParamKind) = 
      Some(())
}
object SStringLiteralExpr {
   def unapply(node:com.sun.fortress.nodes.StringLiteralExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getText()).asInstanceOf[String]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getText:String) = 
      new com.sun.fortress.nodes.StringLiteralExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getText).asInstanceOf[String])
}
object SSubscriptExpr {
   def unapply(node:com.sun.fortress.nodes.SubscriptExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getObj()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getSubs()).asInstanceOf[List[com.sun.fortress.nodes.Expr]], scalaify(node.getOp()).asInstanceOf[Option[com.sun.fortress.nodes.Op]], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getObj:com.sun.fortress.nodes.Expr, getSubs:List[com.sun.fortress.nodes.Expr], getOp:Option[com.sun.fortress.nodes.Op], getStaticArgs:List[com.sun.fortress.nodes.StaticArg]) = 
      new com.sun.fortress.nodes.SubscriptExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getObj).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getSubs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Expr]], javaify(getOp).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Op]], javaify(getStaticArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]])
}
object SSubscriptingMI {
   def unapply(node:com.sun.fortress.nodes.SubscriptingMI) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getOp()).asInstanceOf[com.sun.fortress.nodes.Op], scalaify(node.getExprs()).asInstanceOf[List[com.sun.fortress.nodes.Expr]], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getOp:com.sun.fortress.nodes.Op, getExprs:List[com.sun.fortress.nodes.Expr], getStaticArgs:List[com.sun.fortress.nodes.StaticArg]) = 
      new com.sun.fortress.nodes.SubscriptingMI(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getOp).asInstanceOf[com.sun.fortress.nodes.Op], javaify(getExprs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Expr]], javaify(getStaticArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]])
}
object SSuperSyntaxDef {
   def unapply(node:com.sun.fortress.nodes.SuperSyntaxDef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getModifier()).asInstanceOf[Option[String]], scalaify(node.getNonterminal()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getGrammarId()).asInstanceOf[com.sun.fortress.nodes.Id]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getModifier:Option[String], getNonterminal:com.sun.fortress.nodes.Id, getGrammarId:com.sun.fortress.nodes.Id) = 
      new com.sun.fortress.nodes.SuperSyntaxDef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getModifier).asInstanceOf[edu.rice.cs.plt.tuple.Option[String]], javaify(getNonterminal).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getGrammarId).asInstanceOf[com.sun.fortress.nodes.Id])
}
object SSyntaxDecl {
   def unapply(node:com.sun.fortress.nodes.SyntaxDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getModifier()).asInstanceOf[Option[String]]))
}
object SSyntaxDef {
   def unapply(node:com.sun.fortress.nodes.SyntaxDef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getModifier()).asInstanceOf[Option[String]], scalaify(node.getSyntaxSymbols()).asInstanceOf[List[com.sun.fortress.nodes.SyntaxSymbol]], scalaify(node.getTransformer()).asInstanceOf[com.sun.fortress.nodes.TransformerDecl]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getModifier:Option[String], getSyntaxSymbols:List[com.sun.fortress.nodes.SyntaxSymbol], getTransformer:com.sun.fortress.nodes.TransformerDecl) = 
      new com.sun.fortress.nodes.SyntaxDef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getModifier).asInstanceOf[edu.rice.cs.plt.tuple.Option[String]], javaify(getSyntaxSymbols).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.SyntaxSymbol]], javaify(getTransformer).asInstanceOf[com.sun.fortress.nodes.TransformerDecl])
}
object SSyntaxSymbol {
   def unapply(node:com.sun.fortress.nodes.SyntaxSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
}
object STabSymbol {
   def unapply(node:com.sun.fortress.nodes.TabSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo) = 
      new com.sun.fortress.nodes.TabSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo])
}
object STaggedDimType {
   def unapply(node:com.sun.fortress.nodes.TaggedDimType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getElemType()).asInstanceOf[com.sun.fortress.nodes.Type], scalaify(node.getDimExpr()).asInstanceOf[com.sun.fortress.nodes.DimExpr], scalaify(node.getUnitExpr()).asInstanceOf[Option[com.sun.fortress.nodes.Expr]]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getElemType:com.sun.fortress.nodes.Type, getDimExpr:com.sun.fortress.nodes.DimExpr, getUnitExpr:Option[com.sun.fortress.nodes.Expr]) = 
      new com.sun.fortress.nodes.TaggedDimType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getElemType).asInstanceOf[com.sun.fortress.nodes.Type], javaify(getDimExpr).asInstanceOf[com.sun.fortress.nodes.DimExpr], javaify(getUnitExpr).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Expr]])
}
object STaggedUnitType {
   def unapply(node:com.sun.fortress.nodes.TaggedUnitType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getElemType()).asInstanceOf[com.sun.fortress.nodes.Type], scalaify(node.getUnitExpr()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getElemType:com.sun.fortress.nodes.Type, getUnitExpr:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.TaggedUnitType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getElemType).asInstanceOf[com.sun.fortress.nodes.Type], javaify(getUnitExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object STestDecl {
   def unapply(node:com.sun.fortress.nodes.TestDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getGens()).asInstanceOf[List[com.sun.fortress.nodes.GeneratorClause]], scalaify(node.getExpr()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id, getGens:List[com.sun.fortress.nodes.GeneratorClause], getExpr:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.TestDecl(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getGens).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.GeneratorClause]], javaify(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object SThrow {
   def unapply(node:com.sun.fortress.nodes.Throw) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getExpr()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getExpr:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.Throw(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object STokenSymbol {
   def unapply(node:com.sun.fortress.nodes.TokenSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getToken()).asInstanceOf[String]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getToken:String) = 
      new com.sun.fortress.nodes.TokenSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getToken).asInstanceOf[String])
}
object STraitCoercionInvocation {
   def unapply(node:com.sun.fortress.nodes.TraitCoercionInvocation) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getArg()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getToType()).asInstanceOf[com.sun.fortress.nodes.TraitType], scalaify(node.getCoercionFn()).asInstanceOf[com.sun.fortress.nodes.FnRef]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getArg:com.sun.fortress.nodes.Expr, getToType:com.sun.fortress.nodes.TraitType, getCoercionFn:com.sun.fortress.nodes.FnRef) = 
      new com.sun.fortress.nodes.TraitCoercionInvocation(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getArg).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getToType).asInstanceOf[com.sun.fortress.nodes.TraitType], javaify(getCoercionFn).asInstanceOf[com.sun.fortress.nodes.FnRef])
}
object STraitDecl {
   def unapply(node:com.sun.fortress.nodes.TraitDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getHeader()).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader], scalaify(node.getSelfType()).asInstanceOf[Option[com.sun.fortress.nodes.SelfType]], scalaify(node.getExcludesClause()).asInstanceOf[List[com.sun.fortress.nodes.BaseType]], scalaify(node.getComprisesClause()).asInstanceOf[Option[List[com.sun.fortress.nodes.NamedType]]], scalaify(node.isComprisesEllipses()).asInstanceOf[Boolean]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getHeader:com.sun.fortress.nodes.TraitTypeHeader, getSelfType:Option[com.sun.fortress.nodes.SelfType], getExcludesClause:List[com.sun.fortress.nodes.BaseType], getComprisesClause:Option[List[com.sun.fortress.nodes.NamedType]], isComprisesEllipses:Boolean) = 
      new com.sun.fortress.nodes.TraitDecl(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getHeader).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader], javaify(getSelfType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.SelfType]], javaify(getExcludesClause).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.BaseType]], javaify(getComprisesClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[_root_.java.util.List[com.sun.fortress.nodes.NamedType]]], javaify(isComprisesEllipses).asInstanceOf[Boolean])
}
object STraitObjectDecl {
   def unapply(node:com.sun.fortress.nodes.TraitObjectDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getHeader()).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader], scalaify(node.getSelfType()).asInstanceOf[Option[com.sun.fortress.nodes.SelfType]]))
}
object STraitSelfType {
   def unapply(node:com.sun.fortress.nodes.TraitSelfType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getNamed()).asInstanceOf[com.sun.fortress.nodes.BaseType], scalaify(node.getComprised()).asInstanceOf[List[com.sun.fortress.nodes.NamedType]]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getNamed:com.sun.fortress.nodes.BaseType, getComprised:List[com.sun.fortress.nodes.NamedType]) = 
      new com.sun.fortress.nodes.TraitSelfType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getNamed).asInstanceOf[com.sun.fortress.nodes.BaseType], javaify(getComprised).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.NamedType]])
}
object STraitType {
   def unapply(node:com.sun.fortress.nodes.TraitType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], scalaify(node.getTraitStaticParams()).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getName:com.sun.fortress.nodes.Id, getArgs:List[com.sun.fortress.nodes.StaticArg], getTraitStaticParams:List[com.sun.fortress.nodes.StaticParam]) = 
      new com.sun.fortress.nodes.TraitType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]], javaify(getTraitStaticParams).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticParam]])
}
object STraitTypeHeader {
   def unapply(node:com.sun.fortress.nodes.TraitTypeHeader) = 
      Some((scalaify(node.getStaticParams()).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]], scalaify(node.getMods()).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.IdOrOpOrAnonymousName], scalaify(node.getWhereClause()).asInstanceOf[Option[com.sun.fortress.nodes.WhereClause]], scalaify(node.getThrowsClause()).asInstanceOf[Option[List[com.sun.fortress.nodes.Type]]], scalaify(node.getContract()).asInstanceOf[Option[com.sun.fortress.nodes.Contract]], scalaify(node.getExtendsClause()).asInstanceOf[List[com.sun.fortress.nodes.TraitTypeWhere]], scalaify(node.getParams()).asInstanceOf[Option[List[com.sun.fortress.nodes.Param]]], scalaify(node.getDecls()).asInstanceOf[List[com.sun.fortress.nodes.Decl]]))
   def apply(getStaticParams:List[com.sun.fortress.nodes.StaticParam], getMods:com.sun.fortress.nodes_util.Modifiers, getName:com.sun.fortress.nodes.IdOrOpOrAnonymousName, getWhereClause:Option[com.sun.fortress.nodes.WhereClause], getThrowsClause:Option[List[com.sun.fortress.nodes.Type]], getContract:Option[com.sun.fortress.nodes.Contract], getExtendsClause:List[com.sun.fortress.nodes.TraitTypeWhere], getParams:Option[List[com.sun.fortress.nodes.Param]], getDecls:List[com.sun.fortress.nodes.Decl]) = 
      new com.sun.fortress.nodes.TraitTypeHeader(javaify(getStaticParams).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticParam]], javaify(getMods).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], javaify(getName).asInstanceOf[com.sun.fortress.nodes.IdOrOpOrAnonymousName], javaify(getWhereClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.WhereClause]], javaify(getThrowsClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[_root_.java.util.List[com.sun.fortress.nodes.Type]]], javaify(getContract).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Contract]], javaify(getExtendsClause).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.TraitTypeWhere]], javaify(getParams).asInstanceOf[edu.rice.cs.plt.tuple.Option[_root_.java.util.List[com.sun.fortress.nodes.Param]]], javaify(getDecls).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Decl]])
}
object STraitTypeWhere {
   def unapply(node:com.sun.fortress.nodes.TraitTypeWhere) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getBaseType()).asInstanceOf[com.sun.fortress.nodes.BaseType], scalaify(node.getWhereClause()).asInstanceOf[Option[com.sun.fortress.nodes.WhereClause]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getBaseType:com.sun.fortress.nodes.BaseType, getWhereClause:Option[com.sun.fortress.nodes.WhereClause]) = 
      new com.sun.fortress.nodes.TraitTypeWhere(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getBaseType).asInstanceOf[com.sun.fortress.nodes.BaseType], javaify(getWhereClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.WhereClause]])
}
object STransformer {
   def unapply(node:com.sun.fortress.nodes.Transformer) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
}
object STransformerDecl {
   def unapply(node:com.sun.fortress.nodes.TransformerDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
}
object STry {
   def unapply(node:com.sun.fortress.nodes.Try) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Block], scalaify(node.getCatchClause()).asInstanceOf[Option[com.sun.fortress.nodes.Catch]], scalaify(node.getForbidClause()).asInstanceOf[List[com.sun.fortress.nodes.BaseType]], scalaify(node.getFinallyClause()).asInstanceOf[Option[com.sun.fortress.nodes.Block]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getBody:com.sun.fortress.nodes.Block, getCatchClause:Option[com.sun.fortress.nodes.Catch], getForbidClause:List[com.sun.fortress.nodes.BaseType], getFinallyClause:Option[com.sun.fortress.nodes.Block]) = 
      new com.sun.fortress.nodes.Try(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Block], javaify(getCatchClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Catch]], javaify(getForbidClause).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.BaseType]], javaify(getFinallyClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Block]])
}
object STryAtomicExpr {
   def unapply(node:com.sun.fortress.nodes.TryAtomicExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getExpr()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getExpr:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes.TryAtomicExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object STupleCoercionInvocation {
   def unapply(node:com.sun.fortress.nodes.TupleCoercionInvocation) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getArg()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getToType()).asInstanceOf[com.sun.fortress.nodes.TupleType], scalaify(node.getSubCoercions()).asInstanceOf[List[Option[com.sun.fortress.nodes.CoercionInvocation]]], scalaify(node.getVarargCoercion()).asInstanceOf[Option[Option[com.sun.fortress.nodes.CoercionInvocation]]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getArg:com.sun.fortress.nodes.Expr, getToType:com.sun.fortress.nodes.TupleType, getSubCoercions:List[Option[com.sun.fortress.nodes.CoercionInvocation]], getVarargCoercion:Option[Option[com.sun.fortress.nodes.CoercionInvocation]]) = 
      new com.sun.fortress.nodes.TupleCoercionInvocation(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getArg).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getToType).asInstanceOf[com.sun.fortress.nodes.TupleType], javaify(getSubCoercions).asInstanceOf[_root_.java.util.List[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.CoercionInvocation]]], javaify(getVarargCoercion).asInstanceOf[edu.rice.cs.plt.tuple.Option[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.CoercionInvocation]]])
}
object STupleExpr {
   def unapply(node:com.sun.fortress.nodes.TupleExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getExprs()).asInstanceOf[List[com.sun.fortress.nodes.Expr]], scalaify(node.getVarargs()).asInstanceOf[Option[com.sun.fortress.nodes.Expr]], scalaify(node.getKeywords()).asInstanceOf[List[com.sun.fortress.nodes.KeywordExpr]], scalaify(node.isInApp()).asInstanceOf[Boolean]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getExprs:List[com.sun.fortress.nodes.Expr], getVarargs:Option[com.sun.fortress.nodes.Expr], getKeywords:List[com.sun.fortress.nodes.KeywordExpr], isInApp:Boolean) = 
      new com.sun.fortress.nodes.TupleExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getExprs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Expr]], javaify(getVarargs).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Expr]], javaify(getKeywords).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.KeywordExpr]], javaify(isInApp).asInstanceOf[Boolean])
}
object STupleType {
   def unapply(node:com.sun.fortress.nodes.TupleType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getElements()).asInstanceOf[List[com.sun.fortress.nodes.Type]], scalaify(node.getVarargs()).asInstanceOf[Option[com.sun.fortress.nodes.Type]], scalaify(node.getKeywords()).asInstanceOf[List[com.sun.fortress.nodes.KeywordType]]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getElements:List[com.sun.fortress.nodes.Type], getVarargs:Option[com.sun.fortress.nodes.Type], getKeywords:List[com.sun.fortress.nodes.KeywordType]) = 
      new com.sun.fortress.nodes.TupleType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getElements).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Type]], javaify(getVarargs).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]], javaify(getKeywords).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.KeywordType]])
}
object SType {
   def unapply(node:com.sun.fortress.nodes.Type) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo]))
}
object STypeAlias {
   def unapply(node:com.sun.fortress.nodes.TypeAlias) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getStaticParams()).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]], scalaify(node.getTypeDef()).asInstanceOf[com.sun.fortress.nodes.Type]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id, getStaticParams:List[com.sun.fortress.nodes.StaticParam], getTypeDef:com.sun.fortress.nodes.Type) = 
      new com.sun.fortress.nodes.TypeAlias(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getStaticParams).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticParam]], javaify(getTypeDef).asInstanceOf[com.sun.fortress.nodes.Type])
}
object STypeAnnotatedExpr {
   def unapply(node:com.sun.fortress.nodes.TypeAnnotatedExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getExpr()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getAnnType()).asInstanceOf[com.sun.fortress.nodes.Type]))
}
object STypeArg {
   def unapply(node:com.sun.fortress.nodes.TypeArg) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isLifted()).asInstanceOf[Boolean], scalaify(node.getTypeArg()).asInstanceOf[com.sun.fortress.nodes.Type]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isLifted:Boolean, getTypeArg:com.sun.fortress.nodes.Type) = 
      new com.sun.fortress.nodes.TypeArg(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isLifted).asInstanceOf[Boolean], javaify(getTypeArg).asInstanceOf[com.sun.fortress.nodes.Type])
}
object STypeInfo {
   def unapply(node:com.sun.fortress.nodes.TypeInfo) = 
      Some((scalaify(node.getSpan()).asInstanceOf[com.sun.fortress.nodes_util.Span], scalaify(node.isParenthesized()).asInstanceOf[Boolean], scalaify(node.getStaticParams()).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]], scalaify(node.getWhereClause()).asInstanceOf[Option[com.sun.fortress.nodes.WhereClause]]))
   def apply(getSpan:com.sun.fortress.nodes_util.Span, isParenthesized:Boolean, getStaticParams:List[com.sun.fortress.nodes.StaticParam], getWhereClause:Option[com.sun.fortress.nodes.WhereClause]) = 
      new com.sun.fortress.nodes.TypeInfo(javaify(getSpan).asInstanceOf[com.sun.fortress.nodes_util.Span], javaify(isParenthesized).asInstanceOf[Boolean], javaify(getStaticParams).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticParam]], javaify(getWhereClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.WhereClause]])
}
object STypePattern {
   def unapply(node:com.sun.fortress.nodes.TypePattern) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getField()).asInstanceOf[Option[com.sun.fortress.nodes.Id]], scalaify(node.getTyp()).asInstanceOf[com.sun.fortress.nodes.Type]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getField:Option[com.sun.fortress.nodes.Id], getTyp:com.sun.fortress.nodes.Type) = 
      new com.sun.fortress.nodes.TypePattern(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getField).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Id]], javaify(getTyp).asInstanceOf[com.sun.fortress.nodes.Type])
}
object STypecase {
   def unapply(node:com.sun.fortress.nodes.Typecase) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getBindExpr()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getClauses()).asInstanceOf[List[com.sun.fortress.nodes.TypecaseClause]], scalaify(node.getElseClause()).asInstanceOf[Option[com.sun.fortress.nodes.Block]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getBindExpr:com.sun.fortress.nodes.Expr, getClauses:List[com.sun.fortress.nodes.TypecaseClause], getElseClause:Option[com.sun.fortress.nodes.Block]) = 
      new com.sun.fortress.nodes.Typecase(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getBindExpr).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getClauses).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.TypecaseClause]], javaify(getElseClause).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Block]])
}
object STypecaseClause {
   def unapply(node:com.sun.fortress.nodes.TypecaseClause) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[Option[com.sun.fortress.nodes.Id]], scalaify(node.getMatchType()).asInstanceOf[com.sun.fortress.nodes.TypeOrPattern], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Block]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:Option[com.sun.fortress.nodes.Id], getMatchType:com.sun.fortress.nodes.TypeOrPattern, getBody:com.sun.fortress.nodes.Block) = 
      new com.sun.fortress.nodes.TypecaseClause(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Id]], javaify(getMatchType).asInstanceOf[com.sun.fortress.nodes.TypeOrPattern], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Block])
}
object SUnionCoercionInvocation {
   def unapply(node:com.sun.fortress.nodes.UnionCoercionInvocation) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getToType()).asInstanceOf[com.sun.fortress.nodes.Type], scalaify(node.getArg()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getFromTypes()).asInstanceOf[List[com.sun.fortress.nodes.Type]], scalaify(node.getFromCoercions()).asInstanceOf[List[Option[com.sun.fortress.nodes.CoercionInvocation]]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getToType:com.sun.fortress.nodes.Type, getArg:com.sun.fortress.nodes.Expr, getFromTypes:List[com.sun.fortress.nodes.Type], getFromCoercions:List[Option[com.sun.fortress.nodes.CoercionInvocation]]) = 
      new com.sun.fortress.nodes.UnionCoercionInvocation(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getToType).asInstanceOf[com.sun.fortress.nodes.Type], javaify(getArg).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getFromTypes).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Type]], javaify(getFromCoercions).asInstanceOf[_root_.java.util.List[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.CoercionInvocation]]])
}
object SUnionType {
   def unapply(node:com.sun.fortress.nodes.UnionType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getElements()).asInstanceOf[List[com.sun.fortress.nodes.Type]]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getElements:List[com.sun.fortress.nodes.Type]) = 
      new com.sun.fortress.nodes.UnionType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getElements).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Type]])
}
object SUnitArg {
   def unapply(node:com.sun.fortress.nodes.UnitArg) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isLifted()).asInstanceOf[Boolean], scalaify(node.getUnitArg()).asInstanceOf[com.sun.fortress.nodes.UnitExpr]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isLifted:Boolean, getUnitArg:com.sun.fortress.nodes.UnitExpr) = 
      new com.sun.fortress.nodes.UnitArg(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isLifted).asInstanceOf[Boolean], javaify(getUnitArg).asInstanceOf[com.sun.fortress.nodes.UnitExpr])
}
object SUnitBinaryOp {
   def unapply(node:com.sun.fortress.nodes.UnitBinaryOp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean], scalaify(node.getLeft()).asInstanceOf[com.sun.fortress.nodes.UnitExpr], scalaify(node.getRight()).asInstanceOf[com.sun.fortress.nodes.UnitExpr], scalaify(node.getOp()).asInstanceOf[com.sun.fortress.nodes.Op]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isParenthesized:Boolean, getLeft:com.sun.fortress.nodes.UnitExpr, getRight:com.sun.fortress.nodes.UnitExpr, getOp:com.sun.fortress.nodes.Op) = 
      new com.sun.fortress.nodes.UnitBinaryOp(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isParenthesized).asInstanceOf[Boolean], javaify(getLeft).asInstanceOf[com.sun.fortress.nodes.UnitExpr], javaify(getRight).asInstanceOf[com.sun.fortress.nodes.UnitExpr], javaify(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
}
object SUnitConstraint {
   def unapply(node:com.sun.fortress.nodes.UnitConstraint) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id) = 
      new com.sun.fortress.nodes.UnitConstraint(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id])
}
object SUnitDecl {
   def unapply(node:com.sun.fortress.nodes.UnitDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isSi_unit()).asInstanceOf[Boolean], scalaify(node.getUnits()).asInstanceOf[List[com.sun.fortress.nodes.Id]], scalaify(node.getDimType()).asInstanceOf[Option[com.sun.fortress.nodes.Type]], scalaify(node.getDefExpr()).asInstanceOf[Option[com.sun.fortress.nodes.Expr]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isSi_unit:Boolean, getUnits:List[com.sun.fortress.nodes.Id], getDimType:Option[com.sun.fortress.nodes.Type], getDefExpr:Option[com.sun.fortress.nodes.Expr]) = 
      new com.sun.fortress.nodes.UnitDecl(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isSi_unit).asInstanceOf[Boolean], javaify(getUnits).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.Id]], javaify(getDimType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]], javaify(getDefExpr).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Expr]])
}
object SUnitExpr {
   def unapply(node:com.sun.fortress.nodes.UnitExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean]))
}
object SUnitRef {
   def unapply(node:com.sun.fortress.nodes.UnitRef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.isParenthesized()).asInstanceOf[Boolean], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, isParenthesized:Boolean, getName:com.sun.fortress.nodes.Id) = 
      new com.sun.fortress.nodes.UnitRef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(isParenthesized).asInstanceOf[Boolean], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id])
}
object SUnknownFixity {
   def unapply(node:com.sun.fortress.nodes.UnknownFixity) = 
      Some(())
   def apply() = 
      new com.sun.fortress.nodes.UnknownFixity
}
object SUnknownType {
   def unapply(node:com.sun.fortress.nodes.UnknownType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo) = 
      new com.sun.fortress.nodes.UnknownType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo])
}
object SUnparsedTransformer {
   def unapply(node:com.sun.fortress.nodes.UnparsedTransformer) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getTransformer()).asInstanceOf[String], scalaify(node.getNonterminal()).asInstanceOf[com.sun.fortress.nodes.Id]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getTransformer:String, getNonterminal:com.sun.fortress.nodes.Id) = 
      new com.sun.fortress.nodes.UnparsedTransformer(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getTransformer).asInstanceOf[String], javaify(getNonterminal).asInstanceOf[com.sun.fortress.nodes.Id])
}
object SVarDecl {
   def unapply(node:com.sun.fortress.nodes.VarDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getLhs()).asInstanceOf[List[com.sun.fortress.nodes.LValue]], scalaify(node.getInit()).asInstanceOf[Option[com.sun.fortress.nodes.Expr]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getLhs:List[com.sun.fortress.nodes.LValue], getInit:Option[com.sun.fortress.nodes.Expr]) = 
      new com.sun.fortress.nodes.VarDecl(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getLhs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.LValue]], javaify(getInit).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Expr]])
}
object SVarRef {
   def unapply(node:com.sun.fortress.nodes.VarRef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getVarId()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], scalaify(node.getLexicalDepth()).asInstanceOf[Int]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getVarId:com.sun.fortress.nodes.Id, getStaticArgs:List[com.sun.fortress.nodes.StaticArg], getLexicalDepth:Int) = 
      new com.sun.fortress.nodes.VarRef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getVarId).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getStaticArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]], javaify(getLexicalDepth).asInstanceOf[Int])
}
object SVarType {
   def unapply(node:com.sun.fortress.nodes.VarType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getLexicalDepth()).asInstanceOf[Int]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getName:com.sun.fortress.nodes.Id, getLexicalDepth:Int) = 
      new com.sun.fortress.nodes.VarType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getLexicalDepth).asInstanceOf[Int])
}
object SVoidLiteralExpr {
   def unapply(node:com.sun.fortress.nodes.VoidLiteralExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getText()).asInstanceOf[String]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getText:String) = 
      new com.sun.fortress.nodes.VoidLiteralExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getText).asInstanceOf[String])
}
object SWhereBinding {
   def unapply(node:com.sun.fortress.nodes.WhereBinding) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getSupers()).asInstanceOf[List[com.sun.fortress.nodes.BaseType]], scalaify(node.getKind()).asInstanceOf[com.sun.fortress.nodes.StaticParamKind]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id, getSupers:List[com.sun.fortress.nodes.BaseType], getKind:com.sun.fortress.nodes.StaticParamKind) = 
      new com.sun.fortress.nodes.WhereBinding(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getSupers).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.BaseType]], javaify(getKind).asInstanceOf[com.sun.fortress.nodes.StaticParamKind])
}
object SWhereClause {
   def unapply(node:com.sun.fortress.nodes.WhereClause) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getBindings()).asInstanceOf[List[com.sun.fortress.nodes.WhereBinding]], scalaify(node.getConstraints()).asInstanceOf[List[com.sun.fortress.nodes.WhereConstraint]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getBindings:List[com.sun.fortress.nodes.WhereBinding], getConstraints:List[com.sun.fortress.nodes.WhereConstraint]) = 
      new com.sun.fortress.nodes.WhereClause(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getBindings).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.WhereBinding]], javaify(getConstraints).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.WhereConstraint]])
}
object SWhereCoerces {
   def unapply(node:com.sun.fortress.nodes.WhereCoerces) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getLeft()).asInstanceOf[com.sun.fortress.nodes.Type], scalaify(node.getRight()).asInstanceOf[com.sun.fortress.nodes.Type], scalaify(node.isCoerces()).asInstanceOf[Boolean], scalaify(node.isWidens()).asInstanceOf[Boolean]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getLeft:com.sun.fortress.nodes.Type, getRight:com.sun.fortress.nodes.Type, isCoerces:Boolean, isWidens:Boolean) = 
      new com.sun.fortress.nodes.WhereCoerces(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getLeft).asInstanceOf[com.sun.fortress.nodes.Type], javaify(getRight).asInstanceOf[com.sun.fortress.nodes.Type], javaify(isCoerces).asInstanceOf[Boolean], javaify(isWidens).asInstanceOf[Boolean])
}
object SWhereConstraint {
   def unapply(node:com.sun.fortress.nodes.WhereConstraint) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo]))
}
object SWhereEquals {
   def unapply(node:com.sun.fortress.nodes.WhereEquals) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getLeft()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getRight()).asInstanceOf[com.sun.fortress.nodes.Id]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getLeft:com.sun.fortress.nodes.Id, getRight:com.sun.fortress.nodes.Id) = 
      new com.sun.fortress.nodes.WhereEquals(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getLeft).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getRight).asInstanceOf[com.sun.fortress.nodes.Id])
}
object SWhereExtends {
   def unapply(node:com.sun.fortress.nodes.WhereExtends) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getSupers()).asInstanceOf[List[com.sun.fortress.nodes.BaseType]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.Id, getSupers:List[com.sun.fortress.nodes.BaseType]) = 
      new com.sun.fortress.nodes.WhereExtends(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getSupers).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.BaseType]])
}
object SWhereTypeAlias {
   def unapply(node:com.sun.fortress.nodes.WhereTypeAlias) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getAlias()).asInstanceOf[com.sun.fortress.nodes.TypeAlias]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getAlias:com.sun.fortress.nodes.TypeAlias) = 
      new com.sun.fortress.nodes.WhereTypeAlias(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getAlias).asInstanceOf[com.sun.fortress.nodes.TypeAlias])
}
object SWhile {
   def unapply(node:com.sun.fortress.nodes.While) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getTestExpr()).asInstanceOf[com.sun.fortress.nodes.GeneratorClause], scalaify(node.getBody()).asInstanceOf[com.sun.fortress.nodes.Do]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getTestExpr:com.sun.fortress.nodes.GeneratorClause, getBody:com.sun.fortress.nodes.Do) = 
      new com.sun.fortress.nodes.While(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getTestExpr).asInstanceOf[com.sun.fortress.nodes.GeneratorClause], javaify(getBody).asInstanceOf[com.sun.fortress.nodes.Do])
}
object SWhitespaceSymbol {
   def unapply(node:com.sun.fortress.nodes.WhitespaceSymbol) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getS()).asInstanceOf[String]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getS:String) = 
      new com.sun.fortress.nodes.WhitespaceSymbol(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getS).asInstanceOf[String])
}
object S_InferenceVarOp {
   def unapply(node:com.sun.fortress.nodes._InferenceVarOp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getApiName()).asInstanceOf[Option[com.sun.fortress.nodes.APIName]], scalaify(node.getText()).asInstanceOf[String], scalaify(node.getFixity()).asInstanceOf[com.sun.fortress.nodes.Fixity], scalaify(node.isEnclosing()).asInstanceOf[Boolean], scalaify(node.getId()).asInstanceOf[_root_.java.lang.Object]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getApiName:Option[com.sun.fortress.nodes.APIName], getText:String, getFixity:com.sun.fortress.nodes.Fixity, isEnclosing:Boolean, getId:_root_.java.lang.Object) = 
      new com.sun.fortress.nodes._InferenceVarOp(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getApiName).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.APIName]], javaify(getText).asInstanceOf[String], javaify(getFixity).asInstanceOf[com.sun.fortress.nodes.Fixity], javaify(isEnclosing).asInstanceOf[Boolean], javaify(getId).asInstanceOf[_root_.java.lang.Object])
}
object S_InferenceVarType {
   def unapply(node:com.sun.fortress.nodes._InferenceVarType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.Id], scalaify(node.getId()).asInstanceOf[_root_.java.lang.Object]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo, getName:com.sun.fortress.nodes.Id, getId:_root_.java.lang.Object) = 
      new com.sun.fortress.nodes._InferenceVarType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.Id], javaify(getId).asInstanceOf[_root_.java.lang.Object])
}
object S_RewriteFnApp {
   def unapply(node:com.sun.fortress.nodes._RewriteFnApp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getFunction()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getArgument()).asInstanceOf[com.sun.fortress.nodes.Expr]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getFunction:com.sun.fortress.nodes.Expr, getArgument:com.sun.fortress.nodes.Expr) = 
      new com.sun.fortress.nodes._RewriteFnApp(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getFunction).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getArgument).asInstanceOf[com.sun.fortress.nodes.Expr])
}
object S_RewriteFnOverloadDecl {
   def unapply(node:com.sun.fortress.nodes._RewriteFnOverloadDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getName()).asInstanceOf[com.sun.fortress.nodes.IdOrOp], scalaify(node.getFns()).asInstanceOf[List[com.sun.fortress.nodes.IdOrOp]], scalaify(node.getType()).asInstanceOf[Option[com.sun.fortress.nodes.Type]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getName:com.sun.fortress.nodes.IdOrOp, getFns:List[com.sun.fortress.nodes.IdOrOp], getType:Option[com.sun.fortress.nodes.Type]) = 
      new com.sun.fortress.nodes._RewriteFnOverloadDecl(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], javaify(getFns).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.IdOrOp]], javaify(getType).asInstanceOf[edu.rice.cs.plt.tuple.Option[com.sun.fortress.nodes.Type]])
}
object S_RewriteFnRef {
   def unapply(node:com.sun.fortress.nodes._RewriteFnRef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getFnExpr()).asInstanceOf[com.sun.fortress.nodes.Expr], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getFnExpr:com.sun.fortress.nodes.Expr, getStaticArgs:List[com.sun.fortress.nodes.StaticArg]) = 
      new com.sun.fortress.nodes._RewriteFnRef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getFnExpr).asInstanceOf[com.sun.fortress.nodes.Expr], javaify(getStaticArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]])
}
object S_RewriteFunctionalMethodDecl {
   def unapply(node:com.sun.fortress.nodes._RewriteFunctionalMethodDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getFunctionalMethodNames()).asInstanceOf[List[String]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getFunctionalMethodNames:List[String]) = 
      new com.sun.fortress.nodes._RewriteFunctionalMethodDecl(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getFunctionalMethodNames).asInstanceOf[_root_.java.util.List[String]])
}
object S_RewriteObjectExpr {
   def unapply(node:com.sun.fortress.nodes._RewriteObjectExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getHeader()).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader], scalaify(node.getImplicitTypeParameters()).asInstanceOf[Map[String, com.sun.fortress.nodes.StaticParam]], scalaify(node.getGenSymName()).asInstanceOf[String], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getHeader:com.sun.fortress.nodes.TraitTypeHeader, getImplicitTypeParameters:Map[String, com.sun.fortress.nodes.StaticParam], getGenSymName:String, getStaticArgs:List[com.sun.fortress.nodes.StaticArg]) = 
      new com.sun.fortress.nodes._RewriteObjectExpr(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getHeader).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader], javaify(getImplicitTypeParameters).asInstanceOf[_root_.java.util.Map[String, com.sun.fortress.nodes.StaticParam]], javaify(getGenSymName).asInstanceOf[String], javaify(getStaticArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]])
}
object S_RewriteObjectExprDecl {
   def unapply(node:com.sun.fortress.nodes._RewriteObjectExprDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], scalaify(node.getObjectExprs()).asInstanceOf[List[com.sun.fortress.nodes._RewriteObjectExpr]]))
   def apply(getInfo:com.sun.fortress.nodes.ASTNodeInfo, getObjectExprs:List[com.sun.fortress.nodes._RewriteObjectExpr]) = 
      new com.sun.fortress.nodes._RewriteObjectExprDecl(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], javaify(getObjectExprs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes._RewriteObjectExpr]])
}
object S_RewriteObjectExprRef {
   def unapply(node:com.sun.fortress.nodes._RewriteObjectExprRef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.ExprInfo], scalaify(node.getGenSymName()).asInstanceOf[String], scalaify(node.getStaticArgs()).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]]))
   def apply(getInfo:com.sun.fortress.nodes.ExprInfo, getGenSymName:String, getStaticArgs:List[com.sun.fortress.nodes.StaticArg]) = 
      new com.sun.fortress.nodes._RewriteObjectExprRef(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], javaify(getGenSymName).asInstanceOf[String], javaify(getStaticArgs).asInstanceOf[_root_.java.util.List[com.sun.fortress.nodes.StaticArg]])
}

trait Walker {
   def apply(node:Any):Any = walk(node)
   def walk(node:Any):Any = {
       node match {
         case SKindOp =>
             SKindOp
         case SKindUnit =>
             SKindUnit
         case SKindDim =>
             SKindDim
         case SKindBool =>
             SKindBool
         case SKindNat =>
             SKindNat
         case SKindInt =>
             SKindInt
         case SKindType =>
             SKindType
         case SUnknownFixity =>
             SUnknownFixity
         case SBigFixity =>
             SBigFixity
         case SEnclosingFixity =>
             SEnclosingFixity
         case SMultiFixity =>
             SMultiFixity
         case SNoFixity =>
             SNoFixity
         case SPostFixity =>
             SPostFixity
         case SPreFixity =>
             SPreFixity
         case SInFixity =>
             SInFixity
         case SLevel(getLevel, get_object) =>
             SLevel(walk(getLevel).asInstanceOf[Int], walk(get_object).asInstanceOf[_root_.java.lang.Object])
         case SCompoundAssignmentInfo(getOpForLhs, getCompoundCoercionOuter, getCompoundCoercionInner) =>
             SCompoundAssignmentInfo(walk(getOpForLhs).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], walk(getCompoundCoercionOuter).asInstanceOf[Option[com.sun.fortress.nodes.CoercionInvocation]], walk(getCompoundCoercionInner).asInstanceOf[Option[com.sun.fortress.nodes.CoercionInvocation]])
         case SMethodInfo(getSelfType, getSelfPosition) =>
             SMethodInfo(walk(getSelfType).asInstanceOf[com.sun.fortress.nodes.Type], walk(getSelfPosition).asInstanceOf[Int])
         case STypeInfo(getSpan, isParenthesized, getStaticParams, getWhereClause) =>
             STypeInfo(walk(getSpan).asInstanceOf[com.sun.fortress.nodes_util.Span], walk(isParenthesized).asInstanceOf[Boolean], walk(getStaticParams).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]], walk(getWhereClause).asInstanceOf[Option[com.sun.fortress.nodes.WhereClause]])
         case SExprInfo(getSpan, isParenthesized, getExprType) =>
             SExprInfo(walk(getSpan).asInstanceOf[com.sun.fortress.nodes_util.Span], walk(isParenthesized).asInstanceOf[Boolean], walk(getExprType).asInstanceOf[Option[com.sun.fortress.nodes.Type]])
         case SSpanInfo(getSpan) =>
             SSpanInfo(walk(getSpan).asInstanceOf[com.sun.fortress.nodes_util.Span])
         case SFnHeader(getStaticParams, getMods, getName, getWhereClause, getThrowsClause, getContract, getParams, getReturnType) =>
             SFnHeader(walk(getStaticParams).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]], walk(getMods).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], walk(getName).asInstanceOf[com.sun.fortress.nodes.IdOrOpOrAnonymousName], walk(getWhereClause).asInstanceOf[Option[com.sun.fortress.nodes.WhereClause]], walk(getThrowsClause).asInstanceOf[Option[List[com.sun.fortress.nodes.Type]]], walk(getContract).asInstanceOf[Option[com.sun.fortress.nodes.Contract]], walk(getParams).asInstanceOf[List[com.sun.fortress.nodes.Param]], walk(getReturnType).asInstanceOf[Option[com.sun.fortress.nodes.Type]])
         case STraitTypeHeader(getStaticParams, getMods, getName, getWhereClause, getThrowsClause, getContract, getExtendsClause, getParams, getDecls) =>
             STraitTypeHeader(walk(getStaticParams).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]], walk(getMods).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], walk(getName).asInstanceOf[com.sun.fortress.nodes.IdOrOpOrAnonymousName], walk(getWhereClause).asInstanceOf[Option[com.sun.fortress.nodes.WhereClause]], walk(getThrowsClause).asInstanceOf[Option[List[com.sun.fortress.nodes.Type]]], walk(getContract).asInstanceOf[Option[com.sun.fortress.nodes.Contract]], walk(getExtendsClause).asInstanceOf[List[com.sun.fortress.nodes.TraitTypeWhere]], walk(getParams).asInstanceOf[Option[List[com.sun.fortress.nodes.Param]]], walk(getDecls).asInstanceOf[List[com.sun.fortress.nodes.Decl]])
         case SLink(getInfo, getOp, getExpr) =>
             SLink(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getOp).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], walk(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
         case SCharacterInterval(getInfo, getBeginSymbol, getEndSymbol) =>
             SCharacterInterval(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getBeginSymbol).asInstanceOf[String], walk(getEndSymbol).asInstanceOf[String])
         case SCharSymbol(getInfo, getString) =>
             SCharSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getString).asInstanceOf[String])
         case SCharacterClassSymbol(getInfo, getCharacters) =>
             SCharacterClassSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getCharacters).asInstanceOf[List[com.sun.fortress.nodes.CharacterSymbol]])
         case SAndPredicateSymbol(getInfo, getSymbol) =>
             SAndPredicateSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
         case SNotPredicateSymbol(getInfo, getSymbol) =>
             SNotPredicateSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
         case STokenSymbol(getInfo, getToken) =>
             STokenSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getToken).asInstanceOf[String])
         case SKeywordSymbol(getInfo, getToken) =>
             SKeywordSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getToken).asInstanceOf[String])
         case SNonterminalSymbol(getInfo, getNonterminal) =>
             SNonterminalSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getNonterminal).asInstanceOf[com.sun.fortress.nodes.Id])
         case SItemSymbol(getInfo, getItem) =>
             SItemSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getItem).asInstanceOf[String])
         case SBreaklineSymbol(getInfo, getS) =>
             SBreaklineSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getS).asInstanceOf[String])
         case SNewlineSymbol(getInfo) =>
             SNewlineSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo])
         case SBackspaceSymbol(getInfo) =>
             SBackspaceSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo])
         case SCarriageReturnSymbol(getInfo) =>
             SCarriageReturnSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo])
         case SFormfeedSymbol(getInfo) =>
             SFormfeedSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo])
         case STabSymbol(getInfo) =>
             STabSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo])
         case SWhitespaceSymbol(getInfo, getS) =>
             SWhitespaceSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getS).asInstanceOf[String])
         case SAnyCharacterSymbol(getInfo) =>
             SAnyCharacterSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo])
         case SGroupSymbol(getInfo, getSymbols) =>
             SGroupSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getSymbols).asInstanceOf[List[com.sun.fortress.nodes.SyntaxSymbol]])
         case SNoWhitespaceSymbol(getInfo, getSymbol) =>
             SNoWhitespaceSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
         case SRepeatOneOrMoreSymbol(getInfo, getSymbol) =>
             SRepeatOneOrMoreSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
         case SRepeatSymbol(getInfo, getSymbol) =>
             SRepeatSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
         case SOptionalSymbol(getInfo, getSymbol) =>
             SOptionalSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
         case SPrefixedSymbol(getInfo, getId, getSymbol) =>
             SPrefixedSymbol(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getId).asInstanceOf[com.sun.fortress.nodes.Id], walk(getSymbol).asInstanceOf[com.sun.fortress.nodes.SyntaxSymbol])
         case SCaseTransformerClause(getInfo, getConstructor, getParameters, getBody) =>
             SCaseTransformerClause(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getConstructor).asInstanceOf[com.sun.fortress.nodes.Id], walk(getParameters).asInstanceOf[List[com.sun.fortress.nodes.Id]], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Transformer])
         case SCaseTransformer(getInfo, getGapName, getClauses) =>
             SCaseTransformer(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getGapName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getClauses).asInstanceOf[List[com.sun.fortress.nodes.CaseTransformerClause]])
         case SNodeTransformer(getInfo, getNode) =>
             SNodeTransformer(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getNode).asInstanceOf[com.sun.fortress.nodes.AbstractNode])
         case SUnparsedTransformer(getInfo, getTransformer, getNonterminal) =>
             SUnparsedTransformer(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getTransformer).asInstanceOf[String], walk(getNonterminal).asInstanceOf[com.sun.fortress.nodes.Id])
         case SNamedTransformerDef(getInfo, getName, getParameters, getTransformer) =>
             SNamedTransformerDef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[String], walk(getParameters).asInstanceOf[List[com.sun.fortress.nodes.NonterminalParameter]], walk(getTransformer).asInstanceOf[com.sun.fortress.nodes.Transformer])
         case SPreTransformerDef(getInfo, getTransformer) =>
             SPreTransformerDef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getTransformer).asInstanceOf[com.sun.fortress.nodes.Transformer])
         case SSuperSyntaxDef(getInfo, getModifier, getNonterminal, getGrammarId) =>
             SSuperSyntaxDef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getModifier).asInstanceOf[Option[String]], walk(getNonterminal).asInstanceOf[com.sun.fortress.nodes.Id], walk(getGrammarId).asInstanceOf[com.sun.fortress.nodes.Id])
         case SSyntaxDef(getInfo, getModifier, getSyntaxSymbols, getTransformer) =>
             SSyntaxDef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getModifier).asInstanceOf[Option[String]], walk(getSyntaxSymbols).asInstanceOf[List[com.sun.fortress.nodes.SyntaxSymbol]], walk(getTransformer).asInstanceOf[com.sun.fortress.nodes.TransformerDecl])
         case SNonterminalParameter(getInfo, getName, getParamType) =>
             SNonterminalParameter(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getParamType).asInstanceOf[com.sun.fortress.nodes.BaseType])
         case SNonterminalHeader(getInfo, getMods, getName, getParams, getStaticParams, getParamType, getWhereClause) =>
             SNonterminalHeader(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getMods).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getParams).asInstanceOf[List[com.sun.fortress.nodes.NonterminalParameter]], walk(getStaticParams).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]], walk(getParamType).asInstanceOf[Option[com.sun.fortress.nodes.Type]], walk(getWhereClause).asInstanceOf[Option[com.sun.fortress.nodes.WhereClause]])
         case SOverloading(getInfo, getUnambiguousName, getOriginalName, getType, getSchema) =>
             SOverloading(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getUnambiguousName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], walk(getOriginalName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], walk(getType).asInstanceOf[Option[com.sun.fortress.nodes.ArrowType]], walk(getSchema).asInstanceOf[Option[com.sun.fortress.nodes.ArrowType]])
         case SSubscriptingMI(getInfo, getOp, getExprs, getStaticArgs) =>
             SSubscriptingMI(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getOp).asInstanceOf[com.sun.fortress.nodes.Op], walk(getExprs).asInstanceOf[List[com.sun.fortress.nodes.Expr]], walk(getStaticArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]])
         case SExponentiationMI(getInfo, getOp, getExpr) =>
             SExponentiationMI(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getOp).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], walk(getExpr).asInstanceOf[Option[com.sun.fortress.nodes.Expr]])
         case SNonParenthesisDelimitedMI(getInfo, getExpr) =>
             SNonParenthesisDelimitedMI(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
         case SParenthesisDelimitedMI(getInfo, getExpr) =>
             SParenthesisDelimitedMI(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
         case SIndices(getInfo, getExtents) =>
             SIndices(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getExtents).asInstanceOf[List[com.sun.fortress.nodes.ExtentRange]])
         case STraitTypeWhere(getInfo, getBaseType, getWhereClause) =>
             STraitTypeWhere(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getBaseType).asInstanceOf[com.sun.fortress.nodes.BaseType], walk(getWhereClause).asInstanceOf[Option[com.sun.fortress.nodes.WhereClause]])
         case SKeywordType(getInfo, getName, getKeywordType) =>
             SKeywordType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getKeywordType).asInstanceOf[com.sun.fortress.nodes.Type])
         case SGeneratorClause(getInfo, getBind, getInit) =>
             SGeneratorClause(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getBind).asInstanceOf[List[com.sun.fortress.nodes.Id]], walk(getInit).asInstanceOf[com.sun.fortress.nodes.Expr])
         case SExtentRange(getInfo, getBase, getSize, getOp) =>
             SExtentRange(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getBase).asInstanceOf[Option[com.sun.fortress.nodes.StaticArg]], walk(getSize).asInstanceOf[Option[com.sun.fortress.nodes.StaticArg]], walk(getOp).asInstanceOf[Option[com.sun.fortress.nodes.Op]])
         case STypecaseClause(getInfo, getName, getMatchType, getBody) =>
             STypecaseClause(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[Option[com.sun.fortress.nodes.Id]], walk(getMatchType).asInstanceOf[com.sun.fortress.nodes.TypeOrPattern], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Block])
         case SIfClause(getInfo, getTestClause, getBody) =>
             SIfClause(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getTestClause).asInstanceOf[com.sun.fortress.nodes.GeneratorClause], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Block])
         case SCatchClause(getInfo, getMatchType, getBody) =>
             SCatchClause(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getMatchType).asInstanceOf[com.sun.fortress.nodes.BaseType], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Block])
         case SCatch(getInfo, getName, getClauses) =>
             SCatch(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getClauses).asInstanceOf[List[com.sun.fortress.nodes.CatchClause]])
         case SCaseClause(getInfo, getMatchClause, getBody, getOp) =>
             SCaseClause(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getMatchClause).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Block], walk(getOp).asInstanceOf[Option[com.sun.fortress.nodes.FunctionalRef]])
         case SKeywordExpr(getInfo, getName, getInit) =>
             SKeywordExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getInit).asInstanceOf[com.sun.fortress.nodes.Expr])
         case SArrayComprehensionClause(getInfo, getBind, getInit, getGens) =>
             SArrayComprehensionClause(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getBind).asInstanceOf[List[com.sun.fortress.nodes.Expr]], walk(getInit).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getGens).asInstanceOf[List[com.sun.fortress.nodes.GeneratorClause]])
         case SConstructorFnName(getInfo, getApiName, getConstructor) =>
             SConstructorFnName(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getApiName).asInstanceOf[Option[com.sun.fortress.nodes.APIName]], walk(getConstructor).asInstanceOf[com.sun.fortress.nodes.ObjectConstructor])
         case SAnonymousFnName(getInfo, getApiName) =>
             SAnonymousFnName(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getApiName).asInstanceOf[Option[com.sun.fortress.nodes.APIName]])
         case S_InferenceVarOp(getInfo, getApiName, getText, getFixity, isEnclosing, getId) =>
             S_InferenceVarOp(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getApiName).asInstanceOf[Option[com.sun.fortress.nodes.APIName]], walk(getText).asInstanceOf[String], walk(getFixity).asInstanceOf[com.sun.fortress.nodes.Fixity], walk(isEnclosing).asInstanceOf[Boolean], walk(getId).asInstanceOf[_root_.java.lang.Object])
         case SNamedOp(getInfo, getApiName, getText, getFixity, isEnclosing) =>
             SNamedOp(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getApiName).asInstanceOf[Option[com.sun.fortress.nodes.APIName]], walk(getText).asInstanceOf[String], walk(getFixity).asInstanceOf[com.sun.fortress.nodes.Fixity], walk(isEnclosing).asInstanceOf[Boolean])
         case SId(getInfo, getApiName, getText) =>
             SId(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getApiName).asInstanceOf[Option[com.sun.fortress.nodes.APIName]], walk(getText).asInstanceOf[String])
         case SAPIName(getInfo, getIds, getText) =>
             SAPIName(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getIds).asInstanceOf[List[com.sun.fortress.nodes.Id]], walk(getText).asInstanceOf[String])
         case SStaticParam(getInfo, getVariance, getName, getExtendsClause, getDominatesClause, getDimParam, isAbsorbsParam, getKind, isLifted) =>
             SStaticParam(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getVariance).asInstanceOf[Int], walk(getName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], walk(getExtendsClause).asInstanceOf[List[com.sun.fortress.nodes.BaseType]], walk(getDominatesClause).asInstanceOf[List[com.sun.fortress.nodes.BaseType]], walk(getDimParam).asInstanceOf[Option[com.sun.fortress.nodes.Type]], walk(isAbsorbsParam).asInstanceOf[Boolean], walk(getKind).asInstanceOf[com.sun.fortress.nodes.StaticParamKind], walk(isLifted).asInstanceOf[Boolean])
         case SEnsuresClause(getInfo, getPost, getPre) =>
             SEnsuresClause(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getPost).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getPre).asInstanceOf[Option[com.sun.fortress.nodes.Expr]])
         case SContract(getInfo, getRequiresClause, getEnsuresClause, getInvariantsClause) =>
             SContract(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getRequiresClause).asInstanceOf[Option[List[com.sun.fortress.nodes.Expr]]], walk(getEnsuresClause).asInstanceOf[Option[List[com.sun.fortress.nodes.EnsuresClause]]], walk(getInvariantsClause).asInstanceOf[Option[List[com.sun.fortress.nodes.Expr]]])
         case SBoolConstraintExpr(getInfo, getConstraint) =>
             SBoolConstraintExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getConstraint).asInstanceOf[com.sun.fortress.nodes.BoolConstraint])
         case SIntConstraint(getInfo, getLeft, getRight, getOp) =>
             SIntConstraint(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getLeft).asInstanceOf[com.sun.fortress.nodes.IntExpr], walk(getRight).asInstanceOf[com.sun.fortress.nodes.IntExpr], walk(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
         case SUnitConstraint(getInfo, getName) =>
             SUnitConstraint(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id])
         case SWhereEquals(getInfo, getLeft, getRight) =>
             SWhereEquals(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getLeft).asInstanceOf[com.sun.fortress.nodes.Id], walk(getRight).asInstanceOf[com.sun.fortress.nodes.Id])
         case SWhereCoerces(getInfo, getLeft, getRight, isCoerces, isWidens) =>
             SWhereCoerces(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getLeft).asInstanceOf[com.sun.fortress.nodes.Type], walk(getRight).asInstanceOf[com.sun.fortress.nodes.Type], walk(isCoerces).asInstanceOf[Boolean], walk(isWidens).asInstanceOf[Boolean])
         case SWhereTypeAlias(getInfo, getAlias) =>
             SWhereTypeAlias(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getAlias).asInstanceOf[com.sun.fortress.nodes.TypeAlias])
         case SWhereExtends(getInfo, getName, getSupers) =>
             SWhereExtends(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getSupers).asInstanceOf[List[com.sun.fortress.nodes.BaseType]])
         case SWhereBinding(getInfo, getName, getSupers, getKind) =>
             SWhereBinding(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getSupers).asInstanceOf[List[com.sun.fortress.nodes.BaseType]], walk(getKind).asInstanceOf[com.sun.fortress.nodes.StaticParamKind])
         case SWhereClause(getInfo, getBindings, getConstraints) =>
             SWhereClause(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getBindings).asInstanceOf[List[com.sun.fortress.nodes.WhereBinding]], walk(getConstraints).asInstanceOf[List[com.sun.fortress.nodes.WhereConstraint]])
         case SEffect(getInfo, getThrowsClause, isIoEffect) =>
             SEffect(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getThrowsClause).asInstanceOf[Option[List[com.sun.fortress.nodes.Type]]], walk(isIoEffect).asInstanceOf[Boolean])
         case SUnitBinaryOp(getInfo, isParenthesized, getLeft, getRight, getOp) =>
             SUnitBinaryOp(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isParenthesized).asInstanceOf[Boolean], walk(getLeft).asInstanceOf[com.sun.fortress.nodes.UnitExpr], walk(getRight).asInstanceOf[com.sun.fortress.nodes.UnitExpr], walk(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
         case SUnitRef(getInfo, isParenthesized, getName) =>
             SUnitRef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isParenthesized).asInstanceOf[Boolean], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id])
         case SBoolBinaryOp(getInfo, isParenthesized, getLeft, getRight, getOp) =>
             SBoolBinaryOp(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isParenthesized).asInstanceOf[Boolean], walk(getLeft).asInstanceOf[com.sun.fortress.nodes.BoolExpr], walk(getRight).asInstanceOf[com.sun.fortress.nodes.BoolExpr], walk(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
         case SBoolUnaryOp(getInfo, isParenthesized, getBoolVal, getOp) =>
             SBoolUnaryOp(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isParenthesized).asInstanceOf[Boolean], walk(getBoolVal).asInstanceOf[com.sun.fortress.nodes.BoolExpr], walk(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
         case SBoolRef(getInfo, isParenthesized, getName, getLexicalDepth) =>
             SBoolRef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isParenthesized).asInstanceOf[Boolean], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getLexicalDepth).asInstanceOf[Int])
         case SBoolBase(getInfo, isParenthesized, isBoolVal) =>
             SBoolBase(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isParenthesized).asInstanceOf[Boolean], walk(isBoolVal).asInstanceOf[Boolean])
         case SIntBinaryOp(getInfo, isParenthesized, getLeft, getRight, getOp) =>
             SIntBinaryOp(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isParenthesized).asInstanceOf[Boolean], walk(getLeft).asInstanceOf[com.sun.fortress.nodes.IntExpr], walk(getRight).asInstanceOf[com.sun.fortress.nodes.IntExpr], walk(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
         case SIntRef(getInfo, isParenthesized, getName, getLexicalDepth) =>
             SIntRef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isParenthesized).asInstanceOf[Boolean], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getLexicalDepth).asInstanceOf[Int])
         case SIntBase(getInfo, isParenthesized, getIntVal) =>
             SIntBase(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isParenthesized).asInstanceOf[Boolean], walk(getIntVal).asInstanceOf[com.sun.fortress.nodes.IntLiteralExpr])
         case SUnitArg(getInfo, isLifted, getUnitArg) =>
             SUnitArg(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isLifted).asInstanceOf[Boolean], walk(getUnitArg).asInstanceOf[com.sun.fortress.nodes.UnitExpr])
         case SDimArg(getInfo, isLifted, getDimArg) =>
             SDimArg(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isLifted).asInstanceOf[Boolean], walk(getDimArg).asInstanceOf[com.sun.fortress.nodes.DimExpr])
         case SOpArg(getInfo, isLifted, getId) =>
             SOpArg(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isLifted).asInstanceOf[Boolean], walk(getId).asInstanceOf[com.sun.fortress.nodes.Op])
         case SBoolArg(getInfo, isLifted, getBoolArg) =>
             SBoolArg(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isLifted).asInstanceOf[Boolean], walk(getBoolArg).asInstanceOf[com.sun.fortress.nodes.BoolExpr])
         case SIntArg(getInfo, isLifted, getIntVal) =>
             SIntArg(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isLifted).asInstanceOf[Boolean], walk(getIntVal).asInstanceOf[com.sun.fortress.nodes.IntExpr])
         case STypeArg(getInfo, isLifted, getTypeArg) =>
             STypeArg(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isLifted).asInstanceOf[Boolean], walk(getTypeArg).asInstanceOf[com.sun.fortress.nodes.Type])
         case SNestedPattern(getInfo, getField, getPat) =>
             SNestedPattern(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getField).asInstanceOf[Option[com.sun.fortress.nodes.Id]], walk(getPat).asInstanceOf[com.sun.fortress.nodes.Pattern])
         case STypePattern(getInfo, getField, getTyp) =>
             STypePattern(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getField).asInstanceOf[Option[com.sun.fortress.nodes.Id]], walk(getTyp).asInstanceOf[com.sun.fortress.nodes.Type])
         case SPlainPattern(getInfo, getField, getName, getMods, getIdType) =>
             SPlainPattern(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getField).asInstanceOf[Option[com.sun.fortress.nodes.Id]], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getMods).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], walk(getIdType).asInstanceOf[Option[com.sun.fortress.nodes.TypeOrPattern]])
         case SPatternArgs(getInfo, getPatterns) =>
             SPatternArgs(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getPatterns).asInstanceOf[List[com.sun.fortress.nodes.PatternBinding]])
         case SPattern(getInfo, getName, getPatterns) =>
             SPattern(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[Option[com.sun.fortress.nodes.Type]], walk(getPatterns).asInstanceOf[com.sun.fortress.nodes.PatternArgs])
         case SDimBinaryOp(getInfo, getLeft, getRight, getOp) =>
             SDimBinaryOp(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getLeft).asInstanceOf[com.sun.fortress.nodes.DimExpr], walk(getRight).asInstanceOf[com.sun.fortress.nodes.DimExpr], walk(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
         case SDimUnaryOp(getInfo, getDimVal, getOp) =>
             SDimUnaryOp(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getDimVal).asInstanceOf[com.sun.fortress.nodes.DimExpr], walk(getOp).asInstanceOf[com.sun.fortress.nodes.Op])
         case SDimExponent(getInfo, getBase, getPower) =>
             SDimExponent(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getBase).asInstanceOf[com.sun.fortress.nodes.Type], walk(getPower).asInstanceOf[com.sun.fortress.nodes.IntExpr])
         case SDimRef(getInfo, getName) =>
             SDimRef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id])
         case SDimBase(getInfo) =>
             SDimBase(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo])
         case SLabelType(getInfo) =>
             SLabelType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo])
         case SFixedPointType(getInfo, getName, getBody) =>
             SFixedPointType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes._InferenceVarType], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Type])
         case SUnionType(getInfo, getElements) =>
             SUnionType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getElements).asInstanceOf[List[com.sun.fortress.nodes.Type]])
         case SIntersectionType(getInfo, getElements) =>
             SIntersectionType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getElements).asInstanceOf[List[com.sun.fortress.nodes.Type]])
         case SArrowType(getInfo, getDomain, getRange, getEffect, isIo, getMethodInfo) =>
             SArrowType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getDomain).asInstanceOf[com.sun.fortress.nodes.Type], walk(getRange).asInstanceOf[com.sun.fortress.nodes.Type], walk(getEffect).asInstanceOf[com.sun.fortress.nodes.Effect], walk(isIo).asInstanceOf[Boolean], walk(getMethodInfo).asInstanceOf[Option[com.sun.fortress.nodes.MethodInfo]])
         case STupleType(getInfo, getElements, getVarargs, getKeywords) =>
             STupleType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getElements).asInstanceOf[List[com.sun.fortress.nodes.Type]], walk(getVarargs).asInstanceOf[Option[com.sun.fortress.nodes.Type]], walk(getKeywords).asInstanceOf[List[com.sun.fortress.nodes.KeywordType]])
         case STaggedUnitType(getInfo, getElemType, getUnitExpr) =>
             STaggedUnitType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getElemType).asInstanceOf[com.sun.fortress.nodes.Type], walk(getUnitExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
         case STaggedDimType(getInfo, getElemType, getDimExpr, getUnitExpr) =>
             STaggedDimType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getElemType).asInstanceOf[com.sun.fortress.nodes.Type], walk(getDimExpr).asInstanceOf[com.sun.fortress.nodes.DimExpr], walk(getUnitExpr).asInstanceOf[Option[com.sun.fortress.nodes.Expr]])
         case SMatrixType(getInfo, getElemType, getDimensions) =>
             SMatrixType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getElemType).asInstanceOf[com.sun.fortress.nodes.Type], walk(getDimensions).asInstanceOf[List[com.sun.fortress.nodes.ExtentRange]])
         case SArrayType(getInfo, getElemType, getIndices) =>
             SArrayType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getElemType).asInstanceOf[com.sun.fortress.nodes.Type], walk(getIndices).asInstanceOf[com.sun.fortress.nodes.Indices])
         case STraitType(getInfo, getName, getArgs, getTraitStaticParams) =>
             STraitType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], walk(getTraitStaticParams).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]])
         case SVarType(getInfo, getName, getLexicalDepth) =>
             SVarType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getLexicalDepth).asInstanceOf[Int])
         case S_InferenceVarType(getInfo, getName, getId) =>
             S_InferenceVarType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getId).asInstanceOf[_root_.java.lang.Object])
         case SObjectExprType(getInfo, getExtended) =>
             SObjectExprType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getExtended).asInstanceOf[List[com.sun.fortress.nodes.BaseType]])
         case STraitSelfType(getInfo, getNamed, getComprised) =>
             STraitSelfType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo], walk(getNamed).asInstanceOf[com.sun.fortress.nodes.BaseType], walk(getComprised).asInstanceOf[List[com.sun.fortress.nodes.NamedType]])
         case SUnknownType(getInfo) =>
             SUnknownType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo])
         case SBottomType(getInfo) =>
             SBottomType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo])
         case SAnyType(getInfo) =>
             SAnyType(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo])
         case SArrayElements(getInfo, getStaticArgs, getDimension, getElements, isOutermost) =>
             SArrayElements(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getStaticArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], walk(getDimension).asInstanceOf[Int], walk(getElements).asInstanceOf[List[com.sun.fortress.nodes.ArrayExpr]], walk(isOutermost).asInstanceOf[Boolean])
         case SArrayElement(getInfo, getStaticArgs, getElement) =>
             SArrayElement(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getStaticArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], walk(getElement).asInstanceOf[com.sun.fortress.nodes.Expr])
         case SMathPrimary(getInfo, getMultiJuxt, getInfixJuxt, getFront, getRest) =>
             SMathPrimary(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getMultiJuxt).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], walk(getInfixJuxt).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], walk(getFront).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getRest).asInstanceOf[List[com.sun.fortress.nodes.MathItem]])
         case SMethodInvocation(getInfo, getObj, getMethod, getStaticArgs, getArg, getOverloadingType, getOverloadingSchema) =>
             SMethodInvocation(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getObj).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getMethod).asInstanceOf[com.sun.fortress.nodes.IdOrOp], walk(getStaticArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], walk(getArg).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getOverloadingType).asInstanceOf[Option[com.sun.fortress.nodes.Type]], walk(getOverloadingSchema).asInstanceOf[Option[com.sun.fortress.nodes.Type]])
         case SUnionCoercionInvocation(getInfo, getToType, getArg, getFromTypes, getFromCoercions) =>
             SUnionCoercionInvocation(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getToType).asInstanceOf[com.sun.fortress.nodes.Type], walk(getArg).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getFromTypes).asInstanceOf[List[com.sun.fortress.nodes.Type]], walk(getFromCoercions).asInstanceOf[List[Option[com.sun.fortress.nodes.CoercionInvocation]]])
         case SArrowCoercionInvocation(getInfo, getArg, getToType, getDomainCoercion, getRangeCoercion) =>
             SArrowCoercionInvocation(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getArg).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getToType).asInstanceOf[com.sun.fortress.nodes.ArrowType], walk(getDomainCoercion).asInstanceOf[Option[com.sun.fortress.nodes.CoercionInvocation]], walk(getRangeCoercion).asInstanceOf[Option[com.sun.fortress.nodes.CoercionInvocation]])
         case STupleCoercionInvocation(getInfo, getArg, getToType, getSubCoercions, getVarargCoercion) =>
             STupleCoercionInvocation(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getArg).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getToType).asInstanceOf[com.sun.fortress.nodes.TupleType], walk(getSubCoercions).asInstanceOf[List[Option[com.sun.fortress.nodes.CoercionInvocation]]], walk(getVarargCoercion).asInstanceOf[Option[Option[com.sun.fortress.nodes.CoercionInvocation]]])
         case STraitCoercionInvocation(getInfo, getArg, getToType, getCoercionFn) =>
             STraitCoercionInvocation(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getArg).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getToType).asInstanceOf[com.sun.fortress.nodes.TraitType], walk(getCoercionFn).asInstanceOf[com.sun.fortress.nodes.FnRef])
         case SChainExpr(getInfo, getFirst, getLinks) =>
             SChainExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getFirst).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getLinks).asInstanceOf[List[com.sun.fortress.nodes.Link]])
         case SAmbiguousMultifixOpExpr(getInfo, getInfix_op, getMultifix_op, getArgs) =>
             SAmbiguousMultifixOpExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getInfix_op).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], walk(getMultifix_op).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], walk(getArgs).asInstanceOf[List[com.sun.fortress.nodes.Expr]])
         case SOpExpr(getInfo, getOp, getArgs) =>
             SOpExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getOp).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], walk(getArgs).asInstanceOf[List[com.sun.fortress.nodes.Expr]])
         case S_RewriteFnApp(getInfo, getFunction, getArgument) =>
             S_RewriteFnApp(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getFunction).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getArgument).asInstanceOf[com.sun.fortress.nodes.Expr])
         case SJuxt(getInfo, getMultiJuxt, getInfixJuxt, getExprs, isFnApp, isTight) =>
             SJuxt(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getMultiJuxt).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], walk(getInfixJuxt).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], walk(getExprs).asInstanceOf[List[com.sun.fortress.nodes.Expr]], walk(isFnApp).asInstanceOf[Boolean], walk(isTight).asInstanceOf[Boolean])
         case S_RewriteObjectExprRef(getInfo, getGenSymName, getStaticArgs) =>
             S_RewriteObjectExprRef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getGenSymName).asInstanceOf[String], walk(getStaticArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]])
         case S_RewriteFnRef(getInfo, getFnExpr, getStaticArgs) =>
             S_RewriteFnRef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getFnExpr).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getStaticArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]])
         case SOpRef(getInfo, getStaticArgs, getLexicalDepth, getOriginalName, getNames, getInterpOverloadings, getNewOverloadings, getOverloadingType, getOverloadingSchema) =>
             SOpRef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getStaticArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], walk(getLexicalDepth).asInstanceOf[Int], walk(getOriginalName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], walk(getNames).asInstanceOf[List[com.sun.fortress.nodes.IdOrOp]], walk(getInterpOverloadings).asInstanceOf[List[com.sun.fortress.nodes.Overloading]], walk(getNewOverloadings).asInstanceOf[List[com.sun.fortress.nodes.Overloading]], walk(getOverloadingType).asInstanceOf[Option[com.sun.fortress.nodes.Type]], walk(getOverloadingSchema).asInstanceOf[Option[com.sun.fortress.nodes.Type]])
         case SFnRef(getInfo, getStaticArgs, getLexicalDepth, getOriginalName, getNames, getInterpOverloadings, getNewOverloadings, getOverloadingType, getOverloadingSchema) =>
             SFnRef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getStaticArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], walk(getLexicalDepth).asInstanceOf[Int], walk(getOriginalName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], walk(getNames).asInstanceOf[List[com.sun.fortress.nodes.IdOrOp]], walk(getInterpOverloadings).asInstanceOf[List[com.sun.fortress.nodes.Overloading]], walk(getNewOverloadings).asInstanceOf[List[com.sun.fortress.nodes.Overloading]], walk(getOverloadingType).asInstanceOf[Option[com.sun.fortress.nodes.Type]], walk(getOverloadingSchema).asInstanceOf[Option[com.sun.fortress.nodes.Type]])
         case SFieldRef(getInfo, getObj, getField) =>
             SFieldRef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getObj).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getField).asInstanceOf[com.sun.fortress.nodes.Id])
         case SVarRef(getInfo, getVarId, getStaticArgs, getLexicalDepth) =>
             SVarRef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getVarId).asInstanceOf[com.sun.fortress.nodes.Id], walk(getStaticArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], walk(getLexicalDepth).asInstanceOf[Int])
         case SBooleanLiteralExpr(getInfo, getText, getBooleanVal) =>
             SBooleanLiteralExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getText).asInstanceOf[String], walk(getBooleanVal).asInstanceOf[Int])
         case SVoidLiteralExpr(getInfo, getText) =>
             SVoidLiteralExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getText).asInstanceOf[String])
         case SStringLiteralExpr(getInfo, getText) =>
             SStringLiteralExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getText).asInstanceOf[String])
         case SCharLiteralExpr(getInfo, getText, getCharVal) =>
             SCharLiteralExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getText).asInstanceOf[String], walk(getCharVal).asInstanceOf[Int])
         case SIntLiteralExpr(getInfo, getText, getIntVal) =>
             SIntLiteralExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getText).asInstanceOf[String], walk(getIntVal).asInstanceOf[_root_.java.math.BigInteger])
         case SFloatLiteralExpr(getInfo, getText, getIntPart, getNumerator, getDenomBase, getDenomPower) =>
             SFloatLiteralExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getText).asInstanceOf[String], walk(getIntPart).asInstanceOf[_root_.java.math.BigInteger], walk(getNumerator).asInstanceOf[_root_.java.math.BigInteger], walk(getDenomBase).asInstanceOf[Int], walk(getDenomPower).asInstanceOf[Int])
         case SSubscriptExpr(getInfo, getObj, getSubs, getOp, getStaticArgs) =>
             SSubscriptExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getObj).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getSubs).asInstanceOf[List[com.sun.fortress.nodes.Expr]], walk(getOp).asInstanceOf[Option[com.sun.fortress.nodes.Op]], walk(getStaticArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]])
         case SLocalVarDecl(getInfo, getBody, getLhs, getRhs) =>
             SLocalVarDecl(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Block], walk(getLhs).asInstanceOf[List[com.sun.fortress.nodes.LValue]], walk(getRhs).asInstanceOf[Option[com.sun.fortress.nodes.Expr]])
         case SLetFn(getInfo, getBody, getFns) =>
             SLetFn(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Block], walk(getFns).asInstanceOf[List[com.sun.fortress.nodes.FnDecl]])
         case SFnExpr(getInfo, getHeader, getBody) =>
             SFnExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getHeader).asInstanceOf[com.sun.fortress.nodes.FnHeader], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Expr])
         case STryAtomicExpr(getInfo, getExpr) =>
             STryAtomicExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
         case SThrow(getInfo, getExpr) =>
             SThrow(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
         case SSpawn(getInfo, getBody) =>
             SSpawn(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Expr])
         case SExit(getInfo, getTarget, getReturnExpr) =>
             SExit(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getTarget).asInstanceOf[Option[com.sun.fortress.nodes.Id]], walk(getReturnExpr).asInstanceOf[Option[com.sun.fortress.nodes.Expr]])
         case SAtomicExpr(getInfo, getExpr) =>
             SAtomicExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
         case SArrayComprehension(getInfo, getStaticArgs, getClauses) =>
             SArrayComprehension(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getStaticArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], walk(getClauses).asInstanceOf[List[com.sun.fortress.nodes.ArrayComprehensionClause]])
         case SAccumulator(getInfo, getStaticArgs, getAccOp, getGens, getBody) =>
             SAccumulator(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getStaticArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]], walk(getAccOp).asInstanceOf[com.sun.fortress.nodes.Op], walk(getGens).asInstanceOf[List[com.sun.fortress.nodes.GeneratorClause]], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Expr])
         case SFor(getInfo, getGens, getBody) =>
             SFor(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getGens).asInstanceOf[List[com.sun.fortress.nodes.GeneratorClause]], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Block])
         case SWhile(getInfo, getTestExpr, getBody) =>
             SWhile(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getTestExpr).asInstanceOf[com.sun.fortress.nodes.GeneratorClause], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Do])
         case STypecase(getInfo, getBindExpr, getClauses, getElseClause) =>
             STypecase(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getBindExpr).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getClauses).asInstanceOf[List[com.sun.fortress.nodes.TypecaseClause]], walk(getElseClause).asInstanceOf[Option[com.sun.fortress.nodes.Block]])
         case STupleExpr(getInfo, getExprs, getVarargs, getKeywords, isInApp) =>
             STupleExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getExprs).asInstanceOf[List[com.sun.fortress.nodes.Expr]], walk(getVarargs).asInstanceOf[Option[com.sun.fortress.nodes.Expr]], walk(getKeywords).asInstanceOf[List[com.sun.fortress.nodes.KeywordExpr]], walk(isInApp).asInstanceOf[Boolean])
         case STry(getInfo, getBody, getCatchClause, getForbidClause, getFinallyClause) =>
             STry(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Block], walk(getCatchClause).asInstanceOf[Option[com.sun.fortress.nodes.Catch]], walk(getForbidClause).asInstanceOf[List[com.sun.fortress.nodes.BaseType]], walk(getFinallyClause).asInstanceOf[Option[com.sun.fortress.nodes.Block]])
         case S_RewriteObjectExpr(getInfo, getHeader, getImplicitTypeParameters, getGenSymName, getStaticArgs) =>
             S_RewriteObjectExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getHeader).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader], walk(getImplicitTypeParameters).asInstanceOf[Map[String, com.sun.fortress.nodes.StaticParam]], walk(getGenSymName).asInstanceOf[String], walk(getStaticArgs).asInstanceOf[List[com.sun.fortress.nodes.StaticArg]])
         case SObjectExpr(getInfo, getHeader, getSelfType) =>
             SObjectExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getHeader).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader], walk(getSelfType).asInstanceOf[Option[com.sun.fortress.nodes.SelfType]])
         case SLabel(getInfo, getName, getBody) =>
             SLabel(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getBody).asInstanceOf[com.sun.fortress.nodes.Block])
         case SIf(getInfo, getClauses, getElseClause) =>
             SIf(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getClauses).asInstanceOf[List[com.sun.fortress.nodes.IfClause]], walk(getElseClause).asInstanceOf[Option[com.sun.fortress.nodes.Block]])
         case SCaseExpr(getInfo, getParam, getCompare, getEqualsOp, getInOp, getClauses, getElseClause) =>
             SCaseExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getParam).asInstanceOf[Option[com.sun.fortress.nodes.Expr]], walk(getCompare).asInstanceOf[Option[com.sun.fortress.nodes.FunctionalRef]], walk(getEqualsOp).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], walk(getInOp).asInstanceOf[com.sun.fortress.nodes.FunctionalRef], walk(getClauses).asInstanceOf[List[com.sun.fortress.nodes.CaseClause]], walk(getElseClause).asInstanceOf[Option[com.sun.fortress.nodes.Block]])
         case SDo(getInfo, getFronts) =>
             SDo(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getFronts).asInstanceOf[List[com.sun.fortress.nodes.Block]])
         case SBlock(getInfo, getLoc, isAtomicBlock, isWithinDo, getExprs) =>
             SBlock(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getLoc).asInstanceOf[Option[com.sun.fortress.nodes.Expr]], walk(isAtomicBlock).asInstanceOf[Boolean], walk(isWithinDo).asInstanceOf[Boolean], walk(getExprs).asInstanceOf[List[com.sun.fortress.nodes.Expr]])
         case SAssignment(getInfo, getLhs, getAssignOp, getRhs, getAssignmentInfos) =>
             SAssignment(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getLhs).asInstanceOf[List[com.sun.fortress.nodes.Lhs]], walk(getAssignOp).asInstanceOf[Option[com.sun.fortress.nodes.FunctionalRef]], walk(getRhs).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getAssignmentInfos).asInstanceOf[List[com.sun.fortress.nodes.CompoundAssignmentInfo]])
         case SAsIfExpr(getInfo, getExpr, getAnnType) =>
             SAsIfExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getAnnType).asInstanceOf[com.sun.fortress.nodes.Type])
         case SAsExpr(getInfo, getExpr, getAnnType) =>
             SAsExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo], walk(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr], walk(getAnnType).asInstanceOf[com.sun.fortress.nodes.Type])
         case SDummyExpr(getInfo) =>
             SDummyExpr(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ExprInfo])
         case SParam(getInfo, getName, getMods, getIdType, getDefaultExpr, getVarargsType) =>
             SParam(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getMods).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], walk(getIdType).asInstanceOf[Option[com.sun.fortress.nodes.TypeOrPattern]], walk(getDefaultExpr).asInstanceOf[Option[com.sun.fortress.nodes.Expr]], walk(getVarargsType).asInstanceOf[Option[com.sun.fortress.nodes.Type]])
         case SLValue(getInfo, getName, getMods, getIdType, isMutable) =>
             SLValue(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getMods).asInstanceOf[com.sun.fortress.nodes_util.Modifiers], walk(getIdType).asInstanceOf[Option[com.sun.fortress.nodes.TypeOrPattern]], walk(isMutable).asInstanceOf[Boolean])
         case SNonterminalExtensionDef(getInfo, getName, getSyntaxDecls) =>
             SNonterminalExtensionDef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getSyntaxDecls).asInstanceOf[List[com.sun.fortress.nodes.SyntaxDecl]])
         case SNonterminalDef(getInfo, getName, getSyntaxDecls, getHeader, getAstType) =>
             SNonterminalDef(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getSyntaxDecls).asInstanceOf[List[com.sun.fortress.nodes.SyntaxDecl]], walk(getHeader).asInstanceOf[com.sun.fortress.nodes.NonterminalHeader], walk(getAstType).asInstanceOf[Option[com.sun.fortress.nodes.BaseType]])
         case SGrammarDecl(getInfo, getName, getExtendsClause, getMembers, getTransformers, isNativeDef) =>
             SGrammarDecl(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getExtendsClause).asInstanceOf[List[com.sun.fortress.nodes.Id]], walk(getMembers).asInstanceOf[List[com.sun.fortress.nodes.GrammarMemberDecl]], walk(getTransformers).asInstanceOf[List[com.sun.fortress.nodes.TransformerDecl]], walk(isNativeDef).asInstanceOf[Boolean])
         case STypeAlias(getInfo, getName, getStaticParams, getTypeDef) =>
             STypeAlias(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getStaticParams).asInstanceOf[List[com.sun.fortress.nodes.StaticParam]], walk(getTypeDef).asInstanceOf[com.sun.fortress.nodes.Type])
         case SPropertyDecl(getInfo, getName, getParams, getExpr) =>
             SPropertyDecl(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[Option[com.sun.fortress.nodes.Id]], walk(getParams).asInstanceOf[List[com.sun.fortress.nodes.Param]], walk(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
         case STestDecl(getInfo, getName, getGens, getExpr) =>
             STestDecl(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.Id], walk(getGens).asInstanceOf[List[com.sun.fortress.nodes.GeneratorClause]], walk(getExpr).asInstanceOf[com.sun.fortress.nodes.Expr])
         case SUnitDecl(getInfo, isSi_unit, getUnits, getDimType, getDefExpr) =>
             SUnitDecl(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(isSi_unit).asInstanceOf[Boolean], walk(getUnits).asInstanceOf[List[com.sun.fortress.nodes.Id]], walk(getDimType).asInstanceOf[Option[com.sun.fortress.nodes.Type]], walk(getDefExpr).asInstanceOf[Option[com.sun.fortress.nodes.Expr]])
         case SDimDecl(getInfo, getDimId, getDerived, getDefaultId) =>
             SDimDecl(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getDimId).asInstanceOf[com.sun.fortress.nodes.Id], walk(getDerived).asInstanceOf[Option[com.sun.fortress.nodes.Type]], walk(getDefaultId).asInstanceOf[Option[com.sun.fortress.nodes.Id]])
         case S_RewriteFunctionalMethodDecl(getInfo, getFunctionalMethodNames) =>
             S_RewriteFunctionalMethodDecl(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getFunctionalMethodNames).asInstanceOf[List[String]])
         case S_RewriteObjectExprDecl(getInfo, getObjectExprs) =>
             S_RewriteObjectExprDecl(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getObjectExprs).asInstanceOf[List[com.sun.fortress.nodes._RewriteObjectExpr]])
         case S_RewriteFnOverloadDecl(getInfo, getName, getFns, getType) =>
             S_RewriteFnOverloadDecl(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], walk(getFns).asInstanceOf[List[com.sun.fortress.nodes.IdOrOp]], walk(getType).asInstanceOf[Option[com.sun.fortress.nodes.Type]])
         case SFnDecl(getInfo, getHeader, getUnambiguousName, getBody, getImplementsUnambiguousName) =>
             SFnDecl(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getHeader).asInstanceOf[com.sun.fortress.nodes.FnHeader], walk(getUnambiguousName).asInstanceOf[com.sun.fortress.nodes.IdOrOp], walk(getBody).asInstanceOf[Option[com.sun.fortress.nodes.Expr]], walk(getImplementsUnambiguousName).asInstanceOf[Option[com.sun.fortress.nodes.IdOrOp]])
         case SVarDecl(getInfo, getLhs, getInit) =>
             SVarDecl(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getLhs).asInstanceOf[List[com.sun.fortress.nodes.LValue]], walk(getInit).asInstanceOf[Option[com.sun.fortress.nodes.Expr]])
         case SObjectDecl(getInfo, getHeader, getSelfType) =>
             SObjectDecl(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getHeader).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader], walk(getSelfType).asInstanceOf[Option[com.sun.fortress.nodes.SelfType]])
         case STraitDecl(getInfo, getHeader, getSelfType, getExcludesClause, getComprisesClause, isComprisesEllipses) =>
             STraitDecl(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getHeader).asInstanceOf[com.sun.fortress.nodes.TraitTypeHeader], walk(getSelfType).asInstanceOf[Option[com.sun.fortress.nodes.SelfType]], walk(getExcludesClause).asInstanceOf[List[com.sun.fortress.nodes.BaseType]], walk(getComprisesClause).asInstanceOf[Option[List[com.sun.fortress.nodes.NamedType]]], walk(isComprisesEllipses).asInstanceOf[Boolean])
         case SAliasedAPIName(getInfo, getApiName, getAlias) =>
             SAliasedAPIName(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getApiName).asInstanceOf[com.sun.fortress.nodes.APIName], walk(getAlias).asInstanceOf[Option[com.sun.fortress.nodes.Id]])
         case SAliasedSimpleName(getInfo, getName, getAlias) =>
             SAliasedSimpleName(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.IdOrOpOrAnonymousName], walk(getAlias).asInstanceOf[Option[com.sun.fortress.nodes.IdOrOpOrAnonymousName]])
         case SImportApi(getInfo, getForeignLanguage, getApis) =>
             SImportApi(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getForeignLanguage).asInstanceOf[Option[String]], walk(getApis).asInstanceOf[List[com.sun.fortress.nodes.AliasedAPIName]])
         case SImportNames(getInfo, getForeignLanguage, getApiName, getAliasedNames) =>
             SImportNames(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getForeignLanguage).asInstanceOf[Option[String]], walk(getApiName).asInstanceOf[com.sun.fortress.nodes.APIName], walk(getAliasedNames).asInstanceOf[List[com.sun.fortress.nodes.AliasedSimpleName]])
         case SImportStar(getInfo, getForeignLanguage, getApiName, getExceptNames) =>
             SImportStar(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getForeignLanguage).asInstanceOf[Option[String]], walk(getApiName).asInstanceOf[com.sun.fortress.nodes.APIName], walk(getExceptNames).asInstanceOf[List[com.sun.fortress.nodes.IdOrOpOrAnonymousName]])
         case SApi(getInfo, getName, getImports, getDecls, getComprises) =>
             SApi(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.APIName], walk(getImports).asInstanceOf[List[com.sun.fortress.nodes.Import]], walk(getDecls).asInstanceOf[List[com.sun.fortress.nodes.Decl]], walk(getComprises).asInstanceOf[List[com.sun.fortress.nodes.APIName]])
         case SComponent(getInfo, getName, getImports, getDecls, getComprises, is_native, getExports) =>
             SComponent(walk(getInfo).asInstanceOf[com.sun.fortress.nodes.ASTNodeInfo], walk(getName).asInstanceOf[com.sun.fortress.nodes.APIName], walk(getImports).asInstanceOf[List[com.sun.fortress.nodes.Import]], walk(getDecls).asInstanceOf[List[com.sun.fortress.nodes.Decl]], walk(getComprises).asInstanceOf[List[com.sun.fortress.nodes.APIName]], walk(is_native).asInstanceOf[Boolean], walk(getExports).asInstanceOf[List[com.sun.fortress.nodes.APIName]])
         case xs:List[_] => xs.map(walk _)
         case xs:Option[_] => xs.map(walk _)
         case _ => node
      }
   }
}


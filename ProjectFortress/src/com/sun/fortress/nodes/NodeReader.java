package com.sun.fortress.nodes;

import java.lang.String;
import java.math.BigInteger;
import java.io.Writer;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.LinkedList;
import com.sun.fortress.nodes_util.*;
import com.sun.fortress.parser_util.*;
import com.sun.fortress.parser_util.precedence_opexpr.*;
import com.sun.fortress.useful.*;
import edu.rice.cs.plt.tuple.Option;

/** A utility class for deserializing a node description generated by 
  * serialize(java.io.Writer).
  */
@SuppressWarnings("unused")
public class NodeReader {

    public static Node read(java.lang.String s) throws java.io.IOException {
        return read(new java.io.StringReader(s));
    }

    public static Node read(java.io.Reader r) throws java.io.IOException {
        return new NodeReader(new java.io.BufferedReader(r)).readNode();
    }

    protected java.io.BufferedReader in;
    protected char currentChar=' ';

    protected NodeReader(java.io.BufferedReader r) { in = r; }

    public Node readNode() throws java.io.IOException {
        java.lang.String name = readWord();
        if (name.equals("_")) return null;
        if (name.equals("Component:")) return readComponentBody();
        if (name.equals("Api:")) return readApiBody();
        if (name.equals("ImportStar:")) return readImportStarBody();
        if (name.equals("ImportNames:")) return readImportNamesBody();
        if (name.equals("ImportApi:")) return readImportApiBody();
        if (name.equals("AliasedSimpleName:")) return readAliasedSimpleNameBody();
        if (name.equals("AliasedAPIName:")) return readAliasedAPINameBody();
        if (name.equals("TraitDecl:")) return readTraitDeclBody();
        if (name.equals("ObjectDecl:")) return readObjectDeclBody();
        if (name.equals("VarDecl:")) return readVarDeclBody();
        if (name.equals("FnDecl:")) return readFnDeclBody();
        if (name.equals("_RewriteFnOverloadDecl:")) return read_RewriteFnOverloadDeclBody();
        if (name.equals("_RewriteObjectExprDecl:")) return read_RewriteObjectExprDeclBody();
        if (name.equals("_RewriteFunctionalMethodDecl:")) return read_RewriteFunctionalMethodDeclBody();
        if (name.equals("DimDecl:")) return readDimDeclBody();
        if (name.equals("UnitDecl:")) return readUnitDeclBody();
        if (name.equals("TestDecl:")) return readTestDeclBody();
        if (name.equals("PropertyDecl:")) return readPropertyDeclBody();
        if (name.equals("TypeAlias:")) return readTypeAliasBody();
        if (name.equals("GrammarDecl:")) return readGrammarDeclBody();
        if (name.equals("NonterminalDef:")) return readNonterminalDefBody();
        if (name.equals("NonterminalExtensionDef:")) return readNonterminalExtensionDefBody();
        if (name.equals("LValue:")) return readLValueBody();
        if (name.equals("Param:")) return readParamBody();
        if (name.equals("DummyExpr:")) return readDummyExprBody();
        if (name.equals("AsExpr:")) return readAsExprBody();
        if (name.equals("AsIfExpr:")) return readAsIfExprBody();
        if (name.equals("Assignment:")) return readAssignmentBody();
        if (name.equals("Block:")) return readBlockBody();
        if (name.equals("Do:")) return readDoBody();
        if (name.equals("CaseExpr:")) return readCaseExprBody();
        if (name.equals("If:")) return readIfBody();
        if (name.equals("Label:")) return readLabelBody();
        if (name.equals("ObjectExpr:")) return readObjectExprBody();
        if (name.equals("_RewriteObjectExpr:")) return read_RewriteObjectExprBody();
        if (name.equals("Try:")) return readTryBody();
        if (name.equals("TupleExpr:")) return readTupleExprBody();
        if (name.equals("Typecase:")) return readTypecaseBody();
        if (name.equals("While:")) return readWhileBody();
        if (name.equals("For:")) return readForBody();
        if (name.equals("Accumulator:")) return readAccumulatorBody();
        if (name.equals("ArrayComprehension:")) return readArrayComprehensionBody();
        if (name.equals("AtomicExpr:")) return readAtomicExprBody();
        if (name.equals("Exit:")) return readExitBody();
        if (name.equals("Spawn:")) return readSpawnBody();
        if (name.equals("Throw:")) return readThrowBody();
        if (name.equals("TryAtomicExpr:")) return readTryAtomicExprBody();
        if (name.equals("FnExpr:")) return readFnExprBody();
        if (name.equals("LetFn:")) return readLetFnBody();
        if (name.equals("LocalVarDecl:")) return readLocalVarDeclBody();
        if (name.equals("SubscriptExpr:")) return readSubscriptExprBody();
        if (name.equals("FloatLiteralExpr:")) return readFloatLiteralExprBody();
        if (name.equals("IntLiteralExpr:")) return readIntLiteralExprBody();
        if (name.equals("CharLiteralExpr:")) return readCharLiteralExprBody();
        if (name.equals("StringLiteralExpr:")) return readStringLiteralExprBody();
        if (name.equals("VoidLiteralExpr:")) return readVoidLiteralExprBody();
        if (name.equals("BooleanLiteralExpr:")) return readBooleanLiteralExprBody();
        if (name.equals("VarRef:")) return readVarRefBody();
        if (name.equals("FieldRef:")) return readFieldRefBody();
        if (name.equals("FnRef:")) return readFnRefBody();
        if (name.equals("OpRef:")) return readOpRefBody();
        if (name.equals("_RewriteFnRef:")) return read_RewriteFnRefBody();
        if (name.equals("_RewriteObjectExprRef:")) return read_RewriteObjectExprRefBody();
        if (name.equals("Juxt:")) return readJuxtBody();
        if (name.equals("_RewriteFnApp:")) return read_RewriteFnAppBody();
        if (name.equals("OpExpr:")) return readOpExprBody();
        if (name.equals("AmbiguousMultifixOpExpr:")) return readAmbiguousMultifixOpExprBody();
        if (name.equals("ChainExpr:")) return readChainExprBody();
        if (name.equals("TraitCoercionInvocation:")) return readTraitCoercionInvocationBody();
        if (name.equals("TupleCoercionInvocation:")) return readTupleCoercionInvocationBody();
        if (name.equals("ArrowCoercionInvocation:")) return readArrowCoercionInvocationBody();
        if (name.equals("UnionCoercionInvocation:")) return readUnionCoercionInvocationBody();
        if (name.equals("MethodInvocation:")) return readMethodInvocationBody();
        if (name.equals("MathPrimary:")) return readMathPrimaryBody();
        if (name.equals("ArrayElement:")) return readArrayElementBody();
        if (name.equals("ArrayElements:")) return readArrayElementsBody();
        if (name.equals("AnyType:")) return readAnyTypeBody();
        if (name.equals("BottomType:")) return readBottomTypeBody();
        if (name.equals("UnknownType:")) return readUnknownTypeBody();
        if (name.equals("TraitSelfType:")) return readTraitSelfTypeBody();
        if (name.equals("ObjectExprType:")) return readObjectExprTypeBody();
        if (name.equals("_InferenceVarType:")) return read_InferenceVarTypeBody();
        if (name.equals("VarType:")) return readVarTypeBody();
        if (name.equals("TraitType:")) return readTraitTypeBody();
        if (name.equals("ArrayType:")) return readArrayTypeBody();
        if (name.equals("MatrixType:")) return readMatrixTypeBody();
        if (name.equals("TaggedDimType:")) return readTaggedDimTypeBody();
        if (name.equals("TaggedUnitType:")) return readTaggedUnitTypeBody();
        if (name.equals("TupleType:")) return readTupleTypeBody();
        if (name.equals("ArrowType:")) return readArrowTypeBody();
        if (name.equals("IntersectionType:")) return readIntersectionTypeBody();
        if (name.equals("UnionType:")) return readUnionTypeBody();
        if (name.equals("FixedPointType:")) return readFixedPointTypeBody();
        if (name.equals("LabelType:")) return readLabelTypeBody();
        if (name.equals("DimBase:")) return readDimBaseBody();
        if (name.equals("DimRef:")) return readDimRefBody();
        if (name.equals("DimExponent:")) return readDimExponentBody();
        if (name.equals("DimUnaryOp:")) return readDimUnaryOpBody();
        if (name.equals("DimBinaryOp:")) return readDimBinaryOpBody();
        if (name.equals("Pattern:")) return readPatternBody();
        if (name.equals("PatternArgs:")) return readPatternArgsBody();
        if (name.equals("PlainPattern:")) return readPlainPatternBody();
        if (name.equals("TypePattern:")) return readTypePatternBody();
        if (name.equals("NestedPattern:")) return readNestedPatternBody();
        if (name.equals("TypeArg:")) return readTypeArgBody();
        if (name.equals("IntArg:")) return readIntArgBody();
        if (name.equals("BoolArg:")) return readBoolArgBody();
        if (name.equals("OpArg:")) return readOpArgBody();
        if (name.equals("DimArg:")) return readDimArgBody();
        if (name.equals("UnitArg:")) return readUnitArgBody();
        if (name.equals("IntBase:")) return readIntBaseBody();
        if (name.equals("IntRef:")) return readIntRefBody();
        if (name.equals("IntBinaryOp:")) return readIntBinaryOpBody();
        if (name.equals("BoolBase:")) return readBoolBaseBody();
        if (name.equals("BoolRef:")) return readBoolRefBody();
        if (name.equals("BoolUnaryOp:")) return readBoolUnaryOpBody();
        if (name.equals("BoolBinaryOp:")) return readBoolBinaryOpBody();
        if (name.equals("UnitRef:")) return readUnitRefBody();
        if (name.equals("UnitBinaryOp:")) return readUnitBinaryOpBody();
        if (name.equals("Effect:")) return readEffectBody();
        if (name.equals("WhereClause:")) return readWhereClauseBody();
        if (name.equals("WhereBinding:")) return readWhereBindingBody();
        if (name.equals("WhereExtends:")) return readWhereExtendsBody();
        if (name.equals("WhereTypeAlias:")) return readWhereTypeAliasBody();
        if (name.equals("WhereCoerces:")) return readWhereCoercesBody();
        if (name.equals("WhereEquals:")) return readWhereEqualsBody();
        if (name.equals("UnitConstraint:")) return readUnitConstraintBody();
        if (name.equals("IntConstraint:")) return readIntConstraintBody();
        if (name.equals("BoolConstraintExpr:")) return readBoolConstraintExprBody();
        if (name.equals("Contract:")) return readContractBody();
        if (name.equals("EnsuresClause:")) return readEnsuresClauseBody();
        if (name.equals("StaticParam:")) return readStaticParamBody();
        if (name.equals("APIName:")) return readAPINameBody();
        if (name.equals("Id:")) return readIdBody();
        if (name.equals("NamedOp:")) return readNamedOpBody();
        if (name.equals("_InferenceVarOp:")) return read_InferenceVarOpBody();
        if (name.equals("AnonymousFnName:")) return readAnonymousFnNameBody();
        if (name.equals("ConstructorFnName:")) return readConstructorFnNameBody();
        if (name.equals("ArrayComprehensionClause:")) return readArrayComprehensionClauseBody();
        if (name.equals("KeywordExpr:")) return readKeywordExprBody();
        if (name.equals("CaseClause:")) return readCaseClauseBody();
        if (name.equals("Catch:")) return readCatchBody();
        if (name.equals("CatchClause:")) return readCatchClauseBody();
        if (name.equals("IfClause:")) return readIfClauseBody();
        if (name.equals("TypecaseClause:")) return readTypecaseClauseBody();
        if (name.equals("ExtentRange:")) return readExtentRangeBody();
        if (name.equals("GeneratorClause:")) return readGeneratorClauseBody();
        if (name.equals("KeywordType:")) return readKeywordTypeBody();
        if (name.equals("TraitTypeWhere:")) return readTraitTypeWhereBody();
        if (name.equals("Indices:")) return readIndicesBody();
        if (name.equals("ParenthesisDelimitedMI:")) return readParenthesisDelimitedMIBody();
        if (name.equals("NonParenthesisDelimitedMI:")) return readNonParenthesisDelimitedMIBody();
        if (name.equals("ExponentiationMI:")) return readExponentiationMIBody();
        if (name.equals("SubscriptingMI:")) return readSubscriptingMIBody();
        if (name.equals("Overloading:")) return readOverloadingBody();
        if (name.equals("NonterminalHeader:")) return readNonterminalHeaderBody();
        if (name.equals("NonterminalParameter:")) return readNonterminalParameterBody();
        if (name.equals("SyntaxDef:")) return readSyntaxDefBody();
        if (name.equals("SuperSyntaxDef:")) return readSuperSyntaxDefBody();
        if (name.equals("PreTransformerDef:")) return readPreTransformerDefBody();
        if (name.equals("NamedTransformerDef:")) return readNamedTransformerDefBody();
        if (name.equals("UnparsedTransformer:")) return readUnparsedTransformerBody();
        if (name.equals("NodeTransformer:")) return readNodeTransformerBody();
        if (name.equals("CaseTransformer:")) return readCaseTransformerBody();
        if (name.equals("CaseTransformerClause:")) return readCaseTransformerClauseBody();
        if (name.equals("PrefixedSymbol:")) return readPrefixedSymbolBody();
        if (name.equals("OptionalSymbol:")) return readOptionalSymbolBody();
        if (name.equals("RepeatSymbol:")) return readRepeatSymbolBody();
        if (name.equals("RepeatOneOrMoreSymbol:")) return readRepeatOneOrMoreSymbolBody();
        if (name.equals("NoWhitespaceSymbol:")) return readNoWhitespaceSymbolBody();
        if (name.equals("GroupSymbol:")) return readGroupSymbolBody();
        if (name.equals("AnyCharacterSymbol:")) return readAnyCharacterSymbolBody();
        if (name.equals("WhitespaceSymbol:")) return readWhitespaceSymbolBody();
        if (name.equals("TabSymbol:")) return readTabSymbolBody();
        if (name.equals("FormfeedSymbol:")) return readFormfeedSymbolBody();
        if (name.equals("CarriageReturnSymbol:")) return readCarriageReturnSymbolBody();
        if (name.equals("BackspaceSymbol:")) return readBackspaceSymbolBody();
        if (name.equals("NewlineSymbol:")) return readNewlineSymbolBody();
        if (name.equals("BreaklineSymbol:")) return readBreaklineSymbolBody();
        if (name.equals("ItemSymbol:")) return readItemSymbolBody();
        if (name.equals("NonterminalSymbol:")) return readNonterminalSymbolBody();
        if (name.equals("KeywordSymbol:")) return readKeywordSymbolBody();
        if (name.equals("TokenSymbol:")) return readTokenSymbolBody();
        if (name.equals("NotPredicateSymbol:")) return readNotPredicateSymbolBody();
        if (name.equals("AndPredicateSymbol:")) return readAndPredicateSymbolBody();
        if (name.equals("CharacterClassSymbol:")) return readCharacterClassSymbolBody();
        if (name.equals("CharSymbol:")) return readCharSymbolBody();
        if (name.equals("CharacterInterval:")) return readCharacterIntervalBody();
        if (name.equals("Link:")) return readLinkBody();
        if (name.equals("TraitTypeHeader:")) return readTraitTypeHeaderBody();
        if (name.equals("FnHeader:")) return readFnHeaderBody();
        if (name.equals("SpanInfo:")) return readSpanInfoBody();
        if (name.equals("ExprInfo:")) return readExprInfoBody();
        if (name.equals("TypeInfo:")) return readTypeInfoBody();
        if (name.equals("MethodInfo:")) return readMethodInfoBody();
        if (name.equals("CompoundAssignmentInfo:")) return readCompoundAssignmentInfoBody();
        if (name.equals("Level:")) return readLevelBody();
        if (name.equals("InFixity:")) return readInFixityBody();
        if (name.equals("PreFixity:")) return readPreFixityBody();
        if (name.equals("PostFixity:")) return readPostFixityBody();
        if (name.equals("NoFixity:")) return readNoFixityBody();
        if (name.equals("MultiFixity:")) return readMultiFixityBody();
        if (name.equals("EnclosingFixity:")) return readEnclosingFixityBody();
        if (name.equals("BigFixity:")) return readBigFixityBody();
        if (name.equals("UnknownFixity:")) return readUnknownFixityBody();
        if (name.equals("KindType:")) return readKindTypeBody();
        if (name.equals("KindInt:")) return readKindIntBody();
        if (name.equals("KindNat:")) return readKindNatBody();
        if (name.equals("KindBool:")) return readKindBoolBody();
        if (name.equals("KindDim:")) return readKindDimBody();
        if (name.equals("KindUnit:")) return readKindUnitBody();
        if (name.equals("KindOp:")) return readKindOpBody();
        if (name.equals("_SyntaxTransformationAbstractNode:")) return read_SyntaxTransformationAbstractNodeBody();
        if (name.equals("_SyntaxTransformationCompilationUnit:")) return read_SyntaxTransformationCompilationUnitBody();
        if (name.equals("_SyntaxTransformationComponent:")) return read_SyntaxTransformationComponentBody();
        if (name.equals("_SyntaxTransformationApi:")) return read_SyntaxTransformationApiBody();
        if (name.equals("_SyntaxTransformationImport:")) return read_SyntaxTransformationImportBody();
        if (name.equals("_SyntaxTransformationImportedNames:")) return read_SyntaxTransformationImportedNamesBody();
        if (name.equals("_SyntaxTransformationImportStar:")) return read_SyntaxTransformationImportStarBody();
        if (name.equals("_SyntaxTransformationImportNames:")) return read_SyntaxTransformationImportNamesBody();
        if (name.equals("_SyntaxTransformationImportApi:")) return read_SyntaxTransformationImportApiBody();
        if (name.equals("_SyntaxTransformationAliasedSimpleName:")) return read_SyntaxTransformationAliasedSimpleNameBody();
        if (name.equals("_SyntaxTransformationAliasedAPIName:")) return read_SyntaxTransformationAliasedAPINameBody();
        if (name.equals("_SyntaxTransformationDecl:")) return read_SyntaxTransformationDeclBody();
        if (name.equals("_SyntaxTransformationTraitObjectDecl:")) return read_SyntaxTransformationTraitObjectDeclBody();
        if (name.equals("_SyntaxTransformationTraitDecl:")) return read_SyntaxTransformationTraitDeclBody();
        if (name.equals("_SyntaxTransformationObjectDecl:")) return read_SyntaxTransformationObjectDeclBody();
        if (name.equals("_SyntaxTransformationVarDecl:")) return read_SyntaxTransformationVarDeclBody();
        if (name.equals("_SyntaxTransformationFnDecl:")) return read_SyntaxTransformationFnDeclBody();
        if (name.equals("_SyntaxTransformation_RewriteFnOverloadDecl:")) return read_SyntaxTransformation_RewriteFnOverloadDeclBody();
        if (name.equals("_SyntaxTransformation_RewriteObjectExprDecl:")) return read_SyntaxTransformation_RewriteObjectExprDeclBody();
        if (name.equals("_SyntaxTransformation_RewriteFunctionalMethodDecl:")) return read_SyntaxTransformation_RewriteFunctionalMethodDeclBody();
        if (name.equals("_SyntaxTransformationDimUnitDecl:")) return read_SyntaxTransformationDimUnitDeclBody();
        if (name.equals("_SyntaxTransformationDimDecl:")) return read_SyntaxTransformationDimDeclBody();
        if (name.equals("_SyntaxTransformationUnitDecl:")) return read_SyntaxTransformationUnitDeclBody();
        if (name.equals("_SyntaxTransformationTestDecl:")) return read_SyntaxTransformationTestDeclBody();
        if (name.equals("_SyntaxTransformationPropertyDecl:")) return read_SyntaxTransformationPropertyDeclBody();
        if (name.equals("_SyntaxTransformationTypeAlias:")) return read_SyntaxTransformationTypeAliasBody();
        if (name.equals("_SyntaxTransformationGrammarDecl:")) return read_SyntaxTransformationGrammarDeclBody();
        if (name.equals("_SyntaxTransformationGrammarMemberDecl:")) return read_SyntaxTransformationGrammarMemberDeclBody();
        if (name.equals("_SyntaxTransformationNonterminalDecl:")) return read_SyntaxTransformationNonterminalDeclBody();
        if (name.equals("_SyntaxTransformationNonterminalDef:")) return read_SyntaxTransformationNonterminalDefBody();
        if (name.equals("_SyntaxTransformationNonterminalExtensionDef:")) return read_SyntaxTransformationNonterminalExtensionDefBody();
        if (name.equals("_SyntaxTransformationBinding:")) return read_SyntaxTransformationBindingBody();
        if (name.equals("_SyntaxTransformationLValue:")) return read_SyntaxTransformationLValueBody();
        if (name.equals("_SyntaxTransformationParam:")) return read_SyntaxTransformationParamBody();
        if (name.equals("_SyntaxTransformationExpr:")) return read_SyntaxTransformationExprBody();
        if (name.equals("_SyntaxTransformationDummyExpr:")) return read_SyntaxTransformationDummyExprBody();
        if (name.equals("_SyntaxTransformationTypeAnnotatedExpr:")) return read_SyntaxTransformationTypeAnnotatedExprBody();
        if (name.equals("_SyntaxTransformationAsExpr:")) return read_SyntaxTransformationAsExprBody();
        if (name.equals("_SyntaxTransformationAsIfExpr:")) return read_SyntaxTransformationAsIfExprBody();
        if (name.equals("_SyntaxTransformationAssignment:")) return read_SyntaxTransformationAssignmentBody();
        if (name.equals("_SyntaxTransformationBlock:")) return read_SyntaxTransformationBlockBody();
        if (name.equals("_SyntaxTransformationDo:")) return read_SyntaxTransformationDoBody();
        if (name.equals("_SyntaxTransformationCaseExpr:")) return read_SyntaxTransformationCaseExprBody();
        if (name.equals("_SyntaxTransformationIf:")) return read_SyntaxTransformationIfBody();
        if (name.equals("_SyntaxTransformationLabel:")) return read_SyntaxTransformationLabelBody();
        if (name.equals("_SyntaxTransformationAbstractObjectExpr:")) return read_SyntaxTransformationAbstractObjectExprBody();
        if (name.equals("_SyntaxTransformationObjectExpr:")) return read_SyntaxTransformationObjectExprBody();
        if (name.equals("_SyntaxTransformation_RewriteObjectExpr:")) return read_SyntaxTransformation_RewriteObjectExprBody();
        if (name.equals("_SyntaxTransformationTry:")) return read_SyntaxTransformationTryBody();
        if (name.equals("_SyntaxTransformationTupleExpr:")) return read_SyntaxTransformationTupleExprBody();
        if (name.equals("_SyntaxTransformationTypecase:")) return read_SyntaxTransformationTypecaseBody();
        if (name.equals("_SyntaxTransformationWhile:")) return read_SyntaxTransformationWhileBody();
        if (name.equals("_SyntaxTransformationFor:")) return read_SyntaxTransformationForBody();
        if (name.equals("_SyntaxTransformationBigOpApp:")) return read_SyntaxTransformationBigOpAppBody();
        if (name.equals("_SyntaxTransformationAccumulator:")) return read_SyntaxTransformationAccumulatorBody();
        if (name.equals("_SyntaxTransformationArrayComprehension:")) return read_SyntaxTransformationArrayComprehensionBody();
        if (name.equals("_SyntaxTransformationAtomicExpr:")) return read_SyntaxTransformationAtomicExprBody();
        if (name.equals("_SyntaxTransformationExit:")) return read_SyntaxTransformationExitBody();
        if (name.equals("_SyntaxTransformationSpawn:")) return read_SyntaxTransformationSpawnBody();
        if (name.equals("_SyntaxTransformationThrow:")) return read_SyntaxTransformationThrowBody();
        if (name.equals("_SyntaxTransformationTryAtomicExpr:")) return read_SyntaxTransformationTryAtomicExprBody();
        if (name.equals("_SyntaxTransformationFnExpr:")) return read_SyntaxTransformationFnExprBody();
        if (name.equals("_SyntaxTransformationLetExpr:")) return read_SyntaxTransformationLetExprBody();
        if (name.equals("_SyntaxTransformationLetFn:")) return read_SyntaxTransformationLetFnBody();
        if (name.equals("_SyntaxTransformationLocalVarDecl:")) return read_SyntaxTransformationLocalVarDeclBody();
        if (name.equals("_SyntaxTransformationSimpleExpr:")) return read_SyntaxTransformationSimpleExprBody();
        if (name.equals("_SyntaxTransformationSubscriptExpr:")) return read_SyntaxTransformationSubscriptExprBody();
        if (name.equals("_SyntaxTransformationPrimary:")) return read_SyntaxTransformationPrimaryBody();
        if (name.equals("_SyntaxTransformationLiteralExpr:")) return read_SyntaxTransformationLiteralExprBody();
        if (name.equals("_SyntaxTransformationNumberLiteralExpr:")) return read_SyntaxTransformationNumberLiteralExprBody();
        if (name.equals("_SyntaxTransformationFloatLiteralExpr:")) return read_SyntaxTransformationFloatLiteralExprBody();
        if (name.equals("_SyntaxTransformationIntLiteralExpr:")) return read_SyntaxTransformationIntLiteralExprBody();
        if (name.equals("_SyntaxTransformationCharLiteralExpr:")) return read_SyntaxTransformationCharLiteralExprBody();
        if (name.equals("_SyntaxTransformationStringLiteralExpr:")) return read_SyntaxTransformationStringLiteralExprBody();
        if (name.equals("_SyntaxTransformationVoidLiteralExpr:")) return read_SyntaxTransformationVoidLiteralExprBody();
        if (name.equals("_SyntaxTransformationBooleanLiteralExpr:")) return read_SyntaxTransformationBooleanLiteralExprBody();
        if (name.equals("_SyntaxTransformationVarRef:")) return read_SyntaxTransformationVarRefBody();
        if (name.equals("_SyntaxTransformationFieldRef:")) return read_SyntaxTransformationFieldRefBody();
        if (name.equals("_SyntaxTransformationFunctionalRef:")) return read_SyntaxTransformationFunctionalRefBody();
        if (name.equals("_SyntaxTransformationFnRef:")) return read_SyntaxTransformationFnRefBody();
        if (name.equals("_SyntaxTransformationOpRef:")) return read_SyntaxTransformationOpRefBody();
        if (name.equals("_SyntaxTransformation_RewriteFnRef:")) return read_SyntaxTransformation_RewriteFnRefBody();
        if (name.equals("_SyntaxTransformation_RewriteObjectExprRef:")) return read_SyntaxTransformation_RewriteObjectExprRefBody();
        if (name.equals("_SyntaxTransformationJuxt:")) return read_SyntaxTransformationJuxtBody();
        if (name.equals("_SyntaxTransformation_RewriteFnApp:")) return read_SyntaxTransformation_RewriteFnAppBody();
        if (name.equals("_SyntaxTransformationOpExpr:")) return read_SyntaxTransformationOpExprBody();
        if (name.equals("_SyntaxTransformationAmbiguousMultifixOpExpr:")) return read_SyntaxTransformationAmbiguousMultifixOpExprBody();
        if (name.equals("_SyntaxTransformationChainExpr:")) return read_SyntaxTransformationChainExprBody();
        if (name.equals("_SyntaxTransformationCoercionInvocation:")) return read_SyntaxTransformationCoercionInvocationBody();
        if (name.equals("_SyntaxTransformationTraitCoercionInvocation:")) return read_SyntaxTransformationTraitCoercionInvocationBody();
        if (name.equals("_SyntaxTransformationTupleCoercionInvocation:")) return read_SyntaxTransformationTupleCoercionInvocationBody();
        if (name.equals("_SyntaxTransformationArrowCoercionInvocation:")) return read_SyntaxTransformationArrowCoercionInvocationBody();
        if (name.equals("_SyntaxTransformationUnionCoercionInvocation:")) return read_SyntaxTransformationUnionCoercionInvocationBody();
        if (name.equals("_SyntaxTransformationMethodInvocation:")) return read_SyntaxTransformationMethodInvocationBody();
        if (name.equals("_SyntaxTransformationMathPrimary:")) return read_SyntaxTransformationMathPrimaryBody();
        if (name.equals("_SyntaxTransformationArrayExpr:")) return read_SyntaxTransformationArrayExprBody();
        if (name.equals("_SyntaxTransformationArrayElement:")) return read_SyntaxTransformationArrayElementBody();
        if (name.equals("_SyntaxTransformationArrayElements:")) return read_SyntaxTransformationArrayElementsBody();
        if (name.equals("_SyntaxTransformationType:")) return read_SyntaxTransformationTypeBody();
        if (name.equals("_SyntaxTransformationBaseType:")) return read_SyntaxTransformationBaseTypeBody();
        if (name.equals("_SyntaxTransformationAnyType:")) return read_SyntaxTransformationAnyTypeBody();
        if (name.equals("_SyntaxTransformationBottomType:")) return read_SyntaxTransformationBottomTypeBody();
        if (name.equals("_SyntaxTransformationUnknownType:")) return read_SyntaxTransformationUnknownTypeBody();
        if (name.equals("_SyntaxTransformationSelfType:")) return read_SyntaxTransformationSelfTypeBody();
        if (name.equals("_SyntaxTransformationTraitSelfType:")) return read_SyntaxTransformationTraitSelfTypeBody();
        if (name.equals("_SyntaxTransformationObjectExprType:")) return read_SyntaxTransformationObjectExprTypeBody();
        if (name.equals("_SyntaxTransformationNamedType:")) return read_SyntaxTransformationNamedTypeBody();
        if (name.equals("_SyntaxTransformation_InferenceVarType:")) return read_SyntaxTransformation_InferenceVarTypeBody();
        if (name.equals("_SyntaxTransformationVarType:")) return read_SyntaxTransformationVarTypeBody();
        if (name.equals("_SyntaxTransformationTraitType:")) return read_SyntaxTransformationTraitTypeBody();
        if (name.equals("_SyntaxTransformationAbbreviatedType:")) return read_SyntaxTransformationAbbreviatedTypeBody();
        if (name.equals("_SyntaxTransformationArrayType:")) return read_SyntaxTransformationArrayTypeBody();
        if (name.equals("_SyntaxTransformationMatrixType:")) return read_SyntaxTransformationMatrixTypeBody();
        if (name.equals("_SyntaxTransformationTaggedDimType:")) return read_SyntaxTransformationTaggedDimTypeBody();
        if (name.equals("_SyntaxTransformationTaggedUnitType:")) return read_SyntaxTransformationTaggedUnitTypeBody();
        if (name.equals("_SyntaxTransformationTupleType:")) return read_SyntaxTransformationTupleTypeBody();
        if (name.equals("_SyntaxTransformationArrowType:")) return read_SyntaxTransformationArrowTypeBody();
        if (name.equals("_SyntaxTransformationBoundType:")) return read_SyntaxTransformationBoundTypeBody();
        if (name.equals("_SyntaxTransformationIntersectionType:")) return read_SyntaxTransformationIntersectionTypeBody();
        if (name.equals("_SyntaxTransformationUnionType:")) return read_SyntaxTransformationUnionTypeBody();
        if (name.equals("_SyntaxTransformationFixedPointType:")) return read_SyntaxTransformationFixedPointTypeBody();
        if (name.equals("_SyntaxTransformationLabelType:")) return read_SyntaxTransformationLabelTypeBody();
        if (name.equals("_SyntaxTransformationDimExpr:")) return read_SyntaxTransformationDimExprBody();
        if (name.equals("_SyntaxTransformationDimBase:")) return read_SyntaxTransformationDimBaseBody();
        if (name.equals("_SyntaxTransformationDimRef:")) return read_SyntaxTransformationDimRefBody();
        if (name.equals("_SyntaxTransformationDimExponent:")) return read_SyntaxTransformationDimExponentBody();
        if (name.equals("_SyntaxTransformationDimUnaryOp:")) return read_SyntaxTransformationDimUnaryOpBody();
        if (name.equals("_SyntaxTransformationDimBinaryOp:")) return read_SyntaxTransformationDimBinaryOpBody();
        if (name.equals("_SyntaxTransformationPattern:")) return read_SyntaxTransformationPatternBody();
        if (name.equals("_SyntaxTransformationPatternArgs:")) return read_SyntaxTransformationPatternArgsBody();
        if (name.equals("_SyntaxTransformationPatternBinding:")) return read_SyntaxTransformationPatternBindingBody();
        if (name.equals("_SyntaxTransformationPlainPattern:")) return read_SyntaxTransformationPlainPatternBody();
        if (name.equals("_SyntaxTransformationTypePattern:")) return read_SyntaxTransformationTypePatternBody();
        if (name.equals("_SyntaxTransformationNestedPattern:")) return read_SyntaxTransformationNestedPatternBody();
        if (name.equals("_SyntaxTransformationStaticArg:")) return read_SyntaxTransformationStaticArgBody();
        if (name.equals("_SyntaxTransformationTypeArg:")) return read_SyntaxTransformationTypeArgBody();
        if (name.equals("_SyntaxTransformationIntArg:")) return read_SyntaxTransformationIntArgBody();
        if (name.equals("_SyntaxTransformationBoolArg:")) return read_SyntaxTransformationBoolArgBody();
        if (name.equals("_SyntaxTransformationOpArg:")) return read_SyntaxTransformationOpArgBody();
        if (name.equals("_SyntaxTransformationDimArg:")) return read_SyntaxTransformationDimArgBody();
        if (name.equals("_SyntaxTransformationUnitArg:")) return read_SyntaxTransformationUnitArgBody();
        if (name.equals("_SyntaxTransformationStaticExpr:")) return read_SyntaxTransformationStaticExprBody();
        if (name.equals("_SyntaxTransformationIntExpr:")) return read_SyntaxTransformationIntExprBody();
        if (name.equals("_SyntaxTransformationIntBase:")) return read_SyntaxTransformationIntBaseBody();
        if (name.equals("_SyntaxTransformationIntRef:")) return read_SyntaxTransformationIntRefBody();
        if (name.equals("_SyntaxTransformationIntBinaryOp:")) return read_SyntaxTransformationIntBinaryOpBody();
        if (name.equals("_SyntaxTransformationBoolExpr:")) return read_SyntaxTransformationBoolExprBody();
        if (name.equals("_SyntaxTransformationBoolBase:")) return read_SyntaxTransformationBoolBaseBody();
        if (name.equals("_SyntaxTransformationBoolRef:")) return read_SyntaxTransformationBoolRefBody();
        if (name.equals("_SyntaxTransformationBoolConstraint:")) return read_SyntaxTransformationBoolConstraintBody();
        if (name.equals("_SyntaxTransformationBoolUnaryOp:")) return read_SyntaxTransformationBoolUnaryOpBody();
        if (name.equals("_SyntaxTransformationBoolBinaryOp:")) return read_SyntaxTransformationBoolBinaryOpBody();
        if (name.equals("_SyntaxTransformationUnitExpr:")) return read_SyntaxTransformationUnitExprBody();
        if (name.equals("_SyntaxTransformationUnitRef:")) return read_SyntaxTransformationUnitRefBody();
        if (name.equals("_SyntaxTransformationUnitBinaryOp:")) return read_SyntaxTransformationUnitBinaryOpBody();
        if (name.equals("_SyntaxTransformationEffect:")) return read_SyntaxTransformationEffectBody();
        if (name.equals("_SyntaxTransformationWhereClause:")) return read_SyntaxTransformationWhereClauseBody();
        if (name.equals("_SyntaxTransformationWhereBinding:")) return read_SyntaxTransformationWhereBindingBody();
        if (name.equals("_SyntaxTransformationWhereConstraint:")) return read_SyntaxTransformationWhereConstraintBody();
        if (name.equals("_SyntaxTransformationWhereExtends:")) return read_SyntaxTransformationWhereExtendsBody();
        if (name.equals("_SyntaxTransformationWhereTypeAlias:")) return read_SyntaxTransformationWhereTypeAliasBody();
        if (name.equals("_SyntaxTransformationWhereCoerces:")) return read_SyntaxTransformationWhereCoercesBody();
        if (name.equals("_SyntaxTransformationWhereEquals:")) return read_SyntaxTransformationWhereEqualsBody();
        if (name.equals("_SyntaxTransformationUnitConstraint:")) return read_SyntaxTransformationUnitConstraintBody();
        if (name.equals("_SyntaxTransformationIntConstraint:")) return read_SyntaxTransformationIntConstraintBody();
        if (name.equals("_SyntaxTransformationBoolConstraintExpr:")) return read_SyntaxTransformationBoolConstraintExprBody();
        if (name.equals("_SyntaxTransformationContract:")) return read_SyntaxTransformationContractBody();
        if (name.equals("_SyntaxTransformationEnsuresClause:")) return read_SyntaxTransformationEnsuresClauseBody();
        if (name.equals("_SyntaxTransformationStaticParam:")) return read_SyntaxTransformationStaticParamBody();
        if (name.equals("_SyntaxTransformationName:")) return read_SyntaxTransformationNameBody();
        if (name.equals("_SyntaxTransformationAPIName:")) return read_SyntaxTransformationAPINameBody();
        if (name.equals("_SyntaxTransformationIdOrOpOrAnonymousName:")) return read_SyntaxTransformationIdOrOpOrAnonymousNameBody();
        if (name.equals("_SyntaxTransformationIdOrOp:")) return read_SyntaxTransformationIdOrOpBody();
        if (name.equals("_SyntaxTransformationId:")) return read_SyntaxTransformationIdBody();
        if (name.equals("_SyntaxTransformationOp:")) return read_SyntaxTransformationOpBody();
        if (name.equals("_SyntaxTransformationNamedOp:")) return read_SyntaxTransformationNamedOpBody();
        if (name.equals("_SyntaxTransformation_InferenceVarOp:")) return read_SyntaxTransformation_InferenceVarOpBody();
        if (name.equals("_SyntaxTransformationAnonymousName:")) return read_SyntaxTransformationAnonymousNameBody();
        if (name.equals("_SyntaxTransformationAnonymousFnName:")) return read_SyntaxTransformationAnonymousFnNameBody();
        if (name.equals("_SyntaxTransformationConstructorFnName:")) return read_SyntaxTransformationConstructorFnNameBody();
        if (name.equals("_SyntaxTransformationArrayComprehensionClause:")) return read_SyntaxTransformationArrayComprehensionClauseBody();
        if (name.equals("_SyntaxTransformationKeywordExpr:")) return read_SyntaxTransformationKeywordExprBody();
        if (name.equals("_SyntaxTransformationCaseClause:")) return read_SyntaxTransformationCaseClauseBody();
        if (name.equals("_SyntaxTransformationCatch:")) return read_SyntaxTransformationCatchBody();
        if (name.equals("_SyntaxTransformationCatchClause:")) return read_SyntaxTransformationCatchClauseBody();
        if (name.equals("_SyntaxTransformationIfClause:")) return read_SyntaxTransformationIfClauseBody();
        if (name.equals("_SyntaxTransformationTypecaseClause:")) return read_SyntaxTransformationTypecaseClauseBody();
        if (name.equals("_SyntaxTransformationExtentRange:")) return read_SyntaxTransformationExtentRangeBody();
        if (name.equals("_SyntaxTransformationGeneratorClause:")) return read_SyntaxTransformationGeneratorClauseBody();
        if (name.equals("_SyntaxTransformationKeywordType:")) return read_SyntaxTransformationKeywordTypeBody();
        if (name.equals("_SyntaxTransformationTraitTypeWhere:")) return read_SyntaxTransformationTraitTypeWhereBody();
        if (name.equals("_SyntaxTransformationIndices:")) return read_SyntaxTransformationIndicesBody();
        if (name.equals("_SyntaxTransformationMathItem:")) return read_SyntaxTransformationMathItemBody();
        if (name.equals("_SyntaxTransformationExprMI:")) return read_SyntaxTransformationExprMIBody();
        if (name.equals("_SyntaxTransformationParenthesisDelimitedMI:")) return read_SyntaxTransformationParenthesisDelimitedMIBody();
        if (name.equals("_SyntaxTransformationNonParenthesisDelimitedMI:")) return read_SyntaxTransformationNonParenthesisDelimitedMIBody();
        if (name.equals("_SyntaxTransformationNonExprMI:")) return read_SyntaxTransformationNonExprMIBody();
        if (name.equals("_SyntaxTransformationExponentiationMI:")) return read_SyntaxTransformationExponentiationMIBody();
        if (name.equals("_SyntaxTransformationSubscriptingMI:")) return read_SyntaxTransformationSubscriptingMIBody();
        if (name.equals("_SyntaxTransformationOverloading:")) return read_SyntaxTransformationOverloadingBody();
        if (name.equals("_SyntaxTransformationNonterminalHeader:")) return read_SyntaxTransformationNonterminalHeaderBody();
        if (name.equals("_SyntaxTransformationNonterminalParameter:")) return read_SyntaxTransformationNonterminalParameterBody();
        if (name.equals("_SyntaxTransformationSyntaxDecl:")) return read_SyntaxTransformationSyntaxDeclBody();
        if (name.equals("_SyntaxTransformationSyntaxDef:")) return read_SyntaxTransformationSyntaxDefBody();
        if (name.equals("_SyntaxTransformationSuperSyntaxDef:")) return read_SyntaxTransformationSuperSyntaxDefBody();
        if (name.equals("_SyntaxTransformationTransformerDecl:")) return read_SyntaxTransformationTransformerDeclBody();
        if (name.equals("_SyntaxTransformationPreTransformerDef:")) return read_SyntaxTransformationPreTransformerDefBody();
        if (name.equals("_SyntaxTransformationNamedTransformerDef:")) return read_SyntaxTransformationNamedTransformerDefBody();
        if (name.equals("_SyntaxTransformationTransformer:")) return read_SyntaxTransformationTransformerBody();
        if (name.equals("_SyntaxTransformationUnparsedTransformer:")) return read_SyntaxTransformationUnparsedTransformerBody();
        if (name.equals("_SyntaxTransformationNodeTransformer:")) return read_SyntaxTransformationNodeTransformerBody();
        if (name.equals("_SyntaxTransformationCaseTransformer:")) return read_SyntaxTransformationCaseTransformerBody();
        if (name.equals("_SyntaxTransformationCaseTransformerClause:")) return read_SyntaxTransformationCaseTransformerClauseBody();
        if (name.equals("_SyntaxTransformationSyntaxSymbol:")) return read_SyntaxTransformationSyntaxSymbolBody();
        if (name.equals("_SyntaxTransformationPrefixedSymbol:")) return read_SyntaxTransformationPrefixedSymbolBody();
        if (name.equals("_SyntaxTransformationOptionalSymbol:")) return read_SyntaxTransformationOptionalSymbolBody();
        if (name.equals("_SyntaxTransformationRepeatSymbol:")) return read_SyntaxTransformationRepeatSymbolBody();
        if (name.equals("_SyntaxTransformationRepeatOneOrMoreSymbol:")) return read_SyntaxTransformationRepeatOneOrMoreSymbolBody();
        if (name.equals("_SyntaxTransformationNoWhitespaceSymbol:")) return read_SyntaxTransformationNoWhitespaceSymbolBody();
        if (name.equals("_SyntaxTransformationGroupSymbol:")) return read_SyntaxTransformationGroupSymbolBody();
        if (name.equals("_SyntaxTransformationSpecialSymbol:")) return read_SyntaxTransformationSpecialSymbolBody();
        if (name.equals("_SyntaxTransformationAnyCharacterSymbol:")) return read_SyntaxTransformationAnyCharacterSymbolBody();
        if (name.equals("_SyntaxTransformationWhitespaceSymbol:")) return read_SyntaxTransformationWhitespaceSymbolBody();
        if (name.equals("_SyntaxTransformationTabSymbol:")) return read_SyntaxTransformationTabSymbolBody();
        if (name.equals("_SyntaxTransformationFormfeedSymbol:")) return read_SyntaxTransformationFormfeedSymbolBody();
        if (name.equals("_SyntaxTransformationCarriageReturnSymbol:")) return read_SyntaxTransformationCarriageReturnSymbolBody();
        if (name.equals("_SyntaxTransformationBackspaceSymbol:")) return read_SyntaxTransformationBackspaceSymbolBody();
        if (name.equals("_SyntaxTransformationNewlineSymbol:")) return read_SyntaxTransformationNewlineSymbolBody();
        if (name.equals("_SyntaxTransformationBreaklineSymbol:")) return read_SyntaxTransformationBreaklineSymbolBody();
        if (name.equals("_SyntaxTransformationItemSymbol:")) return read_SyntaxTransformationItemSymbolBody();
        if (name.equals("_SyntaxTransformationNonterminalSymbol:")) return read_SyntaxTransformationNonterminalSymbolBody();
        if (name.equals("_SyntaxTransformationKeywordSymbol:")) return read_SyntaxTransformationKeywordSymbolBody();
        if (name.equals("_SyntaxTransformationTokenSymbol:")) return read_SyntaxTransformationTokenSymbolBody();
        if (name.equals("_SyntaxTransformationNotPredicateSymbol:")) return read_SyntaxTransformationNotPredicateSymbolBody();
        if (name.equals("_SyntaxTransformationAndPredicateSymbol:")) return read_SyntaxTransformationAndPredicateSymbolBody();
        if (name.equals("_SyntaxTransformationCharacterClassSymbol:")) return read_SyntaxTransformationCharacterClassSymbolBody();
        if (name.equals("_SyntaxTransformationCharacterSymbol:")) return read_SyntaxTransformationCharacterSymbolBody();
        if (name.equals("_SyntaxTransformationCharSymbol:")) return read_SyntaxTransformationCharSymbolBody();
        if (name.equals("_SyntaxTransformationCharacterInterval:")) return read_SyntaxTransformationCharacterIntervalBody();
        if (name.equals("_SyntaxTransformationLink:")) return read_SyntaxTransformationLinkBody();
        if (name.equals("_EllipsesAbstractNode:")) return read_EllipsesAbstractNodeBody();
        if (name.equals("_EllipsesCompilationUnit:")) return read_EllipsesCompilationUnitBody();
        if (name.equals("_EllipsesComponent:")) return read_EllipsesComponentBody();
        if (name.equals("_EllipsesApi:")) return read_EllipsesApiBody();
        if (name.equals("_EllipsesImport:")) return read_EllipsesImportBody();
        if (name.equals("_EllipsesImportedNames:")) return read_EllipsesImportedNamesBody();
        if (name.equals("_EllipsesImportStar:")) return read_EllipsesImportStarBody();
        if (name.equals("_EllipsesImportNames:")) return read_EllipsesImportNamesBody();
        if (name.equals("_EllipsesImportApi:")) return read_EllipsesImportApiBody();
        if (name.equals("_EllipsesAliasedSimpleName:")) return read_EllipsesAliasedSimpleNameBody();
        if (name.equals("_EllipsesAliasedAPIName:")) return read_EllipsesAliasedAPINameBody();
        if (name.equals("_EllipsesDecl:")) return read_EllipsesDeclBody();
        if (name.equals("_EllipsesTraitObjectDecl:")) return read_EllipsesTraitObjectDeclBody();
        if (name.equals("_EllipsesTraitDecl:")) return read_EllipsesTraitDeclBody();
        if (name.equals("_EllipsesObjectDecl:")) return read_EllipsesObjectDeclBody();
        if (name.equals("_EllipsesVarDecl:")) return read_EllipsesVarDeclBody();
        if (name.equals("_EllipsesFnDecl:")) return read_EllipsesFnDeclBody();
        if (name.equals("_Ellipses_RewriteFnOverloadDecl:")) return read_Ellipses_RewriteFnOverloadDeclBody();
        if (name.equals("_Ellipses_RewriteObjectExprDecl:")) return read_Ellipses_RewriteObjectExprDeclBody();
        if (name.equals("_Ellipses_RewriteFunctionalMethodDecl:")) return read_Ellipses_RewriteFunctionalMethodDeclBody();
        if (name.equals("_EllipsesDimUnitDecl:")) return read_EllipsesDimUnitDeclBody();
        if (name.equals("_EllipsesDimDecl:")) return read_EllipsesDimDeclBody();
        if (name.equals("_EllipsesUnitDecl:")) return read_EllipsesUnitDeclBody();
        if (name.equals("_EllipsesTestDecl:")) return read_EllipsesTestDeclBody();
        if (name.equals("_EllipsesPropertyDecl:")) return read_EllipsesPropertyDeclBody();
        if (name.equals("_EllipsesTypeAlias:")) return read_EllipsesTypeAliasBody();
        if (name.equals("_EllipsesGrammarDecl:")) return read_EllipsesGrammarDeclBody();
        if (name.equals("_EllipsesGrammarMemberDecl:")) return read_EllipsesGrammarMemberDeclBody();
        if (name.equals("_EllipsesNonterminalDecl:")) return read_EllipsesNonterminalDeclBody();
        if (name.equals("_EllipsesNonterminalDef:")) return read_EllipsesNonterminalDefBody();
        if (name.equals("_EllipsesNonterminalExtensionDef:")) return read_EllipsesNonterminalExtensionDefBody();
        if (name.equals("_EllipsesBinding:")) return read_EllipsesBindingBody();
        if (name.equals("_EllipsesLValue:")) return read_EllipsesLValueBody();
        if (name.equals("_EllipsesParam:")) return read_EllipsesParamBody();
        if (name.equals("_EllipsesExpr:")) return read_EllipsesExprBody();
        if (name.equals("_EllipsesDummyExpr:")) return read_EllipsesDummyExprBody();
        if (name.equals("_EllipsesTypeAnnotatedExpr:")) return read_EllipsesTypeAnnotatedExprBody();
        if (name.equals("_EllipsesAsExpr:")) return read_EllipsesAsExprBody();
        if (name.equals("_EllipsesAsIfExpr:")) return read_EllipsesAsIfExprBody();
        if (name.equals("_EllipsesAssignment:")) return read_EllipsesAssignmentBody();
        if (name.equals("_EllipsesBlock:")) return read_EllipsesBlockBody();
        if (name.equals("_EllipsesDo:")) return read_EllipsesDoBody();
        if (name.equals("_EllipsesCaseExpr:")) return read_EllipsesCaseExprBody();
        if (name.equals("_EllipsesIf:")) return read_EllipsesIfBody();
        if (name.equals("_EllipsesLabel:")) return read_EllipsesLabelBody();
        if (name.equals("_EllipsesAbstractObjectExpr:")) return read_EllipsesAbstractObjectExprBody();
        if (name.equals("_EllipsesObjectExpr:")) return read_EllipsesObjectExprBody();
        if (name.equals("_Ellipses_RewriteObjectExpr:")) return read_Ellipses_RewriteObjectExprBody();
        if (name.equals("_EllipsesTry:")) return read_EllipsesTryBody();
        if (name.equals("_EllipsesTupleExpr:")) return read_EllipsesTupleExprBody();
        if (name.equals("_EllipsesTypecase:")) return read_EllipsesTypecaseBody();
        if (name.equals("_EllipsesWhile:")) return read_EllipsesWhileBody();
        if (name.equals("_EllipsesFor:")) return read_EllipsesForBody();
        if (name.equals("_EllipsesBigOpApp:")) return read_EllipsesBigOpAppBody();
        if (name.equals("_EllipsesAccumulator:")) return read_EllipsesAccumulatorBody();
        if (name.equals("_EllipsesArrayComprehension:")) return read_EllipsesArrayComprehensionBody();
        if (name.equals("_EllipsesAtomicExpr:")) return read_EllipsesAtomicExprBody();
        if (name.equals("_EllipsesExit:")) return read_EllipsesExitBody();
        if (name.equals("_EllipsesSpawn:")) return read_EllipsesSpawnBody();
        if (name.equals("_EllipsesThrow:")) return read_EllipsesThrowBody();
        if (name.equals("_EllipsesTryAtomicExpr:")) return read_EllipsesTryAtomicExprBody();
        if (name.equals("_EllipsesFnExpr:")) return read_EllipsesFnExprBody();
        if (name.equals("_EllipsesLetExpr:")) return read_EllipsesLetExprBody();
        if (name.equals("_EllipsesLetFn:")) return read_EllipsesLetFnBody();
        if (name.equals("_EllipsesLocalVarDecl:")) return read_EllipsesLocalVarDeclBody();
        if (name.equals("_EllipsesSimpleExpr:")) return read_EllipsesSimpleExprBody();
        if (name.equals("_EllipsesSubscriptExpr:")) return read_EllipsesSubscriptExprBody();
        if (name.equals("_EllipsesPrimary:")) return read_EllipsesPrimaryBody();
        if (name.equals("_EllipsesLiteralExpr:")) return read_EllipsesLiteralExprBody();
        if (name.equals("_EllipsesNumberLiteralExpr:")) return read_EllipsesNumberLiteralExprBody();
        if (name.equals("_EllipsesFloatLiteralExpr:")) return read_EllipsesFloatLiteralExprBody();
        if (name.equals("_EllipsesIntLiteralExpr:")) return read_EllipsesIntLiteralExprBody();
        if (name.equals("_EllipsesCharLiteralExpr:")) return read_EllipsesCharLiteralExprBody();
        if (name.equals("_EllipsesStringLiteralExpr:")) return read_EllipsesStringLiteralExprBody();
        if (name.equals("_EllipsesVoidLiteralExpr:")) return read_EllipsesVoidLiteralExprBody();
        if (name.equals("_EllipsesBooleanLiteralExpr:")) return read_EllipsesBooleanLiteralExprBody();
        if (name.equals("_EllipsesVarRef:")) return read_EllipsesVarRefBody();
        if (name.equals("_EllipsesFieldRef:")) return read_EllipsesFieldRefBody();
        if (name.equals("_EllipsesFunctionalRef:")) return read_EllipsesFunctionalRefBody();
        if (name.equals("_EllipsesFnRef:")) return read_EllipsesFnRefBody();
        if (name.equals("_EllipsesOpRef:")) return read_EllipsesOpRefBody();
        if (name.equals("_Ellipses_RewriteFnRef:")) return read_Ellipses_RewriteFnRefBody();
        if (name.equals("_Ellipses_RewriteObjectExprRef:")) return read_Ellipses_RewriteObjectExprRefBody();
        if (name.equals("_EllipsesJuxt:")) return read_EllipsesJuxtBody();
        if (name.equals("_Ellipses_RewriteFnApp:")) return read_Ellipses_RewriteFnAppBody();
        if (name.equals("_EllipsesOpExpr:")) return read_EllipsesOpExprBody();
        if (name.equals("_EllipsesAmbiguousMultifixOpExpr:")) return read_EllipsesAmbiguousMultifixOpExprBody();
        if (name.equals("_EllipsesChainExpr:")) return read_EllipsesChainExprBody();
        if (name.equals("_EllipsesCoercionInvocation:")) return read_EllipsesCoercionInvocationBody();
        if (name.equals("_EllipsesTraitCoercionInvocation:")) return read_EllipsesTraitCoercionInvocationBody();
        if (name.equals("_EllipsesTupleCoercionInvocation:")) return read_EllipsesTupleCoercionInvocationBody();
        if (name.equals("_EllipsesArrowCoercionInvocation:")) return read_EllipsesArrowCoercionInvocationBody();
        if (name.equals("_EllipsesUnionCoercionInvocation:")) return read_EllipsesUnionCoercionInvocationBody();
        if (name.equals("_EllipsesMethodInvocation:")) return read_EllipsesMethodInvocationBody();
        if (name.equals("_EllipsesMathPrimary:")) return read_EllipsesMathPrimaryBody();
        if (name.equals("_EllipsesArrayExpr:")) return read_EllipsesArrayExprBody();
        if (name.equals("_EllipsesArrayElement:")) return read_EllipsesArrayElementBody();
        if (name.equals("_EllipsesArrayElements:")) return read_EllipsesArrayElementsBody();
        if (name.equals("_EllipsesType:")) return read_EllipsesTypeBody();
        if (name.equals("_EllipsesBaseType:")) return read_EllipsesBaseTypeBody();
        if (name.equals("_EllipsesAnyType:")) return read_EllipsesAnyTypeBody();
        if (name.equals("_EllipsesBottomType:")) return read_EllipsesBottomTypeBody();
        if (name.equals("_EllipsesUnknownType:")) return read_EllipsesUnknownTypeBody();
        if (name.equals("_EllipsesSelfType:")) return read_EllipsesSelfTypeBody();
        if (name.equals("_EllipsesTraitSelfType:")) return read_EllipsesTraitSelfTypeBody();
        if (name.equals("_EllipsesObjectExprType:")) return read_EllipsesObjectExprTypeBody();
        if (name.equals("_EllipsesNamedType:")) return read_EllipsesNamedTypeBody();
        if (name.equals("_Ellipses_InferenceVarType:")) return read_Ellipses_InferenceVarTypeBody();
        if (name.equals("_EllipsesVarType:")) return read_EllipsesVarTypeBody();
        if (name.equals("_EllipsesTraitType:")) return read_EllipsesTraitTypeBody();
        if (name.equals("_EllipsesAbbreviatedType:")) return read_EllipsesAbbreviatedTypeBody();
        if (name.equals("_EllipsesArrayType:")) return read_EllipsesArrayTypeBody();
        if (name.equals("_EllipsesMatrixType:")) return read_EllipsesMatrixTypeBody();
        if (name.equals("_EllipsesTaggedDimType:")) return read_EllipsesTaggedDimTypeBody();
        if (name.equals("_EllipsesTaggedUnitType:")) return read_EllipsesTaggedUnitTypeBody();
        if (name.equals("_EllipsesTupleType:")) return read_EllipsesTupleTypeBody();
        if (name.equals("_EllipsesArrowType:")) return read_EllipsesArrowTypeBody();
        if (name.equals("_EllipsesBoundType:")) return read_EllipsesBoundTypeBody();
        if (name.equals("_EllipsesIntersectionType:")) return read_EllipsesIntersectionTypeBody();
        if (name.equals("_EllipsesUnionType:")) return read_EllipsesUnionTypeBody();
        if (name.equals("_EllipsesFixedPointType:")) return read_EllipsesFixedPointTypeBody();
        if (name.equals("_EllipsesLabelType:")) return read_EllipsesLabelTypeBody();
        if (name.equals("_EllipsesDimExpr:")) return read_EllipsesDimExprBody();
        if (name.equals("_EllipsesDimBase:")) return read_EllipsesDimBaseBody();
        if (name.equals("_EllipsesDimRef:")) return read_EllipsesDimRefBody();
        if (name.equals("_EllipsesDimExponent:")) return read_EllipsesDimExponentBody();
        if (name.equals("_EllipsesDimUnaryOp:")) return read_EllipsesDimUnaryOpBody();
        if (name.equals("_EllipsesDimBinaryOp:")) return read_EllipsesDimBinaryOpBody();
        if (name.equals("_EllipsesPattern:")) return read_EllipsesPatternBody();
        if (name.equals("_EllipsesPatternArgs:")) return read_EllipsesPatternArgsBody();
        if (name.equals("_EllipsesPatternBinding:")) return read_EllipsesPatternBindingBody();
        if (name.equals("_EllipsesPlainPattern:")) return read_EllipsesPlainPatternBody();
        if (name.equals("_EllipsesTypePattern:")) return read_EllipsesTypePatternBody();
        if (name.equals("_EllipsesNestedPattern:")) return read_EllipsesNestedPatternBody();
        if (name.equals("_EllipsesStaticArg:")) return read_EllipsesStaticArgBody();
        if (name.equals("_EllipsesTypeArg:")) return read_EllipsesTypeArgBody();
        if (name.equals("_EllipsesIntArg:")) return read_EllipsesIntArgBody();
        if (name.equals("_EllipsesBoolArg:")) return read_EllipsesBoolArgBody();
        if (name.equals("_EllipsesOpArg:")) return read_EllipsesOpArgBody();
        if (name.equals("_EllipsesDimArg:")) return read_EllipsesDimArgBody();
        if (name.equals("_EllipsesUnitArg:")) return read_EllipsesUnitArgBody();
        if (name.equals("_EllipsesStaticExpr:")) return read_EllipsesStaticExprBody();
        if (name.equals("_EllipsesIntExpr:")) return read_EllipsesIntExprBody();
        if (name.equals("_EllipsesIntBase:")) return read_EllipsesIntBaseBody();
        if (name.equals("_EllipsesIntRef:")) return read_EllipsesIntRefBody();
        if (name.equals("_EllipsesIntBinaryOp:")) return read_EllipsesIntBinaryOpBody();
        if (name.equals("_EllipsesBoolExpr:")) return read_EllipsesBoolExprBody();
        if (name.equals("_EllipsesBoolBase:")) return read_EllipsesBoolBaseBody();
        if (name.equals("_EllipsesBoolRef:")) return read_EllipsesBoolRefBody();
        if (name.equals("_EllipsesBoolConstraint:")) return read_EllipsesBoolConstraintBody();
        if (name.equals("_EllipsesBoolUnaryOp:")) return read_EllipsesBoolUnaryOpBody();
        if (name.equals("_EllipsesBoolBinaryOp:")) return read_EllipsesBoolBinaryOpBody();
        if (name.equals("_EllipsesUnitExpr:")) return read_EllipsesUnitExprBody();
        if (name.equals("_EllipsesUnitRef:")) return read_EllipsesUnitRefBody();
        if (name.equals("_EllipsesUnitBinaryOp:")) return read_EllipsesUnitBinaryOpBody();
        if (name.equals("_EllipsesEffect:")) return read_EllipsesEffectBody();
        if (name.equals("_EllipsesWhereClause:")) return read_EllipsesWhereClauseBody();
        if (name.equals("_EllipsesWhereBinding:")) return read_EllipsesWhereBindingBody();
        if (name.equals("_EllipsesWhereConstraint:")) return read_EllipsesWhereConstraintBody();
        if (name.equals("_EllipsesWhereExtends:")) return read_EllipsesWhereExtendsBody();
        if (name.equals("_EllipsesWhereTypeAlias:")) return read_EllipsesWhereTypeAliasBody();
        if (name.equals("_EllipsesWhereCoerces:")) return read_EllipsesWhereCoercesBody();
        if (name.equals("_EllipsesWhereEquals:")) return read_EllipsesWhereEqualsBody();
        if (name.equals("_EllipsesUnitConstraint:")) return read_EllipsesUnitConstraintBody();
        if (name.equals("_EllipsesIntConstraint:")) return read_EllipsesIntConstraintBody();
        if (name.equals("_EllipsesBoolConstraintExpr:")) return read_EllipsesBoolConstraintExprBody();
        if (name.equals("_EllipsesContract:")) return read_EllipsesContractBody();
        if (name.equals("_EllipsesEnsuresClause:")) return read_EllipsesEnsuresClauseBody();
        if (name.equals("_EllipsesStaticParam:")) return read_EllipsesStaticParamBody();
        if (name.equals("_EllipsesName:")) return read_EllipsesNameBody();
        if (name.equals("_EllipsesAPIName:")) return read_EllipsesAPINameBody();
        if (name.equals("_EllipsesIdOrOpOrAnonymousName:")) return read_EllipsesIdOrOpOrAnonymousNameBody();
        if (name.equals("_EllipsesIdOrOp:")) return read_EllipsesIdOrOpBody();
        if (name.equals("_EllipsesId:")) return read_EllipsesIdBody();
        if (name.equals("_EllipsesOp:")) return read_EllipsesOpBody();
        if (name.equals("_EllipsesNamedOp:")) return read_EllipsesNamedOpBody();
        if (name.equals("_Ellipses_InferenceVarOp:")) return read_Ellipses_InferenceVarOpBody();
        if (name.equals("_EllipsesAnonymousName:")) return read_EllipsesAnonymousNameBody();
        if (name.equals("_EllipsesAnonymousFnName:")) return read_EllipsesAnonymousFnNameBody();
        if (name.equals("_EllipsesConstructorFnName:")) return read_EllipsesConstructorFnNameBody();
        if (name.equals("_EllipsesArrayComprehensionClause:")) return read_EllipsesArrayComprehensionClauseBody();
        if (name.equals("_EllipsesKeywordExpr:")) return read_EllipsesKeywordExprBody();
        if (name.equals("_EllipsesCaseClause:")) return read_EllipsesCaseClauseBody();
        if (name.equals("_EllipsesCatch:")) return read_EllipsesCatchBody();
        if (name.equals("_EllipsesCatchClause:")) return read_EllipsesCatchClauseBody();
        if (name.equals("_EllipsesIfClause:")) return read_EllipsesIfClauseBody();
        if (name.equals("_EllipsesTypecaseClause:")) return read_EllipsesTypecaseClauseBody();
        if (name.equals("_EllipsesExtentRange:")) return read_EllipsesExtentRangeBody();
        if (name.equals("_EllipsesGeneratorClause:")) return read_EllipsesGeneratorClauseBody();
        if (name.equals("_EllipsesKeywordType:")) return read_EllipsesKeywordTypeBody();
        if (name.equals("_EllipsesTraitTypeWhere:")) return read_EllipsesTraitTypeWhereBody();
        if (name.equals("_EllipsesIndices:")) return read_EllipsesIndicesBody();
        if (name.equals("_EllipsesMathItem:")) return read_EllipsesMathItemBody();
        if (name.equals("_EllipsesExprMI:")) return read_EllipsesExprMIBody();
        if (name.equals("_EllipsesParenthesisDelimitedMI:")) return read_EllipsesParenthesisDelimitedMIBody();
        if (name.equals("_EllipsesNonParenthesisDelimitedMI:")) return read_EllipsesNonParenthesisDelimitedMIBody();
        if (name.equals("_EllipsesNonExprMI:")) return read_EllipsesNonExprMIBody();
        if (name.equals("_EllipsesExponentiationMI:")) return read_EllipsesExponentiationMIBody();
        if (name.equals("_EllipsesSubscriptingMI:")) return read_EllipsesSubscriptingMIBody();
        if (name.equals("_EllipsesOverloading:")) return read_EllipsesOverloadingBody();
        if (name.equals("_EllipsesNonterminalHeader:")) return read_EllipsesNonterminalHeaderBody();
        if (name.equals("_EllipsesNonterminalParameter:")) return read_EllipsesNonterminalParameterBody();
        if (name.equals("_EllipsesSyntaxDecl:")) return read_EllipsesSyntaxDeclBody();
        if (name.equals("_EllipsesSyntaxDef:")) return read_EllipsesSyntaxDefBody();
        if (name.equals("_EllipsesSuperSyntaxDef:")) return read_EllipsesSuperSyntaxDefBody();
        if (name.equals("_EllipsesTransformerDecl:")) return read_EllipsesTransformerDeclBody();
        if (name.equals("_EllipsesPreTransformerDef:")) return read_EllipsesPreTransformerDefBody();
        if (name.equals("_EllipsesNamedTransformerDef:")) return read_EllipsesNamedTransformerDefBody();
        if (name.equals("_EllipsesTransformer:")) return read_EllipsesTransformerBody();
        if (name.equals("_EllipsesUnparsedTransformer:")) return read_EllipsesUnparsedTransformerBody();
        if (name.equals("_EllipsesNodeTransformer:")) return read_EllipsesNodeTransformerBody();
        if (name.equals("_EllipsesCaseTransformer:")) return read_EllipsesCaseTransformerBody();
        if (name.equals("_EllipsesCaseTransformerClause:")) return read_EllipsesCaseTransformerClauseBody();
        if (name.equals("_EllipsesSyntaxSymbol:")) return read_EllipsesSyntaxSymbolBody();
        if (name.equals("_EllipsesPrefixedSymbol:")) return read_EllipsesPrefixedSymbolBody();
        if (name.equals("_EllipsesOptionalSymbol:")) return read_EllipsesOptionalSymbolBody();
        if (name.equals("_EllipsesRepeatSymbol:")) return read_EllipsesRepeatSymbolBody();
        if (name.equals("_EllipsesRepeatOneOrMoreSymbol:")) return read_EllipsesRepeatOneOrMoreSymbolBody();
        if (name.equals("_EllipsesNoWhitespaceSymbol:")) return read_EllipsesNoWhitespaceSymbolBody();
        if (name.equals("_EllipsesGroupSymbol:")) return read_EllipsesGroupSymbolBody();
        if (name.equals("_EllipsesSpecialSymbol:")) return read_EllipsesSpecialSymbolBody();
        if (name.equals("_EllipsesAnyCharacterSymbol:")) return read_EllipsesAnyCharacterSymbolBody();
        if (name.equals("_EllipsesWhitespaceSymbol:")) return read_EllipsesWhitespaceSymbolBody();
        if (name.equals("_EllipsesTabSymbol:")) return read_EllipsesTabSymbolBody();
        if (name.equals("_EllipsesFormfeedSymbol:")) return read_EllipsesFormfeedSymbolBody();
        if (name.equals("_EllipsesCarriageReturnSymbol:")) return read_EllipsesCarriageReturnSymbolBody();
        if (name.equals("_EllipsesBackspaceSymbol:")) return read_EllipsesBackspaceSymbolBody();
        if (name.equals("_EllipsesNewlineSymbol:")) return read_EllipsesNewlineSymbolBody();
        if (name.equals("_EllipsesBreaklineSymbol:")) return read_EllipsesBreaklineSymbolBody();
        if (name.equals("_EllipsesItemSymbol:")) return read_EllipsesItemSymbolBody();
        if (name.equals("_EllipsesNonterminalSymbol:")) return read_EllipsesNonterminalSymbolBody();
        if (name.equals("_EllipsesKeywordSymbol:")) return read_EllipsesKeywordSymbolBody();
        if (name.equals("_EllipsesTokenSymbol:")) return read_EllipsesTokenSymbolBody();
        if (name.equals("_EllipsesNotPredicateSymbol:")) return read_EllipsesNotPredicateSymbolBody();
        if (name.equals("_EllipsesAndPredicateSymbol:")) return read_EllipsesAndPredicateSymbolBody();
        if (name.equals("_EllipsesCharacterClassSymbol:")) return read_EllipsesCharacterClassSymbolBody();
        if (name.equals("_EllipsesCharacterSymbol:")) return read_EllipsesCharacterSymbolBody();
        if (name.equals("_EllipsesCharSymbol:")) return read_EllipsesCharSymbolBody();
        if (name.equals("_EllipsesCharacterInterval:")) return read_EllipsesCharacterIntervalBody();
        if (name.equals("_EllipsesLink:")) return read_EllipsesLinkBody();
        if (name.equals("TemplateGapAbstractNode:")) return readTemplateGapAbstractNodeBody();
        if (name.equals("TemplateGapCompilationUnit:")) return readTemplateGapCompilationUnitBody();
        if (name.equals("TemplateGapComponent:")) return readTemplateGapComponentBody();
        if (name.equals("TemplateGapApi:")) return readTemplateGapApiBody();
        if (name.equals("TemplateGapImport:")) return readTemplateGapImportBody();
        if (name.equals("TemplateGapImportedNames:")) return readTemplateGapImportedNamesBody();
        if (name.equals("TemplateGapImportStar:")) return readTemplateGapImportStarBody();
        if (name.equals("TemplateGapImportNames:")) return readTemplateGapImportNamesBody();
        if (name.equals("TemplateGapImportApi:")) return readTemplateGapImportApiBody();
        if (name.equals("TemplateGapAliasedSimpleName:")) return readTemplateGapAliasedSimpleNameBody();
        if (name.equals("TemplateGapAliasedAPIName:")) return readTemplateGapAliasedAPINameBody();
        if (name.equals("TemplateGapDecl:")) return readTemplateGapDeclBody();
        if (name.equals("TemplateGapTraitObjectDecl:")) return readTemplateGapTraitObjectDeclBody();
        if (name.equals("TemplateGapTraitDecl:")) return readTemplateGapTraitDeclBody();
        if (name.equals("TemplateGapObjectDecl:")) return readTemplateGapObjectDeclBody();
        if (name.equals("TemplateGapVarDecl:")) return readTemplateGapVarDeclBody();
        if (name.equals("TemplateGapFnDecl:")) return readTemplateGapFnDeclBody();
        if (name.equals("TemplateGap_RewriteFnOverloadDecl:")) return readTemplateGap_RewriteFnOverloadDeclBody();
        if (name.equals("TemplateGap_RewriteObjectExprDecl:")) return readTemplateGap_RewriteObjectExprDeclBody();
        if (name.equals("TemplateGap_RewriteFunctionalMethodDecl:")) return readTemplateGap_RewriteFunctionalMethodDeclBody();
        if (name.equals("TemplateGapDimUnitDecl:")) return readTemplateGapDimUnitDeclBody();
        if (name.equals("TemplateGapDimDecl:")) return readTemplateGapDimDeclBody();
        if (name.equals("TemplateGapUnitDecl:")) return readTemplateGapUnitDeclBody();
        if (name.equals("TemplateGapTestDecl:")) return readTemplateGapTestDeclBody();
        if (name.equals("TemplateGapPropertyDecl:")) return readTemplateGapPropertyDeclBody();
        if (name.equals("TemplateGapTypeAlias:")) return readTemplateGapTypeAliasBody();
        if (name.equals("TemplateGapGrammarDecl:")) return readTemplateGapGrammarDeclBody();
        if (name.equals("TemplateGapGrammarMemberDecl:")) return readTemplateGapGrammarMemberDeclBody();
        if (name.equals("TemplateGapNonterminalDecl:")) return readTemplateGapNonterminalDeclBody();
        if (name.equals("TemplateGapNonterminalDef:")) return readTemplateGapNonterminalDefBody();
        if (name.equals("TemplateGapNonterminalExtensionDef:")) return readTemplateGapNonterminalExtensionDefBody();
        if (name.equals("TemplateGapBinding:")) return readTemplateGapBindingBody();
        if (name.equals("TemplateGapLValue:")) return readTemplateGapLValueBody();
        if (name.equals("TemplateGapParam:")) return readTemplateGapParamBody();
        if (name.equals("TemplateGapExpr:")) return readTemplateGapExprBody();
        if (name.equals("TemplateGapDummyExpr:")) return readTemplateGapDummyExprBody();
        if (name.equals("TemplateGapTypeAnnotatedExpr:")) return readTemplateGapTypeAnnotatedExprBody();
        if (name.equals("TemplateGapAsExpr:")) return readTemplateGapAsExprBody();
        if (name.equals("TemplateGapAsIfExpr:")) return readTemplateGapAsIfExprBody();
        if (name.equals("TemplateGapAssignment:")) return readTemplateGapAssignmentBody();
        if (name.equals("TemplateGapBlock:")) return readTemplateGapBlockBody();
        if (name.equals("TemplateGapDo:")) return readTemplateGapDoBody();
        if (name.equals("TemplateGapCaseExpr:")) return readTemplateGapCaseExprBody();
        if (name.equals("TemplateGapIf:")) return readTemplateGapIfBody();
        if (name.equals("TemplateGapLabel:")) return readTemplateGapLabelBody();
        if (name.equals("TemplateGapAbstractObjectExpr:")) return readTemplateGapAbstractObjectExprBody();
        if (name.equals("TemplateGapObjectExpr:")) return readTemplateGapObjectExprBody();
        if (name.equals("TemplateGap_RewriteObjectExpr:")) return readTemplateGap_RewriteObjectExprBody();
        if (name.equals("TemplateGapTry:")) return readTemplateGapTryBody();
        if (name.equals("TemplateGapTupleExpr:")) return readTemplateGapTupleExprBody();
        if (name.equals("TemplateGapTypecase:")) return readTemplateGapTypecaseBody();
        if (name.equals("TemplateGapWhile:")) return readTemplateGapWhileBody();
        if (name.equals("TemplateGapFor:")) return readTemplateGapForBody();
        if (name.equals("TemplateGapBigOpApp:")) return readTemplateGapBigOpAppBody();
        if (name.equals("TemplateGapAccumulator:")) return readTemplateGapAccumulatorBody();
        if (name.equals("TemplateGapArrayComprehension:")) return readTemplateGapArrayComprehensionBody();
        if (name.equals("TemplateGapAtomicExpr:")) return readTemplateGapAtomicExprBody();
        if (name.equals("TemplateGapExit:")) return readTemplateGapExitBody();
        if (name.equals("TemplateGapSpawn:")) return readTemplateGapSpawnBody();
        if (name.equals("TemplateGapThrow:")) return readTemplateGapThrowBody();
        if (name.equals("TemplateGapTryAtomicExpr:")) return readTemplateGapTryAtomicExprBody();
        if (name.equals("TemplateGapFnExpr:")) return readTemplateGapFnExprBody();
        if (name.equals("TemplateGapLetExpr:")) return readTemplateGapLetExprBody();
        if (name.equals("TemplateGapLetFn:")) return readTemplateGapLetFnBody();
        if (name.equals("TemplateGapLocalVarDecl:")) return readTemplateGapLocalVarDeclBody();
        if (name.equals("TemplateGapSimpleExpr:")) return readTemplateGapSimpleExprBody();
        if (name.equals("TemplateGapSubscriptExpr:")) return readTemplateGapSubscriptExprBody();
        if (name.equals("TemplateGapPrimary:")) return readTemplateGapPrimaryBody();
        if (name.equals("TemplateGapLiteralExpr:")) return readTemplateGapLiteralExprBody();
        if (name.equals("TemplateGapNumberLiteralExpr:")) return readTemplateGapNumberLiteralExprBody();
        if (name.equals("TemplateGapFloatLiteralExpr:")) return readTemplateGapFloatLiteralExprBody();
        if (name.equals("TemplateGapIntLiteralExpr:")) return readTemplateGapIntLiteralExprBody();
        if (name.equals("TemplateGapCharLiteralExpr:")) return readTemplateGapCharLiteralExprBody();
        if (name.equals("TemplateGapStringLiteralExpr:")) return readTemplateGapStringLiteralExprBody();
        if (name.equals("TemplateGapVoidLiteralExpr:")) return readTemplateGapVoidLiteralExprBody();
        if (name.equals("TemplateGapBooleanLiteralExpr:")) return readTemplateGapBooleanLiteralExprBody();
        if (name.equals("TemplateGapVarRef:")) return readTemplateGapVarRefBody();
        if (name.equals("TemplateGapFieldRef:")) return readTemplateGapFieldRefBody();
        if (name.equals("TemplateGapFunctionalRef:")) return readTemplateGapFunctionalRefBody();
        if (name.equals("TemplateGapFnRef:")) return readTemplateGapFnRefBody();
        if (name.equals("TemplateGapOpRef:")) return readTemplateGapOpRefBody();
        if (name.equals("TemplateGap_RewriteFnRef:")) return readTemplateGap_RewriteFnRefBody();
        if (name.equals("TemplateGap_RewriteObjectExprRef:")) return readTemplateGap_RewriteObjectExprRefBody();
        if (name.equals("TemplateGapJuxt:")) return readTemplateGapJuxtBody();
        if (name.equals("TemplateGap_RewriteFnApp:")) return readTemplateGap_RewriteFnAppBody();
        if (name.equals("TemplateGapOpExpr:")) return readTemplateGapOpExprBody();
        if (name.equals("TemplateGapAmbiguousMultifixOpExpr:")) return readTemplateGapAmbiguousMultifixOpExprBody();
        if (name.equals("TemplateGapChainExpr:")) return readTemplateGapChainExprBody();
        if (name.equals("TemplateGapCoercionInvocation:")) return readTemplateGapCoercionInvocationBody();
        if (name.equals("TemplateGapTraitCoercionInvocation:")) return readTemplateGapTraitCoercionInvocationBody();
        if (name.equals("TemplateGapTupleCoercionInvocation:")) return readTemplateGapTupleCoercionInvocationBody();
        if (name.equals("TemplateGapArrowCoercionInvocation:")) return readTemplateGapArrowCoercionInvocationBody();
        if (name.equals("TemplateGapUnionCoercionInvocation:")) return readTemplateGapUnionCoercionInvocationBody();
        if (name.equals("TemplateGapMethodInvocation:")) return readTemplateGapMethodInvocationBody();
        if (name.equals("TemplateGapMathPrimary:")) return readTemplateGapMathPrimaryBody();
        if (name.equals("TemplateGapArrayExpr:")) return readTemplateGapArrayExprBody();
        if (name.equals("TemplateGapArrayElement:")) return readTemplateGapArrayElementBody();
        if (name.equals("TemplateGapArrayElements:")) return readTemplateGapArrayElementsBody();
        if (name.equals("TemplateGapType:")) return readTemplateGapTypeBody();
        if (name.equals("TemplateGapBaseType:")) return readTemplateGapBaseTypeBody();
        if (name.equals("TemplateGapAnyType:")) return readTemplateGapAnyTypeBody();
        if (name.equals("TemplateGapBottomType:")) return readTemplateGapBottomTypeBody();
        if (name.equals("TemplateGapUnknownType:")) return readTemplateGapUnknownTypeBody();
        if (name.equals("TemplateGapSelfType:")) return readTemplateGapSelfTypeBody();
        if (name.equals("TemplateGapTraitSelfType:")) return readTemplateGapTraitSelfTypeBody();
        if (name.equals("TemplateGapObjectExprType:")) return readTemplateGapObjectExprTypeBody();
        if (name.equals("TemplateGapNamedType:")) return readTemplateGapNamedTypeBody();
        if (name.equals("TemplateGap_InferenceVarType:")) return readTemplateGap_InferenceVarTypeBody();
        if (name.equals("TemplateGapVarType:")) return readTemplateGapVarTypeBody();
        if (name.equals("TemplateGapTraitType:")) return readTemplateGapTraitTypeBody();
        if (name.equals("TemplateGapAbbreviatedType:")) return readTemplateGapAbbreviatedTypeBody();
        if (name.equals("TemplateGapArrayType:")) return readTemplateGapArrayTypeBody();
        if (name.equals("TemplateGapMatrixType:")) return readTemplateGapMatrixTypeBody();
        if (name.equals("TemplateGapTaggedDimType:")) return readTemplateGapTaggedDimTypeBody();
        if (name.equals("TemplateGapTaggedUnitType:")) return readTemplateGapTaggedUnitTypeBody();
        if (name.equals("TemplateGapTupleType:")) return readTemplateGapTupleTypeBody();
        if (name.equals("TemplateGapArrowType:")) return readTemplateGapArrowTypeBody();
        if (name.equals("TemplateGapBoundType:")) return readTemplateGapBoundTypeBody();
        if (name.equals("TemplateGapIntersectionType:")) return readTemplateGapIntersectionTypeBody();
        if (name.equals("TemplateGapUnionType:")) return readTemplateGapUnionTypeBody();
        if (name.equals("TemplateGapFixedPointType:")) return readTemplateGapFixedPointTypeBody();
        if (name.equals("TemplateGapLabelType:")) return readTemplateGapLabelTypeBody();
        if (name.equals("TemplateGapDimExpr:")) return readTemplateGapDimExprBody();
        if (name.equals("TemplateGapDimBase:")) return readTemplateGapDimBaseBody();
        if (name.equals("TemplateGapDimRef:")) return readTemplateGapDimRefBody();
        if (name.equals("TemplateGapDimExponent:")) return readTemplateGapDimExponentBody();
        if (name.equals("TemplateGapDimUnaryOp:")) return readTemplateGapDimUnaryOpBody();
        if (name.equals("TemplateGapDimBinaryOp:")) return readTemplateGapDimBinaryOpBody();
        if (name.equals("TemplateGapPattern:")) return readTemplateGapPatternBody();
        if (name.equals("TemplateGapPatternArgs:")) return readTemplateGapPatternArgsBody();
        if (name.equals("TemplateGapPatternBinding:")) return readTemplateGapPatternBindingBody();
        if (name.equals("TemplateGapPlainPattern:")) return readTemplateGapPlainPatternBody();
        if (name.equals("TemplateGapTypePattern:")) return readTemplateGapTypePatternBody();
        if (name.equals("TemplateGapNestedPattern:")) return readTemplateGapNestedPatternBody();
        if (name.equals("TemplateGapStaticArg:")) return readTemplateGapStaticArgBody();
        if (name.equals("TemplateGapTypeArg:")) return readTemplateGapTypeArgBody();
        if (name.equals("TemplateGapIntArg:")) return readTemplateGapIntArgBody();
        if (name.equals("TemplateGapBoolArg:")) return readTemplateGapBoolArgBody();
        if (name.equals("TemplateGapOpArg:")) return readTemplateGapOpArgBody();
        if (name.equals("TemplateGapDimArg:")) return readTemplateGapDimArgBody();
        if (name.equals("TemplateGapUnitArg:")) return readTemplateGapUnitArgBody();
        if (name.equals("TemplateGapStaticExpr:")) return readTemplateGapStaticExprBody();
        if (name.equals("TemplateGapIntExpr:")) return readTemplateGapIntExprBody();
        if (name.equals("TemplateGapIntBase:")) return readTemplateGapIntBaseBody();
        if (name.equals("TemplateGapIntRef:")) return readTemplateGapIntRefBody();
        if (name.equals("TemplateGapIntBinaryOp:")) return readTemplateGapIntBinaryOpBody();
        if (name.equals("TemplateGapBoolExpr:")) return readTemplateGapBoolExprBody();
        if (name.equals("TemplateGapBoolBase:")) return readTemplateGapBoolBaseBody();
        if (name.equals("TemplateGapBoolRef:")) return readTemplateGapBoolRefBody();
        if (name.equals("TemplateGapBoolConstraint:")) return readTemplateGapBoolConstraintBody();
        if (name.equals("TemplateGapBoolUnaryOp:")) return readTemplateGapBoolUnaryOpBody();
        if (name.equals("TemplateGapBoolBinaryOp:")) return readTemplateGapBoolBinaryOpBody();
        if (name.equals("TemplateGapUnitExpr:")) return readTemplateGapUnitExprBody();
        if (name.equals("TemplateGapUnitRef:")) return readTemplateGapUnitRefBody();
        if (name.equals("TemplateGapUnitBinaryOp:")) return readTemplateGapUnitBinaryOpBody();
        if (name.equals("TemplateGapEffect:")) return readTemplateGapEffectBody();
        if (name.equals("TemplateGapWhereClause:")) return readTemplateGapWhereClauseBody();
        if (name.equals("TemplateGapWhereBinding:")) return readTemplateGapWhereBindingBody();
        if (name.equals("TemplateGapWhereConstraint:")) return readTemplateGapWhereConstraintBody();
        if (name.equals("TemplateGapWhereExtends:")) return readTemplateGapWhereExtendsBody();
        if (name.equals("TemplateGapWhereTypeAlias:")) return readTemplateGapWhereTypeAliasBody();
        if (name.equals("TemplateGapWhereCoerces:")) return readTemplateGapWhereCoercesBody();
        if (name.equals("TemplateGapWhereEquals:")) return readTemplateGapWhereEqualsBody();
        if (name.equals("TemplateGapUnitConstraint:")) return readTemplateGapUnitConstraintBody();
        if (name.equals("TemplateGapIntConstraint:")) return readTemplateGapIntConstraintBody();
        if (name.equals("TemplateGapBoolConstraintExpr:")) return readTemplateGapBoolConstraintExprBody();
        if (name.equals("TemplateGapContract:")) return readTemplateGapContractBody();
        if (name.equals("TemplateGapEnsuresClause:")) return readTemplateGapEnsuresClauseBody();
        if (name.equals("TemplateGapStaticParam:")) return readTemplateGapStaticParamBody();
        if (name.equals("TemplateGapName:")) return readTemplateGapNameBody();
        if (name.equals("TemplateGapAPIName:")) return readTemplateGapAPINameBody();
        if (name.equals("TemplateGapIdOrOpOrAnonymousName:")) return readTemplateGapIdOrOpOrAnonymousNameBody();
        if (name.equals("TemplateGapIdOrOp:")) return readTemplateGapIdOrOpBody();
        if (name.equals("TemplateGapId:")) return readTemplateGapIdBody();
        if (name.equals("TemplateGapOp:")) return readTemplateGapOpBody();
        if (name.equals("TemplateGapNamedOp:")) return readTemplateGapNamedOpBody();
        if (name.equals("TemplateGap_InferenceVarOp:")) return readTemplateGap_InferenceVarOpBody();
        if (name.equals("TemplateGapAnonymousName:")) return readTemplateGapAnonymousNameBody();
        if (name.equals("TemplateGapAnonymousFnName:")) return readTemplateGapAnonymousFnNameBody();
        if (name.equals("TemplateGapConstructorFnName:")) return readTemplateGapConstructorFnNameBody();
        if (name.equals("TemplateGapArrayComprehensionClause:")) return readTemplateGapArrayComprehensionClauseBody();
        if (name.equals("TemplateGapKeywordExpr:")) return readTemplateGapKeywordExprBody();
        if (name.equals("TemplateGapCaseClause:")) return readTemplateGapCaseClauseBody();
        if (name.equals("TemplateGapCatch:")) return readTemplateGapCatchBody();
        if (name.equals("TemplateGapCatchClause:")) return readTemplateGapCatchClauseBody();
        if (name.equals("TemplateGapIfClause:")) return readTemplateGapIfClauseBody();
        if (name.equals("TemplateGapTypecaseClause:")) return readTemplateGapTypecaseClauseBody();
        if (name.equals("TemplateGapExtentRange:")) return readTemplateGapExtentRangeBody();
        if (name.equals("TemplateGapGeneratorClause:")) return readTemplateGapGeneratorClauseBody();
        if (name.equals("TemplateGapKeywordType:")) return readTemplateGapKeywordTypeBody();
        if (name.equals("TemplateGapTraitTypeWhere:")) return readTemplateGapTraitTypeWhereBody();
        if (name.equals("TemplateGapIndices:")) return readTemplateGapIndicesBody();
        if (name.equals("TemplateGapMathItem:")) return readTemplateGapMathItemBody();
        if (name.equals("TemplateGapExprMI:")) return readTemplateGapExprMIBody();
        if (name.equals("TemplateGapParenthesisDelimitedMI:")) return readTemplateGapParenthesisDelimitedMIBody();
        if (name.equals("TemplateGapNonParenthesisDelimitedMI:")) return readTemplateGapNonParenthesisDelimitedMIBody();
        if (name.equals("TemplateGapNonExprMI:")) return readTemplateGapNonExprMIBody();
        if (name.equals("TemplateGapExponentiationMI:")) return readTemplateGapExponentiationMIBody();
        if (name.equals("TemplateGapSubscriptingMI:")) return readTemplateGapSubscriptingMIBody();
        if (name.equals("TemplateGapOverloading:")) return readTemplateGapOverloadingBody();
        if (name.equals("TemplateGapNonterminalHeader:")) return readTemplateGapNonterminalHeaderBody();
        if (name.equals("TemplateGapNonterminalParameter:")) return readTemplateGapNonterminalParameterBody();
        if (name.equals("TemplateGapSyntaxDecl:")) return readTemplateGapSyntaxDeclBody();
        if (name.equals("TemplateGapSyntaxDef:")) return readTemplateGapSyntaxDefBody();
        if (name.equals("TemplateGapSuperSyntaxDef:")) return readTemplateGapSuperSyntaxDefBody();
        if (name.equals("TemplateGapTransformerDecl:")) return readTemplateGapTransformerDeclBody();
        if (name.equals("TemplateGapPreTransformerDef:")) return readTemplateGapPreTransformerDefBody();
        if (name.equals("TemplateGapNamedTransformerDef:")) return readTemplateGapNamedTransformerDefBody();
        if (name.equals("TemplateGapTransformer:")) return readTemplateGapTransformerBody();
        if (name.equals("TemplateGapUnparsedTransformer:")) return readTemplateGapUnparsedTransformerBody();
        if (name.equals("TemplateGapNodeTransformer:")) return readTemplateGapNodeTransformerBody();
        if (name.equals("TemplateGapCaseTransformer:")) return readTemplateGapCaseTransformerBody();
        if (name.equals("TemplateGapCaseTransformerClause:")) return readTemplateGapCaseTransformerClauseBody();
        if (name.equals("TemplateGapSyntaxSymbol:")) return readTemplateGapSyntaxSymbolBody();
        if (name.equals("TemplateGapPrefixedSymbol:")) return readTemplateGapPrefixedSymbolBody();
        if (name.equals("TemplateGapOptionalSymbol:")) return readTemplateGapOptionalSymbolBody();
        if (name.equals("TemplateGapRepeatSymbol:")) return readTemplateGapRepeatSymbolBody();
        if (name.equals("TemplateGapRepeatOneOrMoreSymbol:")) return readTemplateGapRepeatOneOrMoreSymbolBody();
        if (name.equals("TemplateGapNoWhitespaceSymbol:")) return readTemplateGapNoWhitespaceSymbolBody();
        if (name.equals("TemplateGapGroupSymbol:")) return readTemplateGapGroupSymbolBody();
        if (name.equals("TemplateGapSpecialSymbol:")) return readTemplateGapSpecialSymbolBody();
        if (name.equals("TemplateGapAnyCharacterSymbol:")) return readTemplateGapAnyCharacterSymbolBody();
        if (name.equals("TemplateGapWhitespaceSymbol:")) return readTemplateGapWhitespaceSymbolBody();
        if (name.equals("TemplateGapTabSymbol:")) return readTemplateGapTabSymbolBody();
        if (name.equals("TemplateGapFormfeedSymbol:")) return readTemplateGapFormfeedSymbolBody();
        if (name.equals("TemplateGapCarriageReturnSymbol:")) return readTemplateGapCarriageReturnSymbolBody();
        if (name.equals("TemplateGapBackspaceSymbol:")) return readTemplateGapBackspaceSymbolBody();
        if (name.equals("TemplateGapNewlineSymbol:")) return readTemplateGapNewlineSymbolBody();
        if (name.equals("TemplateGapBreaklineSymbol:")) return readTemplateGapBreaklineSymbolBody();
        if (name.equals("TemplateGapItemSymbol:")) return readTemplateGapItemSymbolBody();
        if (name.equals("TemplateGapNonterminalSymbol:")) return readTemplateGapNonterminalSymbolBody();
        if (name.equals("TemplateGapKeywordSymbol:")) return readTemplateGapKeywordSymbolBody();
        if (name.equals("TemplateGapTokenSymbol:")) return readTemplateGapTokenSymbolBody();
        if (name.equals("TemplateGapNotPredicateSymbol:")) return readTemplateGapNotPredicateSymbolBody();
        if (name.equals("TemplateGapAndPredicateSymbol:")) return readTemplateGapAndPredicateSymbolBody();
        if (name.equals("TemplateGapCharacterClassSymbol:")) return readTemplateGapCharacterClassSymbolBody();
        if (name.equals("TemplateGapCharacterSymbol:")) return readTemplateGapCharacterSymbolBody();
        if (name.equals("TemplateGapCharSymbol:")) return readTemplateGapCharSymbolBody();
        if (name.equals("TemplateGapCharacterInterval:")) return readTemplateGapCharacterIntervalBody();
        if (name.equals("TemplateGapLink:")) return readTemplateGapLinkBody();
        throw error();
    }

    private Component readComponentBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        APIName read_name = (APIName) readNode();
        readFieldDelim("imports = ");
        List<Import> read_imports = readListOfImport();
        readFieldDelim("decls = ");
        List<Decl> read_decls = readListOfDecl();
        readFieldDelim("comprises = ");
        List<APIName> read_comprises = readListOfAPIName();
        readFieldDelim("_native = ");
        boolean read__native = readBoolean();
        readFieldDelim("exports = ");
        List<APIName> read_exports = readListOfAPIName();
        return new Component(read_info, read_name, read_imports, read_decls, read_comprises, read__native, read_exports);
    }

    private Api readApiBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        APIName read_name = (APIName) readNode();
        readFieldDelim("imports = ");
        List<Import> read_imports = readListOfImport();
        readFieldDelim("decls = ");
        List<Decl> read_decls = readListOfDecl();
        readFieldDelim("comprises = ");
        List<APIName> read_comprises = readListOfAPIName();
        return new Api(read_info, read_name, read_imports, read_decls, read_comprises);
    }

    private ImportStar readImportStarBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("foreignLanguage = ");
        Option<String> read_foreignLanguage = readOptionOfString();
        readFieldDelim("apiName = ");
        APIName read_apiName = (APIName) readNode();
        readFieldDelim("exceptNames = ");
        List<IdOrOpOrAnonymousName> read_exceptNames = readListOfIdOrOpOrAnonymousName();
        return new ImportStar(read_info, read_foreignLanguage, read_apiName, read_exceptNames);
    }

    private ImportNames readImportNamesBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("foreignLanguage = ");
        Option<String> read_foreignLanguage = readOptionOfString();
        readFieldDelim("apiName = ");
        APIName read_apiName = (APIName) readNode();
        readFieldDelim("aliasedNames = ");
        List<AliasedSimpleName> read_aliasedNames = readListOfAliasedSimpleName();
        return new ImportNames(read_info, read_foreignLanguage, read_apiName, read_aliasedNames);
    }

    private ImportApi readImportApiBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("foreignLanguage = ");
        Option<String> read_foreignLanguage = readOptionOfString();
        readFieldDelim("apis = ");
        List<AliasedAPIName> read_apis = readListOfAliasedAPIName();
        return new ImportApi(read_info, read_foreignLanguage, read_apis);
    }

    private AliasedSimpleName readAliasedSimpleNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        IdOrOpOrAnonymousName read_name = (IdOrOpOrAnonymousName) readNode();
        readFieldDelim("alias = ");
        Option<IdOrOpOrAnonymousName> read_alias = readOptionOfIdOrOpOrAnonymousName();
        return new AliasedSimpleName(read_info, read_name, read_alias);
    }

    private AliasedAPIName readAliasedAPINameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("apiName = ");
        APIName read_apiName = (APIName) readNode();
        readFieldDelim("alias = ");
        Option<Id> read_alias = readOptionOfId();
        return new AliasedAPIName(read_info, read_apiName, read_alias);
    }

    private TraitDecl readTraitDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("header = ");
        TraitTypeHeader read_header = (TraitTypeHeader) readNode();
        readFieldDelim("selfType = ");
        Option<SelfType> read_selfType = readOptionOfSelfType();
        readFieldDelim("excludesClause = ");
        List<BaseType> read_excludesClause = readListOfBaseType();
        readFieldDelim("comprisesClause = ");
        Option<List<NamedType>> read_comprisesClause = readOptionOfListOfNamedType();
        readFieldDelim("comprisesEllipses = ");
        boolean read_comprisesEllipses = readBoolean();
        return new TraitDecl(read_info, read_header, read_selfType, read_excludesClause, read_comprisesClause, read_comprisesEllipses);
    }

    private ObjectDecl readObjectDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("header = ");
        TraitTypeHeader read_header = (TraitTypeHeader) readNode();
        readFieldDelim("selfType = ");
        Option<SelfType> read_selfType = readOptionOfSelfType();
        return new ObjectDecl(read_info, read_header, read_selfType);
    }

    private VarDecl readVarDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("lhs = ");
        List<LValue> read_lhs = readListOfLValue();
        readFieldDelim("init = ");
        Option<Expr> read_init = readOptionOfExpr();
        return new VarDecl(read_info, read_lhs, read_init);
    }

    private FnDecl readFnDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("header = ");
        FnHeader read_header = (FnHeader) readNode();
        readFieldDelim("unambiguousName = ");
        IdOrOp read_unambiguousName = (IdOrOp) readNode();
        readFieldDelim("body = ");
        Option<Expr> read_body = readOptionOfExpr();
        readFieldDelim("implementsUnambiguousName = ");
        Option<IdOrOp> read_implementsUnambiguousName = readOptionOfIdOrOp();
        return new FnDecl(read_info, read_header, read_unambiguousName, read_body, read_implementsUnambiguousName);
    }

    private _RewriteFnOverloadDecl read_RewriteFnOverloadDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        IdOrOp read_name = (IdOrOp) readNode();
        readFieldDelim("fns = ");
        List<IdOrOp> read_fns = readListOfIdOrOp();
        readFieldDelim("type = ");
        Option<Type> read_type = readOptionOfType();
        return new _RewriteFnOverloadDecl(read_info, read_name, read_fns, read_type);
    }

    private _RewriteObjectExprDecl read_RewriteObjectExprDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("objectExprs = ");
        List<_RewriteObjectExpr> read_objectExprs = readListOf_RewriteObjectExpr();
        return new _RewriteObjectExprDecl(read_info, read_objectExprs);
    }

    private _RewriteFunctionalMethodDecl read_RewriteFunctionalMethodDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("functionalMethodNames = ");
        List<String> read_functionalMethodNames = readListOfString();
        return new _RewriteFunctionalMethodDecl(read_info, read_functionalMethodNames);
    }

    private DimDecl readDimDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("dimId = ");
        Id read_dimId = (Id) readNode();
        readFieldDelim("derived = ");
        Option<Type> read_derived = readOptionOfType();
        readFieldDelim("defaultId = ");
        Option<Id> read_defaultId = readOptionOfId();
        return new DimDecl(read_info, read_dimId, read_derived, read_defaultId);
    }

    private UnitDecl readUnitDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("si_unit = ");
        boolean read_si_unit = readBoolean();
        readFieldDelim("units = ");
        List<Id> read_units = readListOfId();
        readFieldDelim("dimType = ");
        Option<Type> read_dimType = readOptionOfType();
        readFieldDelim("defExpr = ");
        Option<Expr> read_defExpr = readOptionOfExpr();
        return new UnitDecl(read_info, read_si_unit, read_units, read_dimType, read_defExpr);
    }

    private TestDecl readTestDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("gens = ");
        List<GeneratorClause> read_gens = readListOfGeneratorClause();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        return new TestDecl(read_info, read_name, read_gens, read_expr);
    }

    private PropertyDecl readPropertyDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Option<Id> read_name = readOptionOfId();
        readFieldDelim("params = ");
        List<Param> read_params = readListOfParam();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        return new PropertyDecl(read_info, read_name, read_params, read_expr);
    }

    private TypeAlias readTypeAliasBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("staticParams = ");
        List<StaticParam> read_staticParams = readListOfStaticParam();
        readFieldDelim("typeDef = ");
        Type read_typeDef = (Type) readNode();
        return new TypeAlias(read_info, read_name, read_staticParams, read_typeDef);
    }

    private GrammarDecl readGrammarDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("extendsClause = ");
        List<Id> read_extendsClause = readListOfId();
        readFieldDelim("members = ");
        List<GrammarMemberDecl> read_members = readListOfGrammarMemberDecl();
        readFieldDelim("transformers = ");
        List<TransformerDecl> read_transformers = readListOfTransformerDecl();
        readFieldDelim("nativeDef = ");
        boolean read_nativeDef = readBoolean();
        return new GrammarDecl(read_info, read_name, read_extendsClause, read_members, read_transformers, read_nativeDef);
    }

    private NonterminalDef readNonterminalDefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("syntaxDecls = ");
        List<SyntaxDecl> read_syntaxDecls = readListOfSyntaxDecl();
        readFieldDelim("header = ");
        NonterminalHeader read_header = (NonterminalHeader) readNode();
        readFieldDelim("astType = ");
        Option<BaseType> read_astType = readOptionOfBaseType();
        return new NonterminalDef(read_info, read_name, read_syntaxDecls, read_header, read_astType);
    }

    private NonterminalExtensionDef readNonterminalExtensionDefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("syntaxDecls = ");
        List<SyntaxDecl> read_syntaxDecls = readListOfSyntaxDecl();
        return new NonterminalExtensionDef(read_info, read_name, read_syntaxDecls);
    }

    private LValue readLValueBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("mods = ");
        Modifiers read_mods = (Modifiers) readUnknownObject();
        readFieldDelim("idType = ");
        Option<TypeOrPattern> read_idType = readOptionOfTypeOrPattern();
        readFieldDelim("mutable = ");
        boolean read_mutable = readBoolean();
        return new LValue(read_info, read_name, read_mods, read_idType, read_mutable);
    }

    private Param readParamBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("mods = ");
        Modifiers read_mods = (Modifiers) readUnknownObject();
        readFieldDelim("idType = ");
        Option<TypeOrPattern> read_idType = readOptionOfTypeOrPattern();
        readFieldDelim("defaultExpr = ");
        Option<Expr> read_defaultExpr = readOptionOfExpr();
        readFieldDelim("varargsType = ");
        Option<Type> read_varargsType = readOptionOfType();
        return new Param(read_info, read_name, read_mods, read_idType, read_defaultExpr, read_varargsType);
    }

    private DummyExpr readDummyExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        return new DummyExpr(read_info);
    }

    private AsExpr readAsExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("annType = ");
        Type read_annType = (Type) readNode();
        return new AsExpr(read_info, read_expr, read_annType);
    }

    private AsIfExpr readAsIfExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("annType = ");
        Type read_annType = (Type) readNode();
        return new AsIfExpr(read_info, read_expr, read_annType);
    }

    private Assignment readAssignmentBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("lhs = ");
        List<Lhs> read_lhs = readListOfLhs();
        readFieldDelim("assignOp = ");
        Option<FunctionalRef> read_assignOp = readOptionOfFunctionalRef();
        readFieldDelim("rhs = ");
        Expr read_rhs = (Expr) readNode();
        readFieldDelim("assignmentInfos = ");
        List<CompoundAssignmentInfo> read_assignmentInfos = readListOfCompoundAssignmentInfo();
        return new Assignment(read_info, read_lhs, read_assignOp, read_rhs, read_assignmentInfos);
    }

    private Block readBlockBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("loc = ");
        Option<Expr> read_loc = readOptionOfExpr();
        readFieldDelim("atomicBlock = ");
        boolean read_atomicBlock = readBoolean();
        readFieldDelim("withinDo = ");
        boolean read_withinDo = readBoolean();
        readFieldDelim("exprs = ");
        List<Expr> read_exprs = readListOfExpr();
        return new Block(read_info, read_loc, read_atomicBlock, read_withinDo, read_exprs);
    }

    private Do readDoBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("fronts = ");
        List<Block> read_fronts = readListOfBlock();
        return new Do(read_info, read_fronts);
    }

    private CaseExpr readCaseExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("param = ");
        Option<Expr> read_param = readOptionOfExpr();
        readFieldDelim("compare = ");
        Option<FunctionalRef> read_compare = readOptionOfFunctionalRef();
        readFieldDelim("equalsOp = ");
        FunctionalRef read_equalsOp = (FunctionalRef) readNode();
        readFieldDelim("inOp = ");
        FunctionalRef read_inOp = (FunctionalRef) readNode();
        readFieldDelim("clauses = ");
        List<CaseClause> read_clauses = readListOfCaseClause();
        readFieldDelim("elseClause = ");
        Option<Block> read_elseClause = readOptionOfBlock();
        return new CaseExpr(read_info, read_param, read_compare, read_equalsOp, read_inOp, read_clauses, read_elseClause);
    }

    private If readIfBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("clauses = ");
        List<IfClause> read_clauses = readListOfIfClause();
        readFieldDelim("elseClause = ");
        Option<Block> read_elseClause = readOptionOfBlock();
        return new If(read_info, read_clauses, read_elseClause);
    }

    private Label readLabelBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        return new Label(read_info, read_name, read_body);
    }

    private ObjectExpr readObjectExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("header = ");
        TraitTypeHeader read_header = (TraitTypeHeader) readNode();
        readFieldDelim("selfType = ");
        Option<SelfType> read_selfType = readOptionOfSelfType();
        return new ObjectExpr(read_info, read_header, read_selfType);
    }

    private _RewriteObjectExpr read_RewriteObjectExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("header = ");
        TraitTypeHeader read_header = (TraitTypeHeader) readNode();
        readFieldDelim("implicitTypeParameters = ");
        @SuppressWarnings("unchecked") Map<String, StaticParam> read_implicitTypeParameters = (Map<String, StaticParam>) readUnknownObject();
        readFieldDelim("genSymName = ");
        String read_genSymName = readString();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        return new _RewriteObjectExpr(read_info, read_header, read_implicitTypeParameters, read_genSymName, read_staticArgs);
    }

    private Try readTryBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("catchClause = ");
        Option<Catch> read_catchClause = readOptionOfCatch();
        readFieldDelim("forbidClause = ");
        List<BaseType> read_forbidClause = readListOfBaseType();
        readFieldDelim("finallyClause = ");
        Option<Block> read_finallyClause = readOptionOfBlock();
        return new Try(read_info, read_body, read_catchClause, read_forbidClause, read_finallyClause);
    }

    private TupleExpr readTupleExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("exprs = ");
        List<Expr> read_exprs = readListOfExpr();
        readFieldDelim("varargs = ");
        Option<Expr> read_varargs = readOptionOfExpr();
        readFieldDelim("keywords = ");
        List<KeywordExpr> read_keywords = readListOfKeywordExpr();
        readFieldDelim("inApp = ");
        boolean read_inApp = readBoolean();
        return new TupleExpr(read_info, read_exprs, read_varargs, read_keywords, read_inApp);
    }

    private Typecase readTypecaseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("bindExpr = ");
        Expr read_bindExpr = (Expr) readNode();
        readFieldDelim("clauses = ");
        List<TypecaseClause> read_clauses = readListOfTypecaseClause();
        readFieldDelim("elseClause = ");
        Option<Block> read_elseClause = readOptionOfBlock();
        return new Typecase(read_info, read_bindExpr, read_clauses, read_elseClause);
    }

    private While readWhileBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("testExpr = ");
        GeneratorClause read_testExpr = (GeneratorClause) readNode();
        readFieldDelim("body = ");
        Do read_body = (Do) readNode();
        return new While(read_info, read_testExpr, read_body);
    }

    private For readForBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gens = ");
        List<GeneratorClause> read_gens = readListOfGeneratorClause();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        return new For(read_info, read_gens, read_body);
    }

    private Accumulator readAccumulatorBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("accOp = ");
        Op read_accOp = (Op) readNode();
        readFieldDelim("gens = ");
        List<GeneratorClause> read_gens = readListOfGeneratorClause();
        readFieldDelim("body = ");
        Expr read_body = (Expr) readNode();
        return new Accumulator(read_info, read_staticArgs, read_accOp, read_gens, read_body);
    }

    private ArrayComprehension readArrayComprehensionBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("clauses = ");
        List<ArrayComprehensionClause> read_clauses = readListOfArrayComprehensionClause();
        return new ArrayComprehension(read_info, read_staticArgs, read_clauses);
    }

    private AtomicExpr readAtomicExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        return new AtomicExpr(read_info, read_expr);
    }

    private Exit readExitBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("target = ");
        Option<Id> read_target = readOptionOfId();
        readFieldDelim("returnExpr = ");
        Option<Expr> read_returnExpr = readOptionOfExpr();
        return new Exit(read_info, read_target, read_returnExpr);
    }

    private Spawn readSpawnBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("body = ");
        Expr read_body = (Expr) readNode();
        return new Spawn(read_info, read_body);
    }

    private Throw readThrowBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        return new Throw(read_info, read_expr);
    }

    private TryAtomicExpr readTryAtomicExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        return new TryAtomicExpr(read_info, read_expr);
    }

    private FnExpr readFnExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("header = ");
        FnHeader read_header = (FnHeader) readNode();
        readFieldDelim("body = ");
        Expr read_body = (Expr) readNode();
        return new FnExpr(read_info, read_header, read_body);
    }

    private LetFn readLetFnBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("fns = ");
        List<FnDecl> read_fns = readListOfFnDecl();
        return new LetFn(read_info, read_body, read_fns);
    }

    private LocalVarDecl readLocalVarDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("lhs = ");
        List<LValue> read_lhs = readListOfLValue();
        readFieldDelim("rhs = ");
        Option<Expr> read_rhs = readOptionOfExpr();
        return new LocalVarDecl(read_info, read_body, read_lhs, read_rhs);
    }

    private SubscriptExpr readSubscriptExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("obj = ");
        Expr read_obj = (Expr) readNode();
        readFieldDelim("subs = ");
        List<Expr> read_subs = readListOfExpr();
        readFieldDelim("op = ");
        Option<Op> read_op = readOptionOfOp();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        return new SubscriptExpr(read_info, read_obj, read_subs, read_op, read_staticArgs);
    }

    private FloatLiteralExpr readFloatLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("intPart = ");
        BigInteger read_intPart = (BigInteger) readUnknownObject();
        readFieldDelim("numerator = ");
        BigInteger read_numerator = (BigInteger) readUnknownObject();
        readFieldDelim("denomBase = ");
        int read_denomBase = readInt();
        readFieldDelim("denomPower = ");
        int read_denomPower = readInt();
        return new FloatLiteralExpr(read_info, read_text, read_intPart, read_numerator, read_denomBase, read_denomPower);
    }

    private IntLiteralExpr readIntLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("intVal = ");
        BigInteger read_intVal = (BigInteger) readUnknownObject();
        return new IntLiteralExpr(read_info, read_text, read_intVal);
    }

    private CharLiteralExpr readCharLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("charVal = ");
        int read_charVal = readInt();
        return new CharLiteralExpr(read_info, read_text, read_charVal);
    }

    private StringLiteralExpr readStringLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("text = ");
        String read_text = readString();
        return new StringLiteralExpr(read_info, read_text);
    }

    private VoidLiteralExpr readVoidLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("text = ");
        String read_text = readString();
        return new VoidLiteralExpr(read_info, read_text);
    }

    private BooleanLiteralExpr readBooleanLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("booleanVal = ");
        int read_booleanVal = readInt();
        return new BooleanLiteralExpr(read_info, read_text, read_booleanVal);
    }

    private VarRef readVarRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("varId = ");
        Id read_varId = (Id) readNode();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("lexicalDepth = ");
        int read_lexicalDepth = readInt();
        return new VarRef(read_info, read_varId, read_staticArgs, read_lexicalDepth);
    }

    private FieldRef readFieldRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("obj = ");
        Expr read_obj = (Expr) readNode();
        readFieldDelim("field = ");
        Id read_field = (Id) readNode();
        return new FieldRef(read_info, read_obj, read_field);
    }

    private FnRef readFnRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("lexicalDepth = ");
        int read_lexicalDepth = readInt();
        readFieldDelim("originalName = ");
        IdOrOp read_originalName = (IdOrOp) readNode();
        readFieldDelim("names = ");
        List<IdOrOp> read_names = readListOfIdOrOp();
        readFieldDelim("interpOverloadings = ");
        List<Overloading> read_interpOverloadings = readListOfOverloading();
        readFieldDelim("newOverloadings = ");
        List<Overloading> read_newOverloadings = readListOfOverloading();
        readFieldDelim("overloadingType = ");
        Option<Type> read_overloadingType = readOptionOfType();
        readFieldDelim("overloadingSchema = ");
        Option<Type> read_overloadingSchema = readOptionOfType();
        return new FnRef(read_info, read_staticArgs, read_lexicalDepth, read_originalName, read_names, read_interpOverloadings, read_newOverloadings, read_overloadingType, read_overloadingSchema);
    }

    private OpRef readOpRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("lexicalDepth = ");
        int read_lexicalDepth = readInt();
        readFieldDelim("originalName = ");
        IdOrOp read_originalName = (IdOrOp) readNode();
        readFieldDelim("names = ");
        List<IdOrOp> read_names = readListOfIdOrOp();
        readFieldDelim("interpOverloadings = ");
        List<Overloading> read_interpOverloadings = readListOfOverloading();
        readFieldDelim("newOverloadings = ");
        List<Overloading> read_newOverloadings = readListOfOverloading();
        readFieldDelim("overloadingType = ");
        Option<Type> read_overloadingType = readOptionOfType();
        readFieldDelim("overloadingSchema = ");
        Option<Type> read_overloadingSchema = readOptionOfType();
        return new OpRef(read_info, read_staticArgs, read_lexicalDepth, read_originalName, read_names, read_interpOverloadings, read_newOverloadings, read_overloadingType, read_overloadingSchema);
    }

    private _RewriteFnRef read_RewriteFnRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("fnExpr = ");
        Expr read_fnExpr = (Expr) readNode();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        return new _RewriteFnRef(read_info, read_fnExpr, read_staticArgs);
    }

    private _RewriteObjectExprRef read_RewriteObjectExprRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("genSymName = ");
        String read_genSymName = readString();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        return new _RewriteObjectExprRef(read_info, read_genSymName, read_staticArgs);
    }

    private Juxt readJuxtBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("multiJuxt = ");
        FunctionalRef read_multiJuxt = (FunctionalRef) readNode();
        readFieldDelim("infixJuxt = ");
        FunctionalRef read_infixJuxt = (FunctionalRef) readNode();
        readFieldDelim("exprs = ");
        List<Expr> read_exprs = readListOfExpr();
        readFieldDelim("fnApp = ");
        boolean read_fnApp = readBoolean();
        readFieldDelim("tight = ");
        boolean read_tight = readBoolean();
        return new Juxt(read_info, read_multiJuxt, read_infixJuxt, read_exprs, read_fnApp, read_tight);
    }

    private _RewriteFnApp read_RewriteFnAppBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("function = ");
        Expr read_function = (Expr) readNode();
        readFieldDelim("argument = ");
        Expr read_argument = (Expr) readNode();
        return new _RewriteFnApp(read_info, read_function, read_argument);
    }

    private OpExpr readOpExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("op = ");
        FunctionalRef read_op = (FunctionalRef) readNode();
        readFieldDelim("args = ");
        List<Expr> read_args = readListOfExpr();
        return new OpExpr(read_info, read_op, read_args);
    }

    private AmbiguousMultifixOpExpr readAmbiguousMultifixOpExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("infix_op = ");
        FunctionalRef read_infix_op = (FunctionalRef) readNode();
        readFieldDelim("multifix_op = ");
        FunctionalRef read_multifix_op = (FunctionalRef) readNode();
        readFieldDelim("args = ");
        List<Expr> read_args = readListOfExpr();
        return new AmbiguousMultifixOpExpr(read_info, read_infix_op, read_multifix_op, read_args);
    }

    private ChainExpr readChainExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("first = ");
        Expr read_first = (Expr) readNode();
        readFieldDelim("links = ");
        List<Link> read_links = readListOfLink();
        return new ChainExpr(read_info, read_first, read_links);
    }

    private TraitCoercionInvocation readTraitCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("arg = ");
        Expr read_arg = (Expr) readNode();
        readFieldDelim("toType = ");
        TraitType read_toType = (TraitType) readNode();
        readFieldDelim("coercionFn = ");
        FnRef read_coercionFn = (FnRef) readNode();
        return new TraitCoercionInvocation(read_info, read_arg, read_toType, read_coercionFn);
    }

    private TupleCoercionInvocation readTupleCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("arg = ");
        Expr read_arg = (Expr) readNode();
        readFieldDelim("toType = ");
        TupleType read_toType = (TupleType) readNode();
        readFieldDelim("subCoercions = ");
        List<Option<CoercionInvocation>> read_subCoercions = readListOfOptionOfCoercionInvocation();
        readFieldDelim("varargCoercion = ");
        Option<Option<CoercionInvocation>> read_varargCoercion = readOptionOfOptionOfCoercionInvocation();
        return new TupleCoercionInvocation(read_info, read_arg, read_toType, read_subCoercions, read_varargCoercion);
    }

    private ArrowCoercionInvocation readArrowCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("arg = ");
        Expr read_arg = (Expr) readNode();
        readFieldDelim("toType = ");
        ArrowType read_toType = (ArrowType) readNode();
        readFieldDelim("domainCoercion = ");
        Option<CoercionInvocation> read_domainCoercion = readOptionOfCoercionInvocation();
        readFieldDelim("rangeCoercion = ");
        Option<CoercionInvocation> read_rangeCoercion = readOptionOfCoercionInvocation();
        return new ArrowCoercionInvocation(read_info, read_arg, read_toType, read_domainCoercion, read_rangeCoercion);
    }

    private UnionCoercionInvocation readUnionCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("toType = ");
        Type read_toType = (Type) readNode();
        readFieldDelim("arg = ");
        Expr read_arg = (Expr) readNode();
        readFieldDelim("fromTypes = ");
        List<Type> read_fromTypes = readListOfType();
        readFieldDelim("fromCoercions = ");
        List<Option<CoercionInvocation>> read_fromCoercions = readListOfOptionOfCoercionInvocation();
        return new UnionCoercionInvocation(read_info, read_toType, read_arg, read_fromTypes, read_fromCoercions);
    }

    private MethodInvocation readMethodInvocationBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("obj = ");
        Expr read_obj = (Expr) readNode();
        readFieldDelim("method = ");
        IdOrOp read_method = (IdOrOp) readNode();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("arg = ");
        Expr read_arg = (Expr) readNode();
        readFieldDelim("overloadingType = ");
        Option<Type> read_overloadingType = readOptionOfType();
        readFieldDelim("overloadingSchema = ");
        Option<Type> read_overloadingSchema = readOptionOfType();
        return new MethodInvocation(read_info, read_obj, read_method, read_staticArgs, read_arg, read_overloadingType, read_overloadingSchema);
    }

    private MathPrimary readMathPrimaryBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("multiJuxt = ");
        FunctionalRef read_multiJuxt = (FunctionalRef) readNode();
        readFieldDelim("infixJuxt = ");
        FunctionalRef read_infixJuxt = (FunctionalRef) readNode();
        readFieldDelim("front = ");
        Expr read_front = (Expr) readNode();
        readFieldDelim("rest = ");
        List<MathItem> read_rest = readListOfMathItem();
        return new MathPrimary(read_info, read_multiJuxt, read_infixJuxt, read_front, read_rest);
    }

    private ArrayElement readArrayElementBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("element = ");
        Expr read_element = (Expr) readNode();
        return new ArrayElement(read_info, read_staticArgs, read_element);
    }

    private ArrayElements readArrayElementsBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("dimension = ");
        int read_dimension = readInt();
        readFieldDelim("elements = ");
        List<ArrayExpr> read_elements = readListOfArrayExpr();
        readFieldDelim("outermost = ");
        boolean read_outermost = readBoolean();
        return new ArrayElements(read_info, read_staticArgs, read_dimension, read_elements, read_outermost);
    }

    private AnyType readAnyTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        return new AnyType(read_info);
    }

    private BottomType readBottomTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        return new BottomType(read_info);
    }

    private UnknownType readUnknownTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        return new UnknownType(read_info);
    }

    private TraitSelfType readTraitSelfTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("named = ");
        BaseType read_named = (BaseType) readNode();
        readFieldDelim("comprised = ");
        List<NamedType> read_comprised = readListOfNamedType();
        return new TraitSelfType(read_info, read_named, read_comprised);
    }

    private ObjectExprType readObjectExprTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("extended = ");
        List<BaseType> read_extended = readListOfBaseType();
        return new ObjectExprType(read_info, read_extended);
    }

    private _InferenceVarType read_InferenceVarTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("id = ");
        Object read_id = (Object) readUnknownObject();
        return new _InferenceVarType(read_info, read_name, read_id);
    }

    private VarType readVarTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("lexicalDepth = ");
        int read_lexicalDepth = readInt();
        return new VarType(read_info, read_name, read_lexicalDepth);
    }

    private TraitType readTraitTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("args = ");
        List<StaticArg> read_args = readListOfStaticArg();
        readFieldDelim("traitStaticParams = ");
        List<StaticParam> read_traitStaticParams = readListOfStaticParam();
        return new TraitType(read_info, read_name, read_args, read_traitStaticParams);
    }

    private ArrayType readArrayTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("elemType = ");
        Type read_elemType = (Type) readNode();
        readFieldDelim("indices = ");
        Indices read_indices = (Indices) readNode();
        return new ArrayType(read_info, read_elemType, read_indices);
    }

    private MatrixType readMatrixTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("elemType = ");
        Type read_elemType = (Type) readNode();
        readFieldDelim("dimensions = ");
        List<ExtentRange> read_dimensions = readListOfExtentRange();
        return new MatrixType(read_info, read_elemType, read_dimensions);
    }

    private TaggedDimType readTaggedDimTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("elemType = ");
        Type read_elemType = (Type) readNode();
        readFieldDelim("dimExpr = ");
        DimExpr read_dimExpr = (DimExpr) readNode();
        readFieldDelim("unitExpr = ");
        Option<Expr> read_unitExpr = readOptionOfExpr();
        return new TaggedDimType(read_info, read_elemType, read_dimExpr, read_unitExpr);
    }

    private TaggedUnitType readTaggedUnitTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("elemType = ");
        Type read_elemType = (Type) readNode();
        readFieldDelim("unitExpr = ");
        Expr read_unitExpr = (Expr) readNode();
        return new TaggedUnitType(read_info, read_elemType, read_unitExpr);
    }

    private TupleType readTupleTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("elements = ");
        List<Type> read_elements = readListOfType();
        readFieldDelim("varargs = ");
        Option<Type> read_varargs = readOptionOfType();
        readFieldDelim("keywords = ");
        List<KeywordType> read_keywords = readListOfKeywordType();
        return new TupleType(read_info, read_elements, read_varargs, read_keywords);
    }

    private ArrowType readArrowTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("domain = ");
        Type read_domain = (Type) readNode();
        readFieldDelim("range = ");
        Type read_range = (Type) readNode();
        readFieldDelim("effect = ");
        Effect read_effect = (Effect) readNode();
        readFieldDelim("io = ");
        boolean read_io = readBoolean();
        readFieldDelim("methodInfo = ");
        Option<MethodInfo> read_methodInfo = readOptionOfMethodInfo();
        return new ArrowType(read_info, read_domain, read_range, read_effect, read_io, read_methodInfo);
    }

    private IntersectionType readIntersectionTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("elements = ");
        List<Type> read_elements = readListOfType();
        return new IntersectionType(read_info, read_elements);
    }

    private UnionType readUnionTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("elements = ");
        List<Type> read_elements = readListOfType();
        return new UnionType(read_info, read_elements);
    }

    private FixedPointType readFixedPointTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("name = ");
        _InferenceVarType read_name = (_InferenceVarType) readNode();
        readFieldDelim("body = ");
        Type read_body = (Type) readNode();
        return new FixedPointType(read_info, read_name, read_body);
    }

    private LabelType readLabelTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        return new LabelType(read_info);
    }

    private DimBase readDimBaseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        return new DimBase(read_info);
    }

    private DimRef readDimRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        return new DimRef(read_info, read_name);
    }

    private DimExponent readDimExponentBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("base = ");
        Type read_base = (Type) readNode();
        readFieldDelim("power = ");
        IntExpr read_power = (IntExpr) readNode();
        return new DimExponent(read_info, read_base, read_power);
    }

    private DimUnaryOp readDimUnaryOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("dimVal = ");
        DimExpr read_dimVal = (DimExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        return new DimUnaryOp(read_info, read_dimVal, read_op);
    }

    private DimBinaryOp readDimBinaryOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("left = ");
        DimExpr read_left = (DimExpr) readNode();
        readFieldDelim("right = ");
        DimExpr read_right = (DimExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        return new DimBinaryOp(read_info, read_left, read_right, read_op);
    }

    private Pattern readPatternBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Option<Type> read_name = readOptionOfType();
        readFieldDelim("patterns = ");
        PatternArgs read_patterns = (PatternArgs) readNode();
        return new Pattern(read_info, read_name, read_patterns);
    }

    private PatternArgs readPatternArgsBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("patterns = ");
        List<PatternBinding> read_patterns = readListOfPatternBinding();
        return new PatternArgs(read_info, read_patterns);
    }

    private PlainPattern readPlainPatternBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("field = ");
        Option<Id> read_field = readOptionOfId();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("mods = ");
        Modifiers read_mods = (Modifiers) readUnknownObject();
        readFieldDelim("idType = ");
        Option<TypeOrPattern> read_idType = readOptionOfTypeOrPattern();
        return new PlainPattern(read_info, read_field, read_name, read_mods, read_idType);
    }

    private TypePattern readTypePatternBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("field = ");
        Option<Id> read_field = readOptionOfId();
        readFieldDelim("typ = ");
        Type read_typ = (Type) readNode();
        return new TypePattern(read_info, read_field, read_typ);
    }

    private NestedPattern readNestedPatternBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("field = ");
        Option<Id> read_field = readOptionOfId();
        readFieldDelim("pat = ");
        Pattern read_pat = (Pattern) readNode();
        return new NestedPattern(read_info, read_field, read_pat);
    }

    private TypeArg readTypeArgBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("typeArg = ");
        Type read_typeArg = (Type) readNode();
        return new TypeArg(read_info, read_lifted, read_typeArg);
    }

    private IntArg readIntArgBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("intVal = ");
        IntExpr read_intVal = (IntExpr) readNode();
        return new IntArg(read_info, read_lifted, read_intVal);
    }

    private BoolArg readBoolArgBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("boolArg = ");
        BoolExpr read_boolArg = (BoolExpr) readNode();
        return new BoolArg(read_info, read_lifted, read_boolArg);
    }

    private OpArg readOpArgBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("id = ");
        Op read_id = (Op) readNode();
        return new OpArg(read_info, read_lifted, read_id);
    }

    private DimArg readDimArgBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("dimArg = ");
        DimExpr read_dimArg = (DimExpr) readNode();
        return new DimArg(read_info, read_lifted, read_dimArg);
    }

    private UnitArg readUnitArgBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("unitArg = ");
        UnitExpr read_unitArg = (UnitExpr) readNode();
        return new UnitArg(read_info, read_lifted, read_unitArg);
    }

    private IntBase readIntBaseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("intVal = ");
        IntLiteralExpr read_intVal = (IntLiteralExpr) readNode();
        return new IntBase(read_info, read_parenthesized, read_intVal);
    }

    private IntRef readIntRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("lexicalDepth = ");
        int read_lexicalDepth = readInt();
        return new IntRef(read_info, read_parenthesized, read_name, read_lexicalDepth);
    }

    private IntBinaryOp readIntBinaryOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("left = ");
        IntExpr read_left = (IntExpr) readNode();
        readFieldDelim("right = ");
        IntExpr read_right = (IntExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        return new IntBinaryOp(read_info, read_parenthesized, read_left, read_right, read_op);
    }

    private BoolBase readBoolBaseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("boolVal = ");
        boolean read_boolVal = readBoolean();
        return new BoolBase(read_info, read_parenthesized, read_boolVal);
    }

    private BoolRef readBoolRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("lexicalDepth = ");
        int read_lexicalDepth = readInt();
        return new BoolRef(read_info, read_parenthesized, read_name, read_lexicalDepth);
    }

    private BoolUnaryOp readBoolUnaryOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("boolVal = ");
        BoolExpr read_boolVal = (BoolExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        return new BoolUnaryOp(read_info, read_parenthesized, read_boolVal, read_op);
    }

    private BoolBinaryOp readBoolBinaryOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("left = ");
        BoolExpr read_left = (BoolExpr) readNode();
        readFieldDelim("right = ");
        BoolExpr read_right = (BoolExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        return new BoolBinaryOp(read_info, read_parenthesized, read_left, read_right, read_op);
    }

    private UnitRef readUnitRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        return new UnitRef(read_info, read_parenthesized, read_name);
    }

    private UnitBinaryOp readUnitBinaryOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("left = ");
        UnitExpr read_left = (UnitExpr) readNode();
        readFieldDelim("right = ");
        UnitExpr read_right = (UnitExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        return new UnitBinaryOp(read_info, read_parenthesized, read_left, read_right, read_op);
    }

    private Effect readEffectBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("throwsClause = ");
        Option<List<Type>> read_throwsClause = readOptionOfListOfType();
        readFieldDelim("ioEffect = ");
        boolean read_ioEffect = readBoolean();
        return new Effect(read_info, read_throwsClause, read_ioEffect);
    }

    private WhereClause readWhereClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("bindings = ");
        List<WhereBinding> read_bindings = readListOfWhereBinding();
        readFieldDelim("constraints = ");
        List<WhereConstraint> read_constraints = readListOfWhereConstraint();
        return new WhereClause(read_info, read_bindings, read_constraints);
    }

    private WhereBinding readWhereBindingBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("supers = ");
        List<BaseType> read_supers = readListOfBaseType();
        readFieldDelim("kind = ");
        StaticParamKind read_kind = (StaticParamKind) readNode();
        return new WhereBinding(read_info, read_name, read_supers, read_kind);
    }

    private WhereExtends readWhereExtendsBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("supers = ");
        List<BaseType> read_supers = readListOfBaseType();
        return new WhereExtends(read_info, read_name, read_supers);
    }

    private WhereTypeAlias readWhereTypeAliasBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("alias = ");
        TypeAlias read_alias = (TypeAlias) readNode();
        return new WhereTypeAlias(read_info, read_alias);
    }

    private WhereCoerces readWhereCoercesBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("left = ");
        Type read_left = (Type) readNode();
        readFieldDelim("right = ");
        Type read_right = (Type) readNode();
        readFieldDelim("coerces = ");
        boolean read_coerces = readBoolean();
        readFieldDelim("widens = ");
        boolean read_widens = readBoolean();
        return new WhereCoerces(read_info, read_left, read_right, read_coerces, read_widens);
    }

    private WhereEquals readWhereEqualsBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("left = ");
        Id read_left = (Id) readNode();
        readFieldDelim("right = ");
        Id read_right = (Id) readNode();
        return new WhereEquals(read_info, read_left, read_right);
    }

    private UnitConstraint readUnitConstraintBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        return new UnitConstraint(read_info, read_name);
    }

    private IntConstraint readIntConstraintBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("left = ");
        IntExpr read_left = (IntExpr) readNode();
        readFieldDelim("right = ");
        IntExpr read_right = (IntExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        return new IntConstraint(read_info, read_left, read_right, read_op);
    }

    private BoolConstraintExpr readBoolConstraintExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("constraint = ");
        BoolConstraint read_constraint = (BoolConstraint) readNode();
        return new BoolConstraintExpr(read_info, read_constraint);
    }

    private Contract readContractBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("requiresClause = ");
        Option<List<Expr>> read_requiresClause = readOptionOfListOfExpr();
        readFieldDelim("ensuresClause = ");
        Option<List<EnsuresClause>> read_ensuresClause = readOptionOfListOfEnsuresClause();
        readFieldDelim("invariantsClause = ");
        Option<List<Expr>> read_invariantsClause = readOptionOfListOfExpr();
        return new Contract(read_info, read_requiresClause, read_ensuresClause, read_invariantsClause);
    }

    private EnsuresClause readEnsuresClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("post = ");
        Expr read_post = (Expr) readNode();
        readFieldDelim("pre = ");
        Option<Expr> read_pre = readOptionOfExpr();
        return new EnsuresClause(read_info, read_post, read_pre);
    }

    private StaticParam readStaticParamBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variance = ");
        int read_variance = readInt();
        readFieldDelim("name = ");
        IdOrOp read_name = (IdOrOp) readNode();
        readFieldDelim("extendsClause = ");
        List<BaseType> read_extendsClause = readListOfBaseType();
        readFieldDelim("dominatesClause = ");
        List<BaseType> read_dominatesClause = readListOfBaseType();
        readFieldDelim("dimParam = ");
        Option<Type> read_dimParam = readOptionOfType();
        readFieldDelim("absorbsParam = ");
        boolean read_absorbsParam = readBoolean();
        readFieldDelim("kind = ");
        StaticParamKind read_kind = (StaticParamKind) readNode();
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        return new StaticParam(read_info, read_variance, read_name, read_extendsClause, read_dominatesClause, read_dimParam, read_absorbsParam, read_kind, read_lifted);
    }

    private APIName readAPINameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("ids = ");
        List<Id> read_ids = readListOfId();
        readFieldDelim("text = ");
        String read_text = readString();
        return new APIName(read_info, read_ids, read_text);
    }

    private Id readIdBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        readFieldDelim("text = ");
        String read_text = readString();
        return new Id(read_info, read_apiName, read_text);
    }

    private NamedOp readNamedOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("fixity = ");
        Fixity read_fixity = (Fixity) readNode();
        readFieldDelim("enclosing = ");
        boolean read_enclosing = readBoolean();
        return new NamedOp(read_info, read_apiName, read_text, read_fixity, read_enclosing);
    }

    private _InferenceVarOp read_InferenceVarOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("fixity = ");
        Fixity read_fixity = (Fixity) readNode();
        readFieldDelim("enclosing = ");
        boolean read_enclosing = readBoolean();
        readFieldDelim("id = ");
        Object read_id = (Object) readUnknownObject();
        return new _InferenceVarOp(read_info, read_apiName, read_text, read_fixity, read_enclosing, read_id);
    }

    private AnonymousFnName readAnonymousFnNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        return new AnonymousFnName(read_info, read_apiName);
    }

    private ConstructorFnName readConstructorFnNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        readFieldDelim("constructor = ");
        ObjectConstructor read_constructor = (ObjectConstructor) readNode();
        return new ConstructorFnName(read_info, read_apiName, read_constructor);
    }

    private ArrayComprehensionClause readArrayComprehensionClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("bind = ");
        List<Expr> read_bind = readListOfExpr();
        readFieldDelim("init = ");
        Expr read_init = (Expr) readNode();
        readFieldDelim("gens = ");
        List<GeneratorClause> read_gens = readListOfGeneratorClause();
        return new ArrayComprehensionClause(read_info, read_bind, read_init, read_gens);
    }

    private KeywordExpr readKeywordExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("init = ");
        Expr read_init = (Expr) readNode();
        return new KeywordExpr(read_info, read_name, read_init);
    }

    private CaseClause readCaseClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("matchClause = ");
        Expr read_matchClause = (Expr) readNode();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("op = ");
        Option<FunctionalRef> read_op = readOptionOfFunctionalRef();
        return new CaseClause(read_info, read_matchClause, read_body, read_op);
    }

    private Catch readCatchBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("clauses = ");
        List<CatchClause> read_clauses = readListOfCatchClause();
        return new Catch(read_info, read_name, read_clauses);
    }

    private CatchClause readCatchClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("matchType = ");
        BaseType read_matchType = (BaseType) readNode();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        return new CatchClause(read_info, read_matchType, read_body);
    }

    private IfClause readIfClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("testClause = ");
        GeneratorClause read_testClause = (GeneratorClause) readNode();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        return new IfClause(read_info, read_testClause, read_body);
    }

    private TypecaseClause readTypecaseClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Option<Id> read_name = readOptionOfId();
        readFieldDelim("matchType = ");
        TypeOrPattern read_matchType = (TypeOrPattern) readNode();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        return new TypecaseClause(read_info, read_name, read_matchType, read_body);
    }

    private ExtentRange readExtentRangeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("base = ");
        Option<StaticArg> read_base = readOptionOfStaticArg();
        readFieldDelim("size = ");
        Option<StaticArg> read_size = readOptionOfStaticArg();
        readFieldDelim("op = ");
        Option<Op> read_op = readOptionOfOp();
        return new ExtentRange(read_info, read_base, read_size, read_op);
    }

    private GeneratorClause readGeneratorClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("bind = ");
        List<Id> read_bind = readListOfId();
        readFieldDelim("init = ");
        Expr read_init = (Expr) readNode();
        return new GeneratorClause(read_info, read_bind, read_init);
    }

    private KeywordType readKeywordTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("keywordType = ");
        Type read_keywordType = (Type) readNode();
        return new KeywordType(read_info, read_name, read_keywordType);
    }

    private TraitTypeWhere readTraitTypeWhereBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("baseType = ");
        BaseType read_baseType = (BaseType) readNode();
        readFieldDelim("whereClause = ");
        Option<WhereClause> read_whereClause = readOptionOfWhereClause();
        return new TraitTypeWhere(read_info, read_baseType, read_whereClause);
    }

    private Indices readIndicesBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("extents = ");
        List<ExtentRange> read_extents = readListOfExtentRange();
        return new Indices(read_info, read_extents);
    }

    private ParenthesisDelimitedMI readParenthesisDelimitedMIBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        return new ParenthesisDelimitedMI(read_info, read_expr);
    }

    private NonParenthesisDelimitedMI readNonParenthesisDelimitedMIBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        return new NonParenthesisDelimitedMI(read_info, read_expr);
    }

    private ExponentiationMI readExponentiationMIBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("op = ");
        FunctionalRef read_op = (FunctionalRef) readNode();
        readFieldDelim("expr = ");
        Option<Expr> read_expr = readOptionOfExpr();
        return new ExponentiationMI(read_info, read_op, read_expr);
    }

    private SubscriptingMI readSubscriptingMIBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        readFieldDelim("exprs = ");
        List<Expr> read_exprs = readListOfExpr();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        return new SubscriptingMI(read_info, read_op, read_exprs, read_staticArgs);
    }

    private Overloading readOverloadingBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("unambiguousName = ");
        IdOrOp read_unambiguousName = (IdOrOp) readNode();
        readFieldDelim("originalName = ");
        IdOrOp read_originalName = (IdOrOp) readNode();
        readFieldDelim("type = ");
        Option<ArrowType> read_type = readOptionOfArrowType();
        readFieldDelim("schema = ");
        Option<ArrowType> read_schema = readOptionOfArrowType();
        return new Overloading(read_info, read_unambiguousName, read_originalName, read_type, read_schema);
    }

    private NonterminalHeader readNonterminalHeaderBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("mods = ");
        Modifiers read_mods = (Modifiers) readUnknownObject();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("params = ");
        List<NonterminalParameter> read_params = readListOfNonterminalParameter();
        readFieldDelim("staticParams = ");
        List<StaticParam> read_staticParams = readListOfStaticParam();
        readFieldDelim("paramType = ");
        Option<Type> read_paramType = readOptionOfType();
        readFieldDelim("whereClause = ");
        Option<WhereClause> read_whereClause = readOptionOfWhereClause();
        return new NonterminalHeader(read_info, read_mods, read_name, read_params, read_staticParams, read_paramType, read_whereClause);
    }

    private NonterminalParameter readNonterminalParameterBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("paramType = ");
        BaseType read_paramType = (BaseType) readNode();
        return new NonterminalParameter(read_info, read_name, read_paramType);
    }

    private SyntaxDef readSyntaxDefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("modifier = ");
        Option<String> read_modifier = readOptionOfString();
        readFieldDelim("syntaxSymbols = ");
        List<SyntaxSymbol> read_syntaxSymbols = readListOfSyntaxSymbol();
        readFieldDelim("transformer = ");
        TransformerDecl read_transformer = (TransformerDecl) readNode();
        return new SyntaxDef(read_info, read_modifier, read_syntaxSymbols, read_transformer);
    }

    private SuperSyntaxDef readSuperSyntaxDefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("modifier = ");
        Option<String> read_modifier = readOptionOfString();
        readFieldDelim("nonterminal = ");
        Id read_nonterminal = (Id) readNode();
        readFieldDelim("grammarId = ");
        Id read_grammarId = (Id) readNode();
        return new SuperSyntaxDef(read_info, read_modifier, read_nonterminal, read_grammarId);
    }

    private PreTransformerDef readPreTransformerDefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("transformer = ");
        Transformer read_transformer = (Transformer) readNode();
        return new PreTransformerDef(read_info, read_transformer);
    }

    private NamedTransformerDef readNamedTransformerDefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("parameters = ");
        List<NonterminalParameter> read_parameters = readListOfNonterminalParameter();
        readFieldDelim("transformer = ");
        Transformer read_transformer = (Transformer) readNode();
        return new NamedTransformerDef(read_info, read_name, read_parameters, read_transformer);
    }

    private UnparsedTransformer readUnparsedTransformerBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("transformer = ");
        String read_transformer = readString();
        readFieldDelim("nonterminal = ");
        Id read_nonterminal = (Id) readNode();
        return new UnparsedTransformer(read_info, read_transformer, read_nonterminal);
    }

    private NodeTransformer readNodeTransformerBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("node = ");
        AbstractNode read_node = (AbstractNode) readNode();
        return new NodeTransformer(read_info, read_node);
    }

    private CaseTransformer readCaseTransformerBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapName = ");
        Id read_gapName = (Id) readNode();
        readFieldDelim("clauses = ");
        List<CaseTransformerClause> read_clauses = readListOfCaseTransformerClause();
        return new CaseTransformer(read_info, read_gapName, read_clauses);
    }

    private CaseTransformerClause readCaseTransformerClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("constructor = ");
        Id read_constructor = (Id) readNode();
        readFieldDelim("parameters = ");
        List<Id> read_parameters = readListOfId();
        readFieldDelim("body = ");
        Transformer read_body = (Transformer) readNode();
        return new CaseTransformerClause(read_info, read_constructor, read_parameters, read_body);
    }

    private PrefixedSymbol readPrefixedSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        return new PrefixedSymbol(read_info, read_id, read_symbol);
    }

    private OptionalSymbol readOptionalSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        return new OptionalSymbol(read_info, read_symbol);
    }

    private RepeatSymbol readRepeatSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        return new RepeatSymbol(read_info, read_symbol);
    }

    private RepeatOneOrMoreSymbol readRepeatOneOrMoreSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        return new RepeatOneOrMoreSymbol(read_info, read_symbol);
    }

    private NoWhitespaceSymbol readNoWhitespaceSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        return new NoWhitespaceSymbol(read_info, read_symbol);
    }

    private GroupSymbol readGroupSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("symbols = ");
        List<SyntaxSymbol> read_symbols = readListOfSyntaxSymbol();
        return new GroupSymbol(read_info, read_symbols);
    }

    private AnyCharacterSymbol readAnyCharacterSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        return new AnyCharacterSymbol(read_info);
    }

    private WhitespaceSymbol readWhitespaceSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("s = ");
        String read_s = readString();
        return new WhitespaceSymbol(read_info, read_s);
    }

    private TabSymbol readTabSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        return new TabSymbol(read_info);
    }

    private FormfeedSymbol readFormfeedSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        return new FormfeedSymbol(read_info);
    }

    private CarriageReturnSymbol readCarriageReturnSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        return new CarriageReturnSymbol(read_info);
    }

    private BackspaceSymbol readBackspaceSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        return new BackspaceSymbol(read_info);
    }

    private NewlineSymbol readNewlineSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        return new NewlineSymbol(read_info);
    }

    private BreaklineSymbol readBreaklineSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("s = ");
        String read_s = readString();
        return new BreaklineSymbol(read_info, read_s);
    }

    private ItemSymbol readItemSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("item = ");
        String read_item = readString();
        return new ItemSymbol(read_info, read_item);
    }

    private NonterminalSymbol readNonterminalSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("nonterminal = ");
        Id read_nonterminal = (Id) readNode();
        return new NonterminalSymbol(read_info, read_nonterminal);
    }

    private KeywordSymbol readKeywordSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("token = ");
        String read_token = readString();
        return new KeywordSymbol(read_info, read_token);
    }

    private TokenSymbol readTokenSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("token = ");
        String read_token = readString();
        return new TokenSymbol(read_info, read_token);
    }

    private NotPredicateSymbol readNotPredicateSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        return new NotPredicateSymbol(read_info, read_symbol);
    }

    private AndPredicateSymbol readAndPredicateSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        return new AndPredicateSymbol(read_info, read_symbol);
    }

    private CharacterClassSymbol readCharacterClassSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("characters = ");
        List<CharacterSymbol> read_characters = readListOfCharacterSymbol();
        return new CharacterClassSymbol(read_info, read_characters);
    }

    private CharSymbol readCharSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("string = ");
        String read_string = readString();
        return new CharSymbol(read_info, read_string);
    }

    private CharacterInterval readCharacterIntervalBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("beginSymbol = ");
        String read_beginSymbol = readString();
        readFieldDelim("endSymbol = ");
        String read_endSymbol = readString();
        return new CharacterInterval(read_info, read_beginSymbol, read_endSymbol);
    }

    private Link readLinkBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("op = ");
        FunctionalRef read_op = (FunctionalRef) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        return new Link(read_info, read_op, read_expr);
    }

    private TraitTypeHeader readTraitTypeHeaderBody() throws java.io.IOException {
        readFieldDelim("staticParams = ");
        List<StaticParam> read_staticParams = readListOfStaticParam();
        readFieldDelim("mods = ");
        Modifiers read_mods = (Modifiers) readUnknownObject();
        readFieldDelim("name = ");
        IdOrOpOrAnonymousName read_name = (IdOrOpOrAnonymousName) readNode();
        readFieldDelim("whereClause = ");
        Option<WhereClause> read_whereClause = readOptionOfWhereClause();
        readFieldDelim("throwsClause = ");
        Option<List<Type>> read_throwsClause = readOptionOfListOfType();
        readFieldDelim("contract = ");
        Option<Contract> read_contract = readOptionOfContract();
        readFieldDelim("extendsClause = ");
        List<TraitTypeWhere> read_extendsClause = readListOfTraitTypeWhere();
        readFieldDelim("params = ");
        Option<List<Param>> read_params = readOptionOfListOfParam();
        readFieldDelim("decls = ");
        List<Decl> read_decls = readListOfDecl();
        return new TraitTypeHeader(read_staticParams, read_mods, read_name, read_whereClause, read_throwsClause, read_contract, read_extendsClause, read_params, read_decls);
    }

    private FnHeader readFnHeaderBody() throws java.io.IOException {
        readFieldDelim("staticParams = ");
        List<StaticParam> read_staticParams = readListOfStaticParam();
        readFieldDelim("mods = ");
        Modifiers read_mods = (Modifiers) readUnknownObject();
        readFieldDelim("name = ");
        IdOrOpOrAnonymousName read_name = (IdOrOpOrAnonymousName) readNode();
        readFieldDelim("whereClause = ");
        Option<WhereClause> read_whereClause = readOptionOfWhereClause();
        readFieldDelim("throwsClause = ");
        Option<List<Type>> read_throwsClause = readOptionOfListOfType();
        readFieldDelim("contract = ");
        Option<Contract> read_contract = readOptionOfContract();
        readFieldDelim("params = ");
        List<Param> read_params = readListOfParam();
        readFieldDelim("returnType = ");
        Option<Type> read_returnType = readOptionOfType();
        return new FnHeader(read_staticParams, read_mods, read_name, read_whereClause, read_throwsClause, read_contract, read_params, read_returnType);
    }

    private SpanInfo readSpanInfoBody() throws java.io.IOException {
        readFieldDelim("span = ");
        Span read_span = (Span) readUnknownObject();
        return new SpanInfo(read_span);
    }

    private ExprInfo readExprInfoBody() throws java.io.IOException {
        readFieldDelim("span = ");
        Span read_span = (Span) readUnknownObject();
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("exprType = ");
        Option<Type> read_exprType = readOptionOfType();
        return new ExprInfo(read_span, read_parenthesized, read_exprType);
    }

    private TypeInfo readTypeInfoBody() throws java.io.IOException {
        readFieldDelim("span = ");
        Span read_span = (Span) readUnknownObject();
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("staticParams = ");
        List<StaticParam> read_staticParams = readListOfStaticParam();
        readFieldDelim("whereClause = ");
        Option<WhereClause> read_whereClause = readOptionOfWhereClause();
        return new TypeInfo(read_span, read_parenthesized, read_staticParams, read_whereClause);
    }

    private MethodInfo readMethodInfoBody() throws java.io.IOException {
        readFieldDelim("selfType = ");
        Type read_selfType = (Type) readNode();
        readFieldDelim("selfPosition = ");
        int read_selfPosition = readInt();
        return new MethodInfo(read_selfType, read_selfPosition);
    }

    private CompoundAssignmentInfo readCompoundAssignmentInfoBody() throws java.io.IOException {
        readFieldDelim("opForLhs = ");
        FunctionalRef read_opForLhs = (FunctionalRef) readNode();
        readFieldDelim("compoundCoercionOuter = ");
        Option<CoercionInvocation> read_compoundCoercionOuter = readOptionOfCoercionInvocation();
        readFieldDelim("compoundCoercionInner = ");
        Option<CoercionInvocation> read_compoundCoercionInner = readOptionOfCoercionInvocation();
        return new CompoundAssignmentInfo(read_opForLhs, read_compoundCoercionOuter, read_compoundCoercionInner);
    }

    private Level readLevelBody() throws java.io.IOException {
        readFieldDelim("level = ");
        int read_level = readInt();
        readFieldDelim("_object = ");
        Object read__object = (Object) readUnknownObject();
        return new Level(read_level, read__object);
    }

    private InFixity readInFixityBody() throws java.io.IOException {
        return new InFixity();
    }

    private PreFixity readPreFixityBody() throws java.io.IOException {
        return new PreFixity();
    }

    private PostFixity readPostFixityBody() throws java.io.IOException {
        return new PostFixity();
    }

    private NoFixity readNoFixityBody() throws java.io.IOException {
        return new NoFixity();
    }

    private MultiFixity readMultiFixityBody() throws java.io.IOException {
        return new MultiFixity();
    }

    private EnclosingFixity readEnclosingFixityBody() throws java.io.IOException {
        return new EnclosingFixity();
    }

    private BigFixity readBigFixityBody() throws java.io.IOException {
        return new BigFixity();
    }

    private UnknownFixity readUnknownFixityBody() throws java.io.IOException {
        return new UnknownFixity();
    }

    private KindType readKindTypeBody() throws java.io.IOException {
        return new KindType();
    }

    private KindInt readKindIntBody() throws java.io.IOException {
        return new KindInt();
    }

    private KindNat readKindNatBody() throws java.io.IOException {
        return new KindNat();
    }

    private KindBool readKindBoolBody() throws java.io.IOException {
        return new KindBool();
    }

    private KindDim readKindDimBody() throws java.io.IOException {
        return new KindDim();
    }

    private KindUnit readKindUnitBody() throws java.io.IOException {
        return new KindUnit();
    }

    private KindOp readKindOpBody() throws java.io.IOException {
        return new KindOp();
    }

    private _SyntaxTransformationAbstractNode read_SyntaxTransformationAbstractNodeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAbstractNode(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCompilationUnit read_SyntaxTransformationCompilationUnitBody() throws java.io.IOException {
        readFieldDelim("name = ");
        APIName read_name = (APIName) readNode();
        readFieldDelim("imports = ");
        List<Import> read_imports = readListOfImport();
        readFieldDelim("decls = ");
        List<Decl> read_decls = readListOfDecl();
        readFieldDelim("comprises = ");
        List<APIName> read_comprises = readListOfAPIName();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCompilationUnit(read_name, read_imports, read_decls, read_comprises, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationComponent read_SyntaxTransformationComponentBody() throws java.io.IOException {
        readFieldDelim("name = ");
        APIName read_name = (APIName) readNode();
        readFieldDelim("imports = ");
        List<Import> read_imports = readListOfImport();
        readFieldDelim("decls = ");
        List<Decl> read_decls = readListOfDecl();
        readFieldDelim("comprises = ");
        List<APIName> read_comprises = readListOfAPIName();
        readFieldDelim("_native = ");
        boolean read__native = readBoolean();
        readFieldDelim("exports = ");
        List<APIName> read_exports = readListOfAPIName();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationComponent(read_name, read_imports, read_decls, read_comprises, read__native, read_exports, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationApi read_SyntaxTransformationApiBody() throws java.io.IOException {
        readFieldDelim("name = ");
        APIName read_name = (APIName) readNode();
        readFieldDelim("imports = ");
        List<Import> read_imports = readListOfImport();
        readFieldDelim("decls = ");
        List<Decl> read_decls = readListOfDecl();
        readFieldDelim("comprises = ");
        List<APIName> read_comprises = readListOfAPIName();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationApi(read_name, read_imports, read_decls, read_comprises, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationImport read_SyntaxTransformationImportBody() throws java.io.IOException {
        readFieldDelim("foreignLanguage = ");
        Option<String> read_foreignLanguage = readOptionOfString();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationImport(read_foreignLanguage, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationImportedNames read_SyntaxTransformationImportedNamesBody() throws java.io.IOException {
        readFieldDelim("foreignLanguage = ");
        Option<String> read_foreignLanguage = readOptionOfString();
        readFieldDelim("apiName = ");
        APIName read_apiName = (APIName) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationImportedNames(read_foreignLanguage, read_apiName, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationImportStar read_SyntaxTransformationImportStarBody() throws java.io.IOException {
        readFieldDelim("foreignLanguage = ");
        Option<String> read_foreignLanguage = readOptionOfString();
        readFieldDelim("apiName = ");
        APIName read_apiName = (APIName) readNode();
        readFieldDelim("exceptNames = ");
        List<IdOrOpOrAnonymousName> read_exceptNames = readListOfIdOrOpOrAnonymousName();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationImportStar(read_foreignLanguage, read_apiName, read_exceptNames, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationImportNames read_SyntaxTransformationImportNamesBody() throws java.io.IOException {
        readFieldDelim("foreignLanguage = ");
        Option<String> read_foreignLanguage = readOptionOfString();
        readFieldDelim("apiName = ");
        APIName read_apiName = (APIName) readNode();
        readFieldDelim("aliasedNames = ");
        List<AliasedSimpleName> read_aliasedNames = readListOfAliasedSimpleName();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationImportNames(read_foreignLanguage, read_apiName, read_aliasedNames, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationImportApi read_SyntaxTransformationImportApiBody() throws java.io.IOException {
        readFieldDelim("foreignLanguage = ");
        Option<String> read_foreignLanguage = readOptionOfString();
        readFieldDelim("apis = ");
        List<AliasedAPIName> read_apis = readListOfAliasedAPIName();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationImportApi(read_foreignLanguage, read_apis, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAliasedSimpleName read_SyntaxTransformationAliasedSimpleNameBody() throws java.io.IOException {
        readFieldDelim("name = ");
        IdOrOpOrAnonymousName read_name = (IdOrOpOrAnonymousName) readNode();
        readFieldDelim("alias = ");
        Option<IdOrOpOrAnonymousName> read_alias = readOptionOfIdOrOpOrAnonymousName();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAliasedSimpleName(read_name, read_alias, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAliasedAPIName read_SyntaxTransformationAliasedAPINameBody() throws java.io.IOException {
        readFieldDelim("apiName = ");
        APIName read_apiName = (APIName) readNode();
        readFieldDelim("alias = ");
        Option<Id> read_alias = readOptionOfId();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAliasedAPIName(read_apiName, read_alias, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationDecl read_SyntaxTransformationDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationDecl(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTraitObjectDecl read_SyntaxTransformationTraitObjectDeclBody() throws java.io.IOException {
        readFieldDelim("header = ");
        TraitTypeHeader read_header = (TraitTypeHeader) readNode();
        readFieldDelim("selfType = ");
        Option<SelfType> read_selfType = readOptionOfSelfType();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTraitObjectDecl(read_header, read_selfType, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTraitDecl read_SyntaxTransformationTraitDeclBody() throws java.io.IOException {
        readFieldDelim("header = ");
        TraitTypeHeader read_header = (TraitTypeHeader) readNode();
        readFieldDelim("selfType = ");
        Option<SelfType> read_selfType = readOptionOfSelfType();
        readFieldDelim("excludesClause = ");
        List<BaseType> read_excludesClause = readListOfBaseType();
        readFieldDelim("comprisesClause = ");
        Option<List<NamedType>> read_comprisesClause = readOptionOfListOfNamedType();
        readFieldDelim("comprisesEllipses = ");
        boolean read_comprisesEllipses = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTraitDecl(read_header, read_selfType, read_excludesClause, read_comprisesClause, read_comprisesEllipses, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationObjectDecl read_SyntaxTransformationObjectDeclBody() throws java.io.IOException {
        readFieldDelim("header = ");
        TraitTypeHeader read_header = (TraitTypeHeader) readNode();
        readFieldDelim("selfType = ");
        Option<SelfType> read_selfType = readOptionOfSelfType();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationObjectDecl(read_header, read_selfType, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationVarDecl read_SyntaxTransformationVarDeclBody() throws java.io.IOException {
        readFieldDelim("lhs = ");
        List<LValue> read_lhs = readListOfLValue();
        readFieldDelim("init = ");
        Option<Expr> read_init = readOptionOfExpr();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationVarDecl(read_lhs, read_init, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationFnDecl read_SyntaxTransformationFnDeclBody() throws java.io.IOException {
        readFieldDelim("header = ");
        FnHeader read_header = (FnHeader) readNode();
        readFieldDelim("unambiguousName = ");
        IdOrOp read_unambiguousName = (IdOrOp) readNode();
        readFieldDelim("body = ");
        Option<Expr> read_body = readOptionOfExpr();
        readFieldDelim("implementsUnambiguousName = ");
        Option<IdOrOp> read_implementsUnambiguousName = readOptionOfIdOrOp();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationFnDecl(read_header, read_unambiguousName, read_body, read_implementsUnambiguousName, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformation_RewriteFnOverloadDecl read_SyntaxTransformation_RewriteFnOverloadDeclBody() throws java.io.IOException {
        readFieldDelim("name = ");
        IdOrOp read_name = (IdOrOp) readNode();
        readFieldDelim("fns = ");
        List<IdOrOp> read_fns = readListOfIdOrOp();
        readFieldDelim("type = ");
        Option<Type> read_type = readOptionOfType();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformation_RewriteFnOverloadDecl(read_name, read_fns, read_type, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformation_RewriteObjectExprDecl read_SyntaxTransformation_RewriteObjectExprDeclBody() throws java.io.IOException {
        readFieldDelim("objectExprs = ");
        List<_RewriteObjectExpr> read_objectExprs = readListOf_RewriteObjectExpr();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformation_RewriteObjectExprDecl(read_objectExprs, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformation_RewriteFunctionalMethodDecl read_SyntaxTransformation_RewriteFunctionalMethodDeclBody() throws java.io.IOException {
        readFieldDelim("functionalMethodNames = ");
        List<String> read_functionalMethodNames = readListOfString();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformation_RewriteFunctionalMethodDecl(read_functionalMethodNames, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationDimUnitDecl read_SyntaxTransformationDimUnitDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationDimUnitDecl(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationDimDecl read_SyntaxTransformationDimDeclBody() throws java.io.IOException {
        readFieldDelim("dimId = ");
        Id read_dimId = (Id) readNode();
        readFieldDelim("derived = ");
        Option<Type> read_derived = readOptionOfType();
        readFieldDelim("defaultId = ");
        Option<Id> read_defaultId = readOptionOfId();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationDimDecl(read_dimId, read_derived, read_defaultId, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationUnitDecl read_SyntaxTransformationUnitDeclBody() throws java.io.IOException {
        readFieldDelim("si_unit = ");
        boolean read_si_unit = readBoolean();
        readFieldDelim("units = ");
        List<Id> read_units = readListOfId();
        readFieldDelim("dimType = ");
        Option<Type> read_dimType = readOptionOfType();
        readFieldDelim("defExpr = ");
        Option<Expr> read_defExpr = readOptionOfExpr();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationUnitDecl(read_si_unit, read_units, read_dimType, read_defExpr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTestDecl read_SyntaxTransformationTestDeclBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("gens = ");
        List<GeneratorClause> read_gens = readListOfGeneratorClause();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTestDecl(read_name, read_gens, read_expr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationPropertyDecl read_SyntaxTransformationPropertyDeclBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Option<Id> read_name = readOptionOfId();
        readFieldDelim("params = ");
        List<Param> read_params = readListOfParam();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationPropertyDecl(read_name, read_params, read_expr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTypeAlias read_SyntaxTransformationTypeAliasBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("staticParams = ");
        List<StaticParam> read_staticParams = readListOfStaticParam();
        readFieldDelim("typeDef = ");
        Type read_typeDef = (Type) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTypeAlias(read_name, read_staticParams, read_typeDef, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationGrammarDecl read_SyntaxTransformationGrammarDeclBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("extendsClause = ");
        List<Id> read_extendsClause = readListOfId();
        readFieldDelim("members = ");
        List<GrammarMemberDecl> read_members = readListOfGrammarMemberDecl();
        readFieldDelim("transformers = ");
        List<TransformerDecl> read_transformers = readListOfTransformerDecl();
        readFieldDelim("nativeDef = ");
        boolean read_nativeDef = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationGrammarDecl(read_name, read_extendsClause, read_members, read_transformers, read_nativeDef, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationGrammarMemberDecl read_SyntaxTransformationGrammarMemberDeclBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationGrammarMemberDecl(read_name, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNonterminalDecl read_SyntaxTransformationNonterminalDeclBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("syntaxDecls = ");
        List<SyntaxDecl> read_syntaxDecls = readListOfSyntaxDecl();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNonterminalDecl(read_name, read_syntaxDecls, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNonterminalDef read_SyntaxTransformationNonterminalDefBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("syntaxDecls = ");
        List<SyntaxDecl> read_syntaxDecls = readListOfSyntaxDecl();
        readFieldDelim("header = ");
        NonterminalHeader read_header = (NonterminalHeader) readNode();
        readFieldDelim("astType = ");
        Option<BaseType> read_astType = readOptionOfBaseType();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNonterminalDef(read_name, read_syntaxDecls, read_header, read_astType, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNonterminalExtensionDef read_SyntaxTransformationNonterminalExtensionDefBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("syntaxDecls = ");
        List<SyntaxDecl> read_syntaxDecls = readListOfSyntaxDecl();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNonterminalExtensionDef(read_name, read_syntaxDecls, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBinding read_SyntaxTransformationBindingBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("mods = ");
        Modifiers read_mods = (Modifiers) readUnknownObject();
        readFieldDelim("idType = ");
        Option<TypeOrPattern> read_idType = readOptionOfTypeOrPattern();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBinding(read_name, read_mods, read_idType, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationLValue read_SyntaxTransformationLValueBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("mods = ");
        Modifiers read_mods = (Modifiers) readUnknownObject();
        readFieldDelim("idType = ");
        Option<TypeOrPattern> read_idType = readOptionOfTypeOrPattern();
        readFieldDelim("mutable = ");
        boolean read_mutable = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationLValue(read_name, read_mods, read_idType, read_mutable, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationParam read_SyntaxTransformationParamBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("mods = ");
        Modifiers read_mods = (Modifiers) readUnknownObject();
        readFieldDelim("idType = ");
        Option<TypeOrPattern> read_idType = readOptionOfTypeOrPattern();
        readFieldDelim("defaultExpr = ");
        Option<Expr> read_defaultExpr = readOptionOfExpr();
        readFieldDelim("varargsType = ");
        Option<Type> read_varargsType = readOptionOfType();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationParam(read_name, read_mods, read_idType, read_defaultExpr, read_varargsType, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationExpr read_SyntaxTransformationExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationExpr(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationDummyExpr read_SyntaxTransformationDummyExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationDummyExpr(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTypeAnnotatedExpr read_SyntaxTransformationTypeAnnotatedExprBody() throws java.io.IOException {
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("annType = ");
        Type read_annType = (Type) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTypeAnnotatedExpr(read_expr, read_annType, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAsExpr read_SyntaxTransformationAsExprBody() throws java.io.IOException {
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("annType = ");
        Type read_annType = (Type) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAsExpr(read_expr, read_annType, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAsIfExpr read_SyntaxTransformationAsIfExprBody() throws java.io.IOException {
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("annType = ");
        Type read_annType = (Type) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAsIfExpr(read_expr, read_annType, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAssignment read_SyntaxTransformationAssignmentBody() throws java.io.IOException {
        readFieldDelim("lhs = ");
        List<Lhs> read_lhs = readListOfLhs();
        readFieldDelim("assignOp = ");
        Option<FunctionalRef> read_assignOp = readOptionOfFunctionalRef();
        readFieldDelim("rhs = ");
        Expr read_rhs = (Expr) readNode();
        readFieldDelim("assignmentInfos = ");
        List<CompoundAssignmentInfo> read_assignmentInfos = readListOfCompoundAssignmentInfo();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAssignment(read_lhs, read_assignOp, read_rhs, read_assignmentInfos, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBlock read_SyntaxTransformationBlockBody() throws java.io.IOException {
        readFieldDelim("loc = ");
        Option<Expr> read_loc = readOptionOfExpr();
        readFieldDelim("atomicBlock = ");
        boolean read_atomicBlock = readBoolean();
        readFieldDelim("withinDo = ");
        boolean read_withinDo = readBoolean();
        readFieldDelim("exprs = ");
        List<Expr> read_exprs = readListOfExpr();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBlock(read_loc, read_atomicBlock, read_withinDo, read_exprs, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationDo read_SyntaxTransformationDoBody() throws java.io.IOException {
        readFieldDelim("fronts = ");
        List<Block> read_fronts = readListOfBlock();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationDo(read_fronts, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCaseExpr read_SyntaxTransformationCaseExprBody() throws java.io.IOException {
        readFieldDelim("param = ");
        Option<Expr> read_param = readOptionOfExpr();
        readFieldDelim("compare = ");
        Option<FunctionalRef> read_compare = readOptionOfFunctionalRef();
        readFieldDelim("equalsOp = ");
        FunctionalRef read_equalsOp = (FunctionalRef) readNode();
        readFieldDelim("inOp = ");
        FunctionalRef read_inOp = (FunctionalRef) readNode();
        readFieldDelim("clauses = ");
        List<CaseClause> read_clauses = readListOfCaseClause();
        readFieldDelim("elseClause = ");
        Option<Block> read_elseClause = readOptionOfBlock();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCaseExpr(read_param, read_compare, read_equalsOp, read_inOp, read_clauses, read_elseClause, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationIf read_SyntaxTransformationIfBody() throws java.io.IOException {
        readFieldDelim("clauses = ");
        List<IfClause> read_clauses = readListOfIfClause();
        readFieldDelim("elseClause = ");
        Option<Block> read_elseClause = readOptionOfBlock();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationIf(read_clauses, read_elseClause, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationLabel read_SyntaxTransformationLabelBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationLabel(read_name, read_body, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAbstractObjectExpr read_SyntaxTransformationAbstractObjectExprBody() throws java.io.IOException {
        readFieldDelim("header = ");
        TraitTypeHeader read_header = (TraitTypeHeader) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAbstractObjectExpr(read_header, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationObjectExpr read_SyntaxTransformationObjectExprBody() throws java.io.IOException {
        readFieldDelim("header = ");
        TraitTypeHeader read_header = (TraitTypeHeader) readNode();
        readFieldDelim("selfType = ");
        Option<SelfType> read_selfType = readOptionOfSelfType();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationObjectExpr(read_header, read_selfType, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformation_RewriteObjectExpr read_SyntaxTransformation_RewriteObjectExprBody() throws java.io.IOException {
        readFieldDelim("header = ");
        TraitTypeHeader read_header = (TraitTypeHeader) readNode();
        readFieldDelim("implicitTypeParameters = ");
        @SuppressWarnings("unchecked") Map<String, StaticParam> read_implicitTypeParameters = (Map<String, StaticParam>) readUnknownObject();
        readFieldDelim("genSymName = ");
        String read_genSymName = readString();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformation_RewriteObjectExpr(read_header, read_implicitTypeParameters, read_genSymName, read_staticArgs, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTry read_SyntaxTransformationTryBody() throws java.io.IOException {
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("catchClause = ");
        Option<Catch> read_catchClause = readOptionOfCatch();
        readFieldDelim("forbidClause = ");
        List<BaseType> read_forbidClause = readListOfBaseType();
        readFieldDelim("finallyClause = ");
        Option<Block> read_finallyClause = readOptionOfBlock();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTry(read_body, read_catchClause, read_forbidClause, read_finallyClause, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTupleExpr read_SyntaxTransformationTupleExprBody() throws java.io.IOException {
        readFieldDelim("exprs = ");
        List<Expr> read_exprs = readListOfExpr();
        readFieldDelim("varargs = ");
        Option<Expr> read_varargs = readOptionOfExpr();
        readFieldDelim("keywords = ");
        List<KeywordExpr> read_keywords = readListOfKeywordExpr();
        readFieldDelim("inApp = ");
        boolean read_inApp = readBoolean();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTupleExpr(read_exprs, read_varargs, read_keywords, read_inApp, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTypecase read_SyntaxTransformationTypecaseBody() throws java.io.IOException {
        readFieldDelim("bindExpr = ");
        Expr read_bindExpr = (Expr) readNode();
        readFieldDelim("clauses = ");
        List<TypecaseClause> read_clauses = readListOfTypecaseClause();
        readFieldDelim("elseClause = ");
        Option<Block> read_elseClause = readOptionOfBlock();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTypecase(read_bindExpr, read_clauses, read_elseClause, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationWhile read_SyntaxTransformationWhileBody() throws java.io.IOException {
        readFieldDelim("testExpr = ");
        GeneratorClause read_testExpr = (GeneratorClause) readNode();
        readFieldDelim("body = ");
        Do read_body = (Do) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationWhile(read_testExpr, read_body, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationFor read_SyntaxTransformationForBody() throws java.io.IOException {
        readFieldDelim("gens = ");
        List<GeneratorClause> read_gens = readListOfGeneratorClause();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationFor(read_gens, read_body, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBigOpApp read_SyntaxTransformationBigOpAppBody() throws java.io.IOException {
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBigOpApp(read_staticArgs, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAccumulator read_SyntaxTransformationAccumulatorBody() throws java.io.IOException {
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("accOp = ");
        Op read_accOp = (Op) readNode();
        readFieldDelim("gens = ");
        List<GeneratorClause> read_gens = readListOfGeneratorClause();
        readFieldDelim("body = ");
        Expr read_body = (Expr) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAccumulator(read_staticArgs, read_accOp, read_gens, read_body, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationArrayComprehension read_SyntaxTransformationArrayComprehensionBody() throws java.io.IOException {
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("clauses = ");
        List<ArrayComprehensionClause> read_clauses = readListOfArrayComprehensionClause();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationArrayComprehension(read_staticArgs, read_clauses, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAtomicExpr read_SyntaxTransformationAtomicExprBody() throws java.io.IOException {
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAtomicExpr(read_expr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationExit read_SyntaxTransformationExitBody() throws java.io.IOException {
        readFieldDelim("target = ");
        Option<Id> read_target = readOptionOfId();
        readFieldDelim("returnExpr = ");
        Option<Expr> read_returnExpr = readOptionOfExpr();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationExit(read_target, read_returnExpr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationSpawn read_SyntaxTransformationSpawnBody() throws java.io.IOException {
        readFieldDelim("body = ");
        Expr read_body = (Expr) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationSpawn(read_body, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationThrow read_SyntaxTransformationThrowBody() throws java.io.IOException {
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationThrow(read_expr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTryAtomicExpr read_SyntaxTransformationTryAtomicExprBody() throws java.io.IOException {
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTryAtomicExpr(read_expr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationFnExpr read_SyntaxTransformationFnExprBody() throws java.io.IOException {
        readFieldDelim("header = ");
        FnHeader read_header = (FnHeader) readNode();
        readFieldDelim("body = ");
        Expr read_body = (Expr) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationFnExpr(read_header, read_body, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationLetExpr read_SyntaxTransformationLetExprBody() throws java.io.IOException {
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationLetExpr(read_body, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationLetFn read_SyntaxTransformationLetFnBody() throws java.io.IOException {
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("fns = ");
        List<FnDecl> read_fns = readListOfFnDecl();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationLetFn(read_body, read_fns, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationLocalVarDecl read_SyntaxTransformationLocalVarDeclBody() throws java.io.IOException {
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("lhs = ");
        List<LValue> read_lhs = readListOfLValue();
        readFieldDelim("rhs = ");
        Option<Expr> read_rhs = readOptionOfExpr();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationLocalVarDecl(read_body, read_lhs, read_rhs, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationSimpleExpr read_SyntaxTransformationSimpleExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationSimpleExpr(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationSubscriptExpr read_SyntaxTransformationSubscriptExprBody() throws java.io.IOException {
        readFieldDelim("obj = ");
        Expr read_obj = (Expr) readNode();
        readFieldDelim("subs = ");
        List<Expr> read_subs = readListOfExpr();
        readFieldDelim("op = ");
        Option<Op> read_op = readOptionOfOp();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationSubscriptExpr(read_obj, read_subs, read_op, read_staticArgs, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationPrimary read_SyntaxTransformationPrimaryBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationPrimary(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationLiteralExpr read_SyntaxTransformationLiteralExprBody() throws java.io.IOException {
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationLiteralExpr(read_text, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNumberLiteralExpr read_SyntaxTransformationNumberLiteralExprBody() throws java.io.IOException {
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNumberLiteralExpr(read_text, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationFloatLiteralExpr read_SyntaxTransformationFloatLiteralExprBody() throws java.io.IOException {
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("intPart = ");
        BigInteger read_intPart = (BigInteger) readUnknownObject();
        readFieldDelim("numerator = ");
        BigInteger read_numerator = (BigInteger) readUnknownObject();
        readFieldDelim("denomBase = ");
        int read_denomBase = readInt();
        readFieldDelim("denomPower = ");
        int read_denomPower = readInt();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationFloatLiteralExpr(read_text, read_intPart, read_numerator, read_denomBase, read_denomPower, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationIntLiteralExpr read_SyntaxTransformationIntLiteralExprBody() throws java.io.IOException {
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("intVal = ");
        BigInteger read_intVal = (BigInteger) readUnknownObject();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationIntLiteralExpr(read_text, read_intVal, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCharLiteralExpr read_SyntaxTransformationCharLiteralExprBody() throws java.io.IOException {
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("charVal = ");
        int read_charVal = readInt();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCharLiteralExpr(read_text, read_charVal, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationStringLiteralExpr read_SyntaxTransformationStringLiteralExprBody() throws java.io.IOException {
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationStringLiteralExpr(read_text, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationVoidLiteralExpr read_SyntaxTransformationVoidLiteralExprBody() throws java.io.IOException {
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationVoidLiteralExpr(read_text, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBooleanLiteralExpr read_SyntaxTransformationBooleanLiteralExprBody() throws java.io.IOException {
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("booleanVal = ");
        int read_booleanVal = readInt();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBooleanLiteralExpr(read_text, read_booleanVal, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationVarRef read_SyntaxTransformationVarRefBody() throws java.io.IOException {
        readFieldDelim("varId = ");
        Id read_varId = (Id) readNode();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("lexicalDepth = ");
        int read_lexicalDepth = readInt();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationVarRef(read_varId, read_staticArgs, read_lexicalDepth, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationFieldRef read_SyntaxTransformationFieldRefBody() throws java.io.IOException {
        readFieldDelim("obj = ");
        Expr read_obj = (Expr) readNode();
        readFieldDelim("field = ");
        Id read_field = (Id) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationFieldRef(read_obj, read_field, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationFunctionalRef read_SyntaxTransformationFunctionalRefBody() throws java.io.IOException {
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("lexicalDepth = ");
        int read_lexicalDepth = readInt();
        readFieldDelim("originalName = ");
        IdOrOp read_originalName = (IdOrOp) readNode();
        readFieldDelim("names = ");
        List<IdOrOp> read_names = readListOfIdOrOp();
        readFieldDelim("interpOverloadings = ");
        List<Overloading> read_interpOverloadings = readListOfOverloading();
        readFieldDelim("newOverloadings = ");
        List<Overloading> read_newOverloadings = readListOfOverloading();
        readFieldDelim("overloadingType = ");
        Option<Type> read_overloadingType = readOptionOfType();
        readFieldDelim("overloadingSchema = ");
        Option<Type> read_overloadingSchema = readOptionOfType();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationFunctionalRef(read_staticArgs, read_lexicalDepth, read_originalName, read_names, read_interpOverloadings, read_newOverloadings, read_overloadingType, read_overloadingSchema, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationFnRef read_SyntaxTransformationFnRefBody() throws java.io.IOException {
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("lexicalDepth = ");
        int read_lexicalDepth = readInt();
        readFieldDelim("originalName = ");
        IdOrOp read_originalName = (IdOrOp) readNode();
        readFieldDelim("names = ");
        List<IdOrOp> read_names = readListOfIdOrOp();
        readFieldDelim("interpOverloadings = ");
        List<Overloading> read_interpOverloadings = readListOfOverloading();
        readFieldDelim("newOverloadings = ");
        List<Overloading> read_newOverloadings = readListOfOverloading();
        readFieldDelim("overloadingType = ");
        Option<Type> read_overloadingType = readOptionOfType();
        readFieldDelim("overloadingSchema = ");
        Option<Type> read_overloadingSchema = readOptionOfType();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationFnRef(read_staticArgs, read_lexicalDepth, read_originalName, read_names, read_interpOverloadings, read_newOverloadings, read_overloadingType, read_overloadingSchema, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationOpRef read_SyntaxTransformationOpRefBody() throws java.io.IOException {
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("lexicalDepth = ");
        int read_lexicalDepth = readInt();
        readFieldDelim("originalName = ");
        IdOrOp read_originalName = (IdOrOp) readNode();
        readFieldDelim("names = ");
        List<IdOrOp> read_names = readListOfIdOrOp();
        readFieldDelim("interpOverloadings = ");
        List<Overloading> read_interpOverloadings = readListOfOverloading();
        readFieldDelim("newOverloadings = ");
        List<Overloading> read_newOverloadings = readListOfOverloading();
        readFieldDelim("overloadingType = ");
        Option<Type> read_overloadingType = readOptionOfType();
        readFieldDelim("overloadingSchema = ");
        Option<Type> read_overloadingSchema = readOptionOfType();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationOpRef(read_staticArgs, read_lexicalDepth, read_originalName, read_names, read_interpOverloadings, read_newOverloadings, read_overloadingType, read_overloadingSchema, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformation_RewriteFnRef read_SyntaxTransformation_RewriteFnRefBody() throws java.io.IOException {
        readFieldDelim("fnExpr = ");
        Expr read_fnExpr = (Expr) readNode();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformation_RewriteFnRef(read_fnExpr, read_staticArgs, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformation_RewriteObjectExprRef read_SyntaxTransformation_RewriteObjectExprRefBody() throws java.io.IOException {
        readFieldDelim("genSymName = ");
        String read_genSymName = readString();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformation_RewriteObjectExprRef(read_genSymName, read_staticArgs, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationJuxt read_SyntaxTransformationJuxtBody() throws java.io.IOException {
        readFieldDelim("multiJuxt = ");
        FunctionalRef read_multiJuxt = (FunctionalRef) readNode();
        readFieldDelim("infixJuxt = ");
        FunctionalRef read_infixJuxt = (FunctionalRef) readNode();
        readFieldDelim("exprs = ");
        List<Expr> read_exprs = readListOfExpr();
        readFieldDelim("fnApp = ");
        boolean read_fnApp = readBoolean();
        readFieldDelim("tight = ");
        boolean read_tight = readBoolean();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationJuxt(read_multiJuxt, read_infixJuxt, read_exprs, read_fnApp, read_tight, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformation_RewriteFnApp read_SyntaxTransformation_RewriteFnAppBody() throws java.io.IOException {
        readFieldDelim("function = ");
        Expr read_function = (Expr) readNode();
        readFieldDelim("argument = ");
        Expr read_argument = (Expr) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformation_RewriteFnApp(read_function, read_argument, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationOpExpr read_SyntaxTransformationOpExprBody() throws java.io.IOException {
        readFieldDelim("op = ");
        FunctionalRef read_op = (FunctionalRef) readNode();
        readFieldDelim("args = ");
        List<Expr> read_args = readListOfExpr();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationOpExpr(read_op, read_args, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAmbiguousMultifixOpExpr read_SyntaxTransformationAmbiguousMultifixOpExprBody() throws java.io.IOException {
        readFieldDelim("infix_op = ");
        FunctionalRef read_infix_op = (FunctionalRef) readNode();
        readFieldDelim("multifix_op = ");
        FunctionalRef read_multifix_op = (FunctionalRef) readNode();
        readFieldDelim("args = ");
        List<Expr> read_args = readListOfExpr();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAmbiguousMultifixOpExpr(read_infix_op, read_multifix_op, read_args, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationChainExpr read_SyntaxTransformationChainExprBody() throws java.io.IOException {
        readFieldDelim("first = ");
        Expr read_first = (Expr) readNode();
        readFieldDelim("links = ");
        List<Link> read_links = readListOfLink();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationChainExpr(read_first, read_links, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCoercionInvocation read_SyntaxTransformationCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("toType = ");
        Type read_toType = (Type) readNode();
        readFieldDelim("arg = ");
        Expr read_arg = (Expr) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCoercionInvocation(read_toType, read_arg, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTraitCoercionInvocation read_SyntaxTransformationTraitCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("arg = ");
        Expr read_arg = (Expr) readNode();
        readFieldDelim("toType = ");
        TraitType read_toType = (TraitType) readNode();
        readFieldDelim("coercionFn = ");
        FnRef read_coercionFn = (FnRef) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTraitCoercionInvocation(read_arg, read_toType, read_coercionFn, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTupleCoercionInvocation read_SyntaxTransformationTupleCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("arg = ");
        Expr read_arg = (Expr) readNode();
        readFieldDelim("toType = ");
        TupleType read_toType = (TupleType) readNode();
        readFieldDelim("subCoercions = ");
        List<Option<CoercionInvocation>> read_subCoercions = readListOfOptionOfCoercionInvocation();
        readFieldDelim("varargCoercion = ");
        Option<Option<CoercionInvocation>> read_varargCoercion = readOptionOfOptionOfCoercionInvocation();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTupleCoercionInvocation(read_arg, read_toType, read_subCoercions, read_varargCoercion, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationArrowCoercionInvocation read_SyntaxTransformationArrowCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("arg = ");
        Expr read_arg = (Expr) readNode();
        readFieldDelim("toType = ");
        ArrowType read_toType = (ArrowType) readNode();
        readFieldDelim("domainCoercion = ");
        Option<CoercionInvocation> read_domainCoercion = readOptionOfCoercionInvocation();
        readFieldDelim("rangeCoercion = ");
        Option<CoercionInvocation> read_rangeCoercion = readOptionOfCoercionInvocation();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationArrowCoercionInvocation(read_arg, read_toType, read_domainCoercion, read_rangeCoercion, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationUnionCoercionInvocation read_SyntaxTransformationUnionCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("toType = ");
        Type read_toType = (Type) readNode();
        readFieldDelim("arg = ");
        Expr read_arg = (Expr) readNode();
        readFieldDelim("fromTypes = ");
        List<Type> read_fromTypes = readListOfType();
        readFieldDelim("fromCoercions = ");
        List<Option<CoercionInvocation>> read_fromCoercions = readListOfOptionOfCoercionInvocation();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationUnionCoercionInvocation(read_toType, read_arg, read_fromTypes, read_fromCoercions, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationMethodInvocation read_SyntaxTransformationMethodInvocationBody() throws java.io.IOException {
        readFieldDelim("obj = ");
        Expr read_obj = (Expr) readNode();
        readFieldDelim("method = ");
        IdOrOp read_method = (IdOrOp) readNode();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("arg = ");
        Expr read_arg = (Expr) readNode();
        readFieldDelim("overloadingType = ");
        Option<Type> read_overloadingType = readOptionOfType();
        readFieldDelim("overloadingSchema = ");
        Option<Type> read_overloadingSchema = readOptionOfType();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationMethodInvocation(read_obj, read_method, read_staticArgs, read_arg, read_overloadingType, read_overloadingSchema, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationMathPrimary read_SyntaxTransformationMathPrimaryBody() throws java.io.IOException {
        readFieldDelim("multiJuxt = ");
        FunctionalRef read_multiJuxt = (FunctionalRef) readNode();
        readFieldDelim("infixJuxt = ");
        FunctionalRef read_infixJuxt = (FunctionalRef) readNode();
        readFieldDelim("front = ");
        Expr read_front = (Expr) readNode();
        readFieldDelim("rest = ");
        List<MathItem> read_rest = readListOfMathItem();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationMathPrimary(read_multiJuxt, read_infixJuxt, read_front, read_rest, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationArrayExpr read_SyntaxTransformationArrayExprBody() throws java.io.IOException {
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationArrayExpr(read_staticArgs, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationArrayElement read_SyntaxTransformationArrayElementBody() throws java.io.IOException {
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("element = ");
        Expr read_element = (Expr) readNode();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationArrayElement(read_staticArgs, read_element, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationArrayElements read_SyntaxTransformationArrayElementsBody() throws java.io.IOException {
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("dimension = ");
        int read_dimension = readInt();
        readFieldDelim("elements = ");
        List<ArrayExpr> read_elements = readListOfArrayExpr();
        readFieldDelim("outermost = ");
        boolean read_outermost = readBoolean();
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationArrayElements(read_staticArgs, read_dimension, read_elements, read_outermost, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationType read_SyntaxTransformationTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationType(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBaseType read_SyntaxTransformationBaseTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBaseType(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAnyType read_SyntaxTransformationAnyTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAnyType(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBottomType read_SyntaxTransformationBottomTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBottomType(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationUnknownType read_SyntaxTransformationUnknownTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationUnknownType(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationSelfType read_SyntaxTransformationSelfTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationSelfType(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTraitSelfType read_SyntaxTransformationTraitSelfTypeBody() throws java.io.IOException {
        readFieldDelim("named = ");
        BaseType read_named = (BaseType) readNode();
        readFieldDelim("comprised = ");
        List<NamedType> read_comprised = readListOfNamedType();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTraitSelfType(read_named, read_comprised, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationObjectExprType read_SyntaxTransformationObjectExprTypeBody() throws java.io.IOException {
        readFieldDelim("extended = ");
        List<BaseType> read_extended = readListOfBaseType();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationObjectExprType(read_extended, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNamedType read_SyntaxTransformationNamedTypeBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNamedType(read_name, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformation_InferenceVarType read_SyntaxTransformation_InferenceVarTypeBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("id = ");
        Object read_id = (Object) readUnknownObject();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformation_InferenceVarType(read_name, read_id, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationVarType read_SyntaxTransformationVarTypeBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("lexicalDepth = ");
        int read_lexicalDepth = readInt();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationVarType(read_name, read_lexicalDepth, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTraitType read_SyntaxTransformationTraitTypeBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("args = ");
        List<StaticArg> read_args = readListOfStaticArg();
        readFieldDelim("traitStaticParams = ");
        List<StaticParam> read_traitStaticParams = readListOfStaticParam();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTraitType(read_name, read_args, read_traitStaticParams, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAbbreviatedType read_SyntaxTransformationAbbreviatedTypeBody() throws java.io.IOException {
        readFieldDelim("elemType = ");
        Type read_elemType = (Type) readNode();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAbbreviatedType(read_elemType, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationArrayType read_SyntaxTransformationArrayTypeBody() throws java.io.IOException {
        readFieldDelim("elemType = ");
        Type read_elemType = (Type) readNode();
        readFieldDelim("indices = ");
        Indices read_indices = (Indices) readNode();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationArrayType(read_elemType, read_indices, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationMatrixType read_SyntaxTransformationMatrixTypeBody() throws java.io.IOException {
        readFieldDelim("elemType = ");
        Type read_elemType = (Type) readNode();
        readFieldDelim("dimensions = ");
        List<ExtentRange> read_dimensions = readListOfExtentRange();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationMatrixType(read_elemType, read_dimensions, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTaggedDimType read_SyntaxTransformationTaggedDimTypeBody() throws java.io.IOException {
        readFieldDelim("elemType = ");
        Type read_elemType = (Type) readNode();
        readFieldDelim("dimExpr = ");
        DimExpr read_dimExpr = (DimExpr) readNode();
        readFieldDelim("unitExpr = ");
        Option<Expr> read_unitExpr = readOptionOfExpr();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTaggedDimType(read_elemType, read_dimExpr, read_unitExpr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTaggedUnitType read_SyntaxTransformationTaggedUnitTypeBody() throws java.io.IOException {
        readFieldDelim("elemType = ");
        Type read_elemType = (Type) readNode();
        readFieldDelim("unitExpr = ");
        Expr read_unitExpr = (Expr) readNode();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTaggedUnitType(read_elemType, read_unitExpr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTupleType read_SyntaxTransformationTupleTypeBody() throws java.io.IOException {
        readFieldDelim("elements = ");
        List<Type> read_elements = readListOfType();
        readFieldDelim("varargs = ");
        Option<Type> read_varargs = readOptionOfType();
        readFieldDelim("keywords = ");
        List<KeywordType> read_keywords = readListOfKeywordType();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTupleType(read_elements, read_varargs, read_keywords, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationArrowType read_SyntaxTransformationArrowTypeBody() throws java.io.IOException {
        readFieldDelim("domain = ");
        Type read_domain = (Type) readNode();
        readFieldDelim("range = ");
        Type read_range = (Type) readNode();
        readFieldDelim("effect = ");
        Effect read_effect = (Effect) readNode();
        readFieldDelim("io = ");
        boolean read_io = readBoolean();
        readFieldDelim("methodInfo = ");
        Option<MethodInfo> read_methodInfo = readOptionOfMethodInfo();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationArrowType(read_domain, read_range, read_effect, read_io, read_methodInfo, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBoundType read_SyntaxTransformationBoundTypeBody() throws java.io.IOException {
        readFieldDelim("elements = ");
        List<Type> read_elements = readListOfType();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBoundType(read_elements, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationIntersectionType read_SyntaxTransformationIntersectionTypeBody() throws java.io.IOException {
        readFieldDelim("elements = ");
        List<Type> read_elements = readListOfType();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationIntersectionType(read_elements, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationUnionType read_SyntaxTransformationUnionTypeBody() throws java.io.IOException {
        readFieldDelim("elements = ");
        List<Type> read_elements = readListOfType();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationUnionType(read_elements, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationFixedPointType read_SyntaxTransformationFixedPointTypeBody() throws java.io.IOException {
        readFieldDelim("name = ");
        _InferenceVarType read_name = (_InferenceVarType) readNode();
        readFieldDelim("body = ");
        Type read_body = (Type) readNode();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationFixedPointType(read_name, read_body, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationLabelType read_SyntaxTransformationLabelTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationLabelType(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationDimExpr read_SyntaxTransformationDimExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationDimExpr(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationDimBase read_SyntaxTransformationDimBaseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationDimBase(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationDimRef read_SyntaxTransformationDimRefBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationDimRef(read_name, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationDimExponent read_SyntaxTransformationDimExponentBody() throws java.io.IOException {
        readFieldDelim("base = ");
        Type read_base = (Type) readNode();
        readFieldDelim("power = ");
        IntExpr read_power = (IntExpr) readNode();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationDimExponent(read_base, read_power, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationDimUnaryOp read_SyntaxTransformationDimUnaryOpBody() throws java.io.IOException {
        readFieldDelim("dimVal = ");
        DimExpr read_dimVal = (DimExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationDimUnaryOp(read_dimVal, read_op, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationDimBinaryOp read_SyntaxTransformationDimBinaryOpBody() throws java.io.IOException {
        readFieldDelim("left = ");
        DimExpr read_left = (DimExpr) readNode();
        readFieldDelim("right = ");
        DimExpr read_right = (DimExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationDimBinaryOp(read_left, read_right, read_op, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationPattern read_SyntaxTransformationPatternBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Option<Type> read_name = readOptionOfType();
        readFieldDelim("patterns = ");
        PatternArgs read_patterns = (PatternArgs) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationPattern(read_name, read_patterns, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationPatternArgs read_SyntaxTransformationPatternArgsBody() throws java.io.IOException {
        readFieldDelim("patterns = ");
        List<PatternBinding> read_patterns = readListOfPatternBinding();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationPatternArgs(read_patterns, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationPatternBinding read_SyntaxTransformationPatternBindingBody() throws java.io.IOException {
        readFieldDelim("field = ");
        Option<Id> read_field = readOptionOfId();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationPatternBinding(read_field, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationPlainPattern read_SyntaxTransformationPlainPatternBody() throws java.io.IOException {
        readFieldDelim("field = ");
        Option<Id> read_field = readOptionOfId();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("mods = ");
        Modifiers read_mods = (Modifiers) readUnknownObject();
        readFieldDelim("idType = ");
        Option<TypeOrPattern> read_idType = readOptionOfTypeOrPattern();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationPlainPattern(read_field, read_name, read_mods, read_idType, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTypePattern read_SyntaxTransformationTypePatternBody() throws java.io.IOException {
        readFieldDelim("field = ");
        Option<Id> read_field = readOptionOfId();
        readFieldDelim("typ = ");
        Type read_typ = (Type) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTypePattern(read_field, read_typ, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNestedPattern read_SyntaxTransformationNestedPatternBody() throws java.io.IOException {
        readFieldDelim("field = ");
        Option<Id> read_field = readOptionOfId();
        readFieldDelim("pat = ");
        Pattern read_pat = (Pattern) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNestedPattern(read_field, read_pat, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationStaticArg read_SyntaxTransformationStaticArgBody() throws java.io.IOException {
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationStaticArg(read_lifted, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTypeArg read_SyntaxTransformationTypeArgBody() throws java.io.IOException {
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("typeArg = ");
        Type read_typeArg = (Type) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTypeArg(read_lifted, read_typeArg, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationIntArg read_SyntaxTransformationIntArgBody() throws java.io.IOException {
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("intVal = ");
        IntExpr read_intVal = (IntExpr) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationIntArg(read_lifted, read_intVal, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBoolArg read_SyntaxTransformationBoolArgBody() throws java.io.IOException {
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("boolArg = ");
        BoolExpr read_boolArg = (BoolExpr) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBoolArg(read_lifted, read_boolArg, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationOpArg read_SyntaxTransformationOpArgBody() throws java.io.IOException {
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("id = ");
        Op read_id = (Op) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationOpArg(read_lifted, read_id, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationDimArg read_SyntaxTransformationDimArgBody() throws java.io.IOException {
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("dimArg = ");
        DimExpr read_dimArg = (DimExpr) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationDimArg(read_lifted, read_dimArg, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationUnitArg read_SyntaxTransformationUnitArgBody() throws java.io.IOException {
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("unitArg = ");
        UnitExpr read_unitArg = (UnitExpr) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationUnitArg(read_lifted, read_unitArg, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationStaticExpr read_SyntaxTransformationStaticExprBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationStaticExpr(read_parenthesized, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationIntExpr read_SyntaxTransformationIntExprBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationIntExpr(read_parenthesized, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationIntBase read_SyntaxTransformationIntBaseBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("intVal = ");
        IntLiteralExpr read_intVal = (IntLiteralExpr) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationIntBase(read_parenthesized, read_intVal, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationIntRef read_SyntaxTransformationIntRefBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("lexicalDepth = ");
        int read_lexicalDepth = readInt();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationIntRef(read_parenthesized, read_name, read_lexicalDepth, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationIntBinaryOp read_SyntaxTransformationIntBinaryOpBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("left = ");
        IntExpr read_left = (IntExpr) readNode();
        readFieldDelim("right = ");
        IntExpr read_right = (IntExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationIntBinaryOp(read_parenthesized, read_left, read_right, read_op, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBoolExpr read_SyntaxTransformationBoolExprBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBoolExpr(read_parenthesized, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBoolBase read_SyntaxTransformationBoolBaseBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("boolVal = ");
        boolean read_boolVal = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBoolBase(read_parenthesized, read_boolVal, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBoolRef read_SyntaxTransformationBoolRefBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("lexicalDepth = ");
        int read_lexicalDepth = readInt();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBoolRef(read_parenthesized, read_name, read_lexicalDepth, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBoolConstraint read_SyntaxTransformationBoolConstraintBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBoolConstraint(read_parenthesized, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBoolUnaryOp read_SyntaxTransformationBoolUnaryOpBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("boolVal = ");
        BoolExpr read_boolVal = (BoolExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBoolUnaryOp(read_parenthesized, read_boolVal, read_op, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBoolBinaryOp read_SyntaxTransformationBoolBinaryOpBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("left = ");
        BoolExpr read_left = (BoolExpr) readNode();
        readFieldDelim("right = ");
        BoolExpr read_right = (BoolExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBoolBinaryOp(read_parenthesized, read_left, read_right, read_op, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationUnitExpr read_SyntaxTransformationUnitExprBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationUnitExpr(read_parenthesized, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationUnitRef read_SyntaxTransformationUnitRefBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationUnitRef(read_parenthesized, read_name, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationUnitBinaryOp read_SyntaxTransformationUnitBinaryOpBody() throws java.io.IOException {
        readFieldDelim("parenthesized = ");
        boolean read_parenthesized = readBoolean();
        readFieldDelim("left = ");
        UnitExpr read_left = (UnitExpr) readNode();
        readFieldDelim("right = ");
        UnitExpr read_right = (UnitExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationUnitBinaryOp(read_parenthesized, read_left, read_right, read_op, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationEffect read_SyntaxTransformationEffectBody() throws java.io.IOException {
        readFieldDelim("throwsClause = ");
        Option<List<Type>> read_throwsClause = readOptionOfListOfType();
        readFieldDelim("ioEffect = ");
        boolean read_ioEffect = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationEffect(read_throwsClause, read_ioEffect, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationWhereClause read_SyntaxTransformationWhereClauseBody() throws java.io.IOException {
        readFieldDelim("bindings = ");
        List<WhereBinding> read_bindings = readListOfWhereBinding();
        readFieldDelim("constraints = ");
        List<WhereConstraint> read_constraints = readListOfWhereConstraint();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationWhereClause(read_bindings, read_constraints, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationWhereBinding read_SyntaxTransformationWhereBindingBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("supers = ");
        List<BaseType> read_supers = readListOfBaseType();
        readFieldDelim("kind = ");
        StaticParamKind read_kind = (StaticParamKind) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationWhereBinding(read_name, read_supers, read_kind, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationWhereConstraint read_SyntaxTransformationWhereConstraintBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationWhereConstraint(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationWhereExtends read_SyntaxTransformationWhereExtendsBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("supers = ");
        List<BaseType> read_supers = readListOfBaseType();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationWhereExtends(read_name, read_supers, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationWhereTypeAlias read_SyntaxTransformationWhereTypeAliasBody() throws java.io.IOException {
        readFieldDelim("alias = ");
        TypeAlias read_alias = (TypeAlias) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationWhereTypeAlias(read_alias, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationWhereCoerces read_SyntaxTransformationWhereCoercesBody() throws java.io.IOException {
        readFieldDelim("left = ");
        Type read_left = (Type) readNode();
        readFieldDelim("right = ");
        Type read_right = (Type) readNode();
        readFieldDelim("coerces = ");
        boolean read_coerces = readBoolean();
        readFieldDelim("widens = ");
        boolean read_widens = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationWhereCoerces(read_left, read_right, read_coerces, read_widens, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationWhereEquals read_SyntaxTransformationWhereEqualsBody() throws java.io.IOException {
        readFieldDelim("left = ");
        Id read_left = (Id) readNode();
        readFieldDelim("right = ");
        Id read_right = (Id) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationWhereEquals(read_left, read_right, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationUnitConstraint read_SyntaxTransformationUnitConstraintBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationUnitConstraint(read_name, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationIntConstraint read_SyntaxTransformationIntConstraintBody() throws java.io.IOException {
        readFieldDelim("left = ");
        IntExpr read_left = (IntExpr) readNode();
        readFieldDelim("right = ");
        IntExpr read_right = (IntExpr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationIntConstraint(read_left, read_right, read_op, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBoolConstraintExpr read_SyntaxTransformationBoolConstraintExprBody() throws java.io.IOException {
        readFieldDelim("constraint = ");
        BoolConstraint read_constraint = (BoolConstraint) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBoolConstraintExpr(read_constraint, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationContract read_SyntaxTransformationContractBody() throws java.io.IOException {
        readFieldDelim("requiresClause = ");
        Option<List<Expr>> read_requiresClause = readOptionOfListOfExpr();
        readFieldDelim("ensuresClause = ");
        Option<List<EnsuresClause>> read_ensuresClause = readOptionOfListOfEnsuresClause();
        readFieldDelim("invariantsClause = ");
        Option<List<Expr>> read_invariantsClause = readOptionOfListOfExpr();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationContract(read_requiresClause, read_ensuresClause, read_invariantsClause, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationEnsuresClause read_SyntaxTransformationEnsuresClauseBody() throws java.io.IOException {
        readFieldDelim("post = ");
        Expr read_post = (Expr) readNode();
        readFieldDelim("pre = ");
        Option<Expr> read_pre = readOptionOfExpr();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationEnsuresClause(read_post, read_pre, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationStaticParam read_SyntaxTransformationStaticParamBody() throws java.io.IOException {
        readFieldDelim("variance = ");
        int read_variance = readInt();
        readFieldDelim("name = ");
        IdOrOp read_name = (IdOrOp) readNode();
        readFieldDelim("extendsClause = ");
        List<BaseType> read_extendsClause = readListOfBaseType();
        readFieldDelim("dominatesClause = ");
        List<BaseType> read_dominatesClause = readListOfBaseType();
        readFieldDelim("dimParam = ");
        Option<Type> read_dimParam = readOptionOfType();
        readFieldDelim("absorbsParam = ");
        boolean read_absorbsParam = readBoolean();
        readFieldDelim("kind = ");
        StaticParamKind read_kind = (StaticParamKind) readNode();
        readFieldDelim("lifted = ");
        boolean read_lifted = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationStaticParam(read_variance, read_name, read_extendsClause, read_dominatesClause, read_dimParam, read_absorbsParam, read_kind, read_lifted, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationName read_SyntaxTransformationNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationName(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAPIName read_SyntaxTransformationAPINameBody() throws java.io.IOException {
        readFieldDelim("ids = ");
        List<Id> read_ids = readListOfId();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAPIName(read_ids, read_text, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationIdOrOpOrAnonymousName read_SyntaxTransformationIdOrOpOrAnonymousNameBody() throws java.io.IOException {
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationIdOrOpOrAnonymousName(read_apiName, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationIdOrOp read_SyntaxTransformationIdOrOpBody() throws java.io.IOException {
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationIdOrOp(read_apiName, read_text, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationId read_SyntaxTransformationIdBody() throws java.io.IOException {
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationId(read_apiName, read_text, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationOp read_SyntaxTransformationOpBody() throws java.io.IOException {
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("fixity = ");
        Fixity read_fixity = (Fixity) readNode();
        readFieldDelim("enclosing = ");
        boolean read_enclosing = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationOp(read_apiName, read_text, read_fixity, read_enclosing, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNamedOp read_SyntaxTransformationNamedOpBody() throws java.io.IOException {
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("fixity = ");
        Fixity read_fixity = (Fixity) readNode();
        readFieldDelim("enclosing = ");
        boolean read_enclosing = readBoolean();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNamedOp(read_apiName, read_text, read_fixity, read_enclosing, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformation_InferenceVarOp read_SyntaxTransformation_InferenceVarOpBody() throws java.io.IOException {
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("fixity = ");
        Fixity read_fixity = (Fixity) readNode();
        readFieldDelim("enclosing = ");
        boolean read_enclosing = readBoolean();
        readFieldDelim("id = ");
        Object read_id = (Object) readUnknownObject();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformation_InferenceVarOp(read_apiName, read_text, read_fixity, read_enclosing, read_id, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAnonymousName read_SyntaxTransformationAnonymousNameBody() throws java.io.IOException {
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAnonymousName(read_apiName, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAnonymousFnName read_SyntaxTransformationAnonymousFnNameBody() throws java.io.IOException {
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAnonymousFnName(read_apiName, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationConstructorFnName read_SyntaxTransformationConstructorFnNameBody() throws java.io.IOException {
        readFieldDelim("apiName = ");
        Option<APIName> read_apiName = readOptionOfAPIName();
        readFieldDelim("constructor = ");
        ObjectConstructor read_constructor = (ObjectConstructor) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationConstructorFnName(read_apiName, read_constructor, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationArrayComprehensionClause read_SyntaxTransformationArrayComprehensionClauseBody() throws java.io.IOException {
        readFieldDelim("bind = ");
        List<Expr> read_bind = readListOfExpr();
        readFieldDelim("init = ");
        Expr read_init = (Expr) readNode();
        readFieldDelim("gens = ");
        List<GeneratorClause> read_gens = readListOfGeneratorClause();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationArrayComprehensionClause(read_bind, read_init, read_gens, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationKeywordExpr read_SyntaxTransformationKeywordExprBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("init = ");
        Expr read_init = (Expr) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationKeywordExpr(read_name, read_init, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCaseClause read_SyntaxTransformationCaseClauseBody() throws java.io.IOException {
        readFieldDelim("matchClause = ");
        Expr read_matchClause = (Expr) readNode();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("op = ");
        Option<FunctionalRef> read_op = readOptionOfFunctionalRef();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCaseClause(read_matchClause, read_body, read_op, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCatch read_SyntaxTransformationCatchBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("clauses = ");
        List<CatchClause> read_clauses = readListOfCatchClause();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCatch(read_name, read_clauses, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCatchClause read_SyntaxTransformationCatchClauseBody() throws java.io.IOException {
        readFieldDelim("matchType = ");
        BaseType read_matchType = (BaseType) readNode();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCatchClause(read_matchType, read_body, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationIfClause read_SyntaxTransformationIfClauseBody() throws java.io.IOException {
        readFieldDelim("testClause = ");
        GeneratorClause read_testClause = (GeneratorClause) readNode();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationIfClause(read_testClause, read_body, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTypecaseClause read_SyntaxTransformationTypecaseClauseBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Option<Id> read_name = readOptionOfId();
        readFieldDelim("matchType = ");
        TypeOrPattern read_matchType = (TypeOrPattern) readNode();
        readFieldDelim("body = ");
        Block read_body = (Block) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTypecaseClause(read_name, read_matchType, read_body, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationExtentRange read_SyntaxTransformationExtentRangeBody() throws java.io.IOException {
        readFieldDelim("base = ");
        Option<StaticArg> read_base = readOptionOfStaticArg();
        readFieldDelim("size = ");
        Option<StaticArg> read_size = readOptionOfStaticArg();
        readFieldDelim("op = ");
        Option<Op> read_op = readOptionOfOp();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationExtentRange(read_base, read_size, read_op, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationGeneratorClause read_SyntaxTransformationGeneratorClauseBody() throws java.io.IOException {
        readFieldDelim("bind = ");
        List<Id> read_bind = readListOfId();
        readFieldDelim("init = ");
        Expr read_init = (Expr) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationGeneratorClause(read_bind, read_init, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationKeywordType read_SyntaxTransformationKeywordTypeBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("keywordType = ");
        Type read_keywordType = (Type) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationKeywordType(read_name, read_keywordType, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTraitTypeWhere read_SyntaxTransformationTraitTypeWhereBody() throws java.io.IOException {
        readFieldDelim("baseType = ");
        BaseType read_baseType = (BaseType) readNode();
        readFieldDelim("whereClause = ");
        Option<WhereClause> read_whereClause = readOptionOfWhereClause();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTraitTypeWhere(read_baseType, read_whereClause, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationIndices read_SyntaxTransformationIndicesBody() throws java.io.IOException {
        readFieldDelim("extents = ");
        List<ExtentRange> read_extents = readListOfExtentRange();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationIndices(read_extents, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationMathItem read_SyntaxTransformationMathItemBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationMathItem(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationExprMI read_SyntaxTransformationExprMIBody() throws java.io.IOException {
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationExprMI(read_expr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationParenthesisDelimitedMI read_SyntaxTransformationParenthesisDelimitedMIBody() throws java.io.IOException {
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationParenthesisDelimitedMI(read_expr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNonParenthesisDelimitedMI read_SyntaxTransformationNonParenthesisDelimitedMIBody() throws java.io.IOException {
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNonParenthesisDelimitedMI(read_expr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNonExprMI read_SyntaxTransformationNonExprMIBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNonExprMI(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationExponentiationMI read_SyntaxTransformationExponentiationMIBody() throws java.io.IOException {
        readFieldDelim("op = ");
        FunctionalRef read_op = (FunctionalRef) readNode();
        readFieldDelim("expr = ");
        Option<Expr> read_expr = readOptionOfExpr();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationExponentiationMI(read_op, read_expr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationSubscriptingMI read_SyntaxTransformationSubscriptingMIBody() throws java.io.IOException {
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        readFieldDelim("exprs = ");
        List<Expr> read_exprs = readListOfExpr();
        readFieldDelim("staticArgs = ");
        List<StaticArg> read_staticArgs = readListOfStaticArg();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationSubscriptingMI(read_op, read_exprs, read_staticArgs, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationOverloading read_SyntaxTransformationOverloadingBody() throws java.io.IOException {
        readFieldDelim("unambiguousName = ");
        IdOrOp read_unambiguousName = (IdOrOp) readNode();
        readFieldDelim("originalName = ");
        IdOrOp read_originalName = (IdOrOp) readNode();
        readFieldDelim("type = ");
        Option<ArrowType> read_type = readOptionOfArrowType();
        readFieldDelim("schema = ");
        Option<ArrowType> read_schema = readOptionOfArrowType();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationOverloading(read_unambiguousName, read_originalName, read_type, read_schema, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNonterminalHeader read_SyntaxTransformationNonterminalHeaderBody() throws java.io.IOException {
        readFieldDelim("mods = ");
        Modifiers read_mods = (Modifiers) readUnknownObject();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("params = ");
        List<NonterminalParameter> read_params = readListOfNonterminalParameter();
        readFieldDelim("staticParams = ");
        List<StaticParam> read_staticParams = readListOfStaticParam();
        readFieldDelim("paramType = ");
        Option<Type> read_paramType = readOptionOfType();
        readFieldDelim("whereClause = ");
        Option<WhereClause> read_whereClause = readOptionOfWhereClause();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNonterminalHeader(read_mods, read_name, read_params, read_staticParams, read_paramType, read_whereClause, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNonterminalParameter read_SyntaxTransformationNonterminalParameterBody() throws java.io.IOException {
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("paramType = ");
        BaseType read_paramType = (BaseType) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNonterminalParameter(read_name, read_paramType, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationSyntaxDecl read_SyntaxTransformationSyntaxDeclBody() throws java.io.IOException {
        readFieldDelim("modifier = ");
        Option<String> read_modifier = readOptionOfString();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationSyntaxDecl(read_modifier, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationSyntaxDef read_SyntaxTransformationSyntaxDefBody() throws java.io.IOException {
        readFieldDelim("modifier = ");
        Option<String> read_modifier = readOptionOfString();
        readFieldDelim("syntaxSymbols = ");
        List<SyntaxSymbol> read_syntaxSymbols = readListOfSyntaxSymbol();
        readFieldDelim("transformer = ");
        TransformerDecl read_transformer = (TransformerDecl) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationSyntaxDef(read_modifier, read_syntaxSymbols, read_transformer, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationSuperSyntaxDef read_SyntaxTransformationSuperSyntaxDefBody() throws java.io.IOException {
        readFieldDelim("modifier = ");
        Option<String> read_modifier = readOptionOfString();
        readFieldDelim("nonterminal = ");
        Id read_nonterminal = (Id) readNode();
        readFieldDelim("grammarId = ");
        Id read_grammarId = (Id) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationSuperSyntaxDef(read_modifier, read_nonterminal, read_grammarId, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTransformerDecl read_SyntaxTransformationTransformerDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTransformerDecl(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationPreTransformerDef read_SyntaxTransformationPreTransformerDefBody() throws java.io.IOException {
        readFieldDelim("transformer = ");
        Transformer read_transformer = (Transformer) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationPreTransformerDef(read_transformer, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNamedTransformerDef read_SyntaxTransformationNamedTransformerDefBody() throws java.io.IOException {
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("parameters = ");
        List<NonterminalParameter> read_parameters = readListOfNonterminalParameter();
        readFieldDelim("transformer = ");
        Transformer read_transformer = (Transformer) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNamedTransformerDef(read_name, read_parameters, read_transformer, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTransformer read_SyntaxTransformationTransformerBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTransformer(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationUnparsedTransformer read_SyntaxTransformationUnparsedTransformerBody() throws java.io.IOException {
        readFieldDelim("transformer = ");
        String read_transformer = readString();
        readFieldDelim("nonterminal = ");
        Id read_nonterminal = (Id) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationUnparsedTransformer(read_transformer, read_nonterminal, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNodeTransformer read_SyntaxTransformationNodeTransformerBody() throws java.io.IOException {
        readFieldDelim("node = ");
        AbstractNode read_node = (AbstractNode) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNodeTransformer(read_node, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCaseTransformer read_SyntaxTransformationCaseTransformerBody() throws java.io.IOException {
        readFieldDelim("gapName = ");
        Id read_gapName = (Id) readNode();
        readFieldDelim("clauses = ");
        List<CaseTransformerClause> read_clauses = readListOfCaseTransformerClause();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCaseTransformer(read_gapName, read_clauses, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCaseTransformerClause read_SyntaxTransformationCaseTransformerClauseBody() throws java.io.IOException {
        readFieldDelim("constructor = ");
        Id read_constructor = (Id) readNode();
        readFieldDelim("parameters = ");
        List<Id> read_parameters = readListOfId();
        readFieldDelim("body = ");
        Transformer read_body = (Transformer) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCaseTransformerClause(read_constructor, read_parameters, read_body, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationSyntaxSymbol read_SyntaxTransformationSyntaxSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationSyntaxSymbol(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationPrefixedSymbol read_SyntaxTransformationPrefixedSymbolBody() throws java.io.IOException {
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationPrefixedSymbol(read_id, read_symbol, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationOptionalSymbol read_SyntaxTransformationOptionalSymbolBody() throws java.io.IOException {
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationOptionalSymbol(read_symbol, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationRepeatSymbol read_SyntaxTransformationRepeatSymbolBody() throws java.io.IOException {
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationRepeatSymbol(read_symbol, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationRepeatOneOrMoreSymbol read_SyntaxTransformationRepeatOneOrMoreSymbolBody() throws java.io.IOException {
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationRepeatOneOrMoreSymbol(read_symbol, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNoWhitespaceSymbol read_SyntaxTransformationNoWhitespaceSymbolBody() throws java.io.IOException {
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNoWhitespaceSymbol(read_symbol, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationGroupSymbol read_SyntaxTransformationGroupSymbolBody() throws java.io.IOException {
        readFieldDelim("symbols = ");
        List<SyntaxSymbol> read_symbols = readListOfSyntaxSymbol();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationGroupSymbol(read_symbols, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationSpecialSymbol read_SyntaxTransformationSpecialSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationSpecialSymbol(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAnyCharacterSymbol read_SyntaxTransformationAnyCharacterSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAnyCharacterSymbol(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationWhitespaceSymbol read_SyntaxTransformationWhitespaceSymbolBody() throws java.io.IOException {
        readFieldDelim("s = ");
        String read_s = readString();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationWhitespaceSymbol(read_s, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTabSymbol read_SyntaxTransformationTabSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTabSymbol(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationFormfeedSymbol read_SyntaxTransformationFormfeedSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationFormfeedSymbol(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCarriageReturnSymbol read_SyntaxTransformationCarriageReturnSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCarriageReturnSymbol(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBackspaceSymbol read_SyntaxTransformationBackspaceSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBackspaceSymbol(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNewlineSymbol read_SyntaxTransformationNewlineSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNewlineSymbol(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationBreaklineSymbol read_SyntaxTransformationBreaklineSymbolBody() throws java.io.IOException {
        readFieldDelim("s = ");
        String read_s = readString();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationBreaklineSymbol(read_s, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationItemSymbol read_SyntaxTransformationItemSymbolBody() throws java.io.IOException {
        readFieldDelim("item = ");
        String read_item = readString();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationItemSymbol(read_item, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNonterminalSymbol read_SyntaxTransformationNonterminalSymbolBody() throws java.io.IOException {
        readFieldDelim("nonterminal = ");
        Id read_nonterminal = (Id) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNonterminalSymbol(read_nonterminal, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationKeywordSymbol read_SyntaxTransformationKeywordSymbolBody() throws java.io.IOException {
        readFieldDelim("token = ");
        String read_token = readString();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationKeywordSymbol(read_token, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationTokenSymbol read_SyntaxTransformationTokenSymbolBody() throws java.io.IOException {
        readFieldDelim("token = ");
        String read_token = readString();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationTokenSymbol(read_token, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationNotPredicateSymbol read_SyntaxTransformationNotPredicateSymbolBody() throws java.io.IOException {
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationNotPredicateSymbol(read_symbol, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationAndPredicateSymbol read_SyntaxTransformationAndPredicateSymbolBody() throws java.io.IOException {
        readFieldDelim("symbol = ");
        SyntaxSymbol read_symbol = (SyntaxSymbol) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationAndPredicateSymbol(read_symbol, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCharacterClassSymbol read_SyntaxTransformationCharacterClassSymbolBody() throws java.io.IOException {
        readFieldDelim("characters = ");
        List<CharacterSymbol> read_characters = readListOfCharacterSymbol();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCharacterClassSymbol(read_characters, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCharacterSymbol read_SyntaxTransformationCharacterSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCharacterSymbol(read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCharSymbol read_SyntaxTransformationCharSymbolBody() throws java.io.IOException {
        readFieldDelim("string = ");
        String read_string = readString();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCharSymbol(read_string, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationCharacterInterval read_SyntaxTransformationCharacterIntervalBody() throws java.io.IOException {
        readFieldDelim("beginSymbol = ");
        String read_beginSymbol = readString();
        readFieldDelim("endSymbol = ");
        String read_endSymbol = readString();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationCharacterInterval(read_beginSymbol, read_endSymbol, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _SyntaxTransformationLink read_SyntaxTransformationLinkBody() throws java.io.IOException {
        readFieldDelim("op = ");
        FunctionalRef read_op = (FunctionalRef) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("variables = ");
        @SuppressWarnings("unchecked") java.util.Map<String, Level> read_variables = (java.util.Map<String, Level>) readUnknownObject();
        readFieldDelim("syntaxParameters = ");
        java.util.List<String> read_syntaxParameters = read_java_util_ListOfString();
        readFieldDelim("syntaxTransformer = ");
        String read_syntaxTransformer = readString();
        return new _SyntaxTransformationLink(read_op, read_expr, read_info, read_variables, read_syntaxParameters, read_syntaxTransformer);
    }

    private _EllipsesAbstractNode read_EllipsesAbstractNodeBody() throws java.io.IOException {
        return new _EllipsesAbstractNode();
    }

    private _EllipsesCompilationUnit read_EllipsesCompilationUnitBody() throws java.io.IOException {
        return new _EllipsesCompilationUnit();
    }

    private _EllipsesComponent read_EllipsesComponentBody() throws java.io.IOException {
        return new _EllipsesComponent();
    }

    private _EllipsesApi read_EllipsesApiBody() throws java.io.IOException {
        return new _EllipsesApi();
    }

    private _EllipsesImport read_EllipsesImportBody() throws java.io.IOException {
        return new _EllipsesImport();
    }

    private _EllipsesImportedNames read_EllipsesImportedNamesBody() throws java.io.IOException {
        return new _EllipsesImportedNames();
    }

    private _EllipsesImportStar read_EllipsesImportStarBody() throws java.io.IOException {
        return new _EllipsesImportStar();
    }

    private _EllipsesImportNames read_EllipsesImportNamesBody() throws java.io.IOException {
        return new _EllipsesImportNames();
    }

    private _EllipsesImportApi read_EllipsesImportApiBody() throws java.io.IOException {
        return new _EllipsesImportApi();
    }

    private _EllipsesAliasedSimpleName read_EllipsesAliasedSimpleNameBody() throws java.io.IOException {
        return new _EllipsesAliasedSimpleName();
    }

    private _EllipsesAliasedAPIName read_EllipsesAliasedAPINameBody() throws java.io.IOException {
        return new _EllipsesAliasedAPIName();
    }

    private _EllipsesDecl read_EllipsesDeclBody() throws java.io.IOException {
        return new _EllipsesDecl();
    }

    private _EllipsesTraitObjectDecl read_EllipsesTraitObjectDeclBody() throws java.io.IOException {
        return new _EllipsesTraitObjectDecl();
    }

    private _EllipsesTraitDecl read_EllipsesTraitDeclBody() throws java.io.IOException {
        return new _EllipsesTraitDecl();
    }

    private _EllipsesObjectDecl read_EllipsesObjectDeclBody() throws java.io.IOException {
        return new _EllipsesObjectDecl();
    }

    private _EllipsesVarDecl read_EllipsesVarDeclBody() throws java.io.IOException {
        return new _EllipsesVarDecl();
    }

    private _EllipsesFnDecl read_EllipsesFnDeclBody() throws java.io.IOException {
        return new _EllipsesFnDecl();
    }

    private _Ellipses_RewriteFnOverloadDecl read_Ellipses_RewriteFnOverloadDeclBody() throws java.io.IOException {
        return new _Ellipses_RewriteFnOverloadDecl();
    }

    private _Ellipses_RewriteObjectExprDecl read_Ellipses_RewriteObjectExprDeclBody() throws java.io.IOException {
        return new _Ellipses_RewriteObjectExprDecl();
    }

    private _Ellipses_RewriteFunctionalMethodDecl read_Ellipses_RewriteFunctionalMethodDeclBody() throws java.io.IOException {
        return new _Ellipses_RewriteFunctionalMethodDecl();
    }

    private _EllipsesDimUnitDecl read_EllipsesDimUnitDeclBody() throws java.io.IOException {
        return new _EllipsesDimUnitDecl();
    }

    private _EllipsesDimDecl read_EllipsesDimDeclBody() throws java.io.IOException {
        return new _EllipsesDimDecl();
    }

    private _EllipsesUnitDecl read_EllipsesUnitDeclBody() throws java.io.IOException {
        return new _EllipsesUnitDecl();
    }

    private _EllipsesTestDecl read_EllipsesTestDeclBody() throws java.io.IOException {
        return new _EllipsesTestDecl();
    }

    private _EllipsesPropertyDecl read_EllipsesPropertyDeclBody() throws java.io.IOException {
        return new _EllipsesPropertyDecl();
    }

    private _EllipsesTypeAlias read_EllipsesTypeAliasBody() throws java.io.IOException {
        return new _EllipsesTypeAlias();
    }

    private _EllipsesGrammarDecl read_EllipsesGrammarDeclBody() throws java.io.IOException {
        return new _EllipsesGrammarDecl();
    }

    private _EllipsesGrammarMemberDecl read_EllipsesGrammarMemberDeclBody() throws java.io.IOException {
        return new _EllipsesGrammarMemberDecl();
    }

    private _EllipsesNonterminalDecl read_EllipsesNonterminalDeclBody() throws java.io.IOException {
        return new _EllipsesNonterminalDecl();
    }

    private _EllipsesNonterminalDef read_EllipsesNonterminalDefBody() throws java.io.IOException {
        return new _EllipsesNonterminalDef();
    }

    private _EllipsesNonterminalExtensionDef read_EllipsesNonterminalExtensionDefBody() throws java.io.IOException {
        return new _EllipsesNonterminalExtensionDef();
    }

    private _EllipsesBinding read_EllipsesBindingBody() throws java.io.IOException {
        return new _EllipsesBinding();
    }

    private _EllipsesLValue read_EllipsesLValueBody() throws java.io.IOException {
        return new _EllipsesLValue();
    }

    private _EllipsesParam read_EllipsesParamBody() throws java.io.IOException {
        return new _EllipsesParam();
    }

    private _EllipsesExpr read_EllipsesExprBody() throws java.io.IOException {
        return new _EllipsesExpr();
    }

    private _EllipsesDummyExpr read_EllipsesDummyExprBody() throws java.io.IOException {
        return new _EllipsesDummyExpr();
    }

    private _EllipsesTypeAnnotatedExpr read_EllipsesTypeAnnotatedExprBody() throws java.io.IOException {
        return new _EllipsesTypeAnnotatedExpr();
    }

    private _EllipsesAsExpr read_EllipsesAsExprBody() throws java.io.IOException {
        return new _EllipsesAsExpr();
    }

    private _EllipsesAsIfExpr read_EllipsesAsIfExprBody() throws java.io.IOException {
        return new _EllipsesAsIfExpr();
    }

    private _EllipsesAssignment read_EllipsesAssignmentBody() throws java.io.IOException {
        return new _EllipsesAssignment();
    }

    private _EllipsesBlock read_EllipsesBlockBody() throws java.io.IOException {
        return new _EllipsesBlock();
    }

    private _EllipsesDo read_EllipsesDoBody() throws java.io.IOException {
        return new _EllipsesDo();
    }

    private _EllipsesCaseExpr read_EllipsesCaseExprBody() throws java.io.IOException {
        return new _EllipsesCaseExpr();
    }

    private _EllipsesIf read_EllipsesIfBody() throws java.io.IOException {
        return new _EllipsesIf();
    }

    private _EllipsesLabel read_EllipsesLabelBody() throws java.io.IOException {
        return new _EllipsesLabel();
    }

    private _EllipsesAbstractObjectExpr read_EllipsesAbstractObjectExprBody() throws java.io.IOException {
        return new _EllipsesAbstractObjectExpr();
    }

    private _EllipsesObjectExpr read_EllipsesObjectExprBody() throws java.io.IOException {
        return new _EllipsesObjectExpr();
    }

    private _Ellipses_RewriteObjectExpr read_Ellipses_RewriteObjectExprBody() throws java.io.IOException {
        return new _Ellipses_RewriteObjectExpr();
    }

    private _EllipsesTry read_EllipsesTryBody() throws java.io.IOException {
        return new _EllipsesTry();
    }

    private _EllipsesTupleExpr read_EllipsesTupleExprBody() throws java.io.IOException {
        return new _EllipsesTupleExpr();
    }

    private _EllipsesTypecase read_EllipsesTypecaseBody() throws java.io.IOException {
        return new _EllipsesTypecase();
    }

    private _EllipsesWhile read_EllipsesWhileBody() throws java.io.IOException {
        return new _EllipsesWhile();
    }

    private _EllipsesFor read_EllipsesForBody() throws java.io.IOException {
        return new _EllipsesFor();
    }

    private _EllipsesBigOpApp read_EllipsesBigOpAppBody() throws java.io.IOException {
        return new _EllipsesBigOpApp();
    }

    private _EllipsesAccumulator read_EllipsesAccumulatorBody() throws java.io.IOException {
        return new _EllipsesAccumulator();
    }

    private _EllipsesArrayComprehension read_EllipsesArrayComprehensionBody() throws java.io.IOException {
        return new _EllipsesArrayComprehension();
    }

    private _EllipsesAtomicExpr read_EllipsesAtomicExprBody() throws java.io.IOException {
        return new _EllipsesAtomicExpr();
    }

    private _EllipsesExit read_EllipsesExitBody() throws java.io.IOException {
        return new _EllipsesExit();
    }

    private _EllipsesSpawn read_EllipsesSpawnBody() throws java.io.IOException {
        return new _EllipsesSpawn();
    }

    private _EllipsesThrow read_EllipsesThrowBody() throws java.io.IOException {
        return new _EllipsesThrow();
    }

    private _EllipsesTryAtomicExpr read_EllipsesTryAtomicExprBody() throws java.io.IOException {
        return new _EllipsesTryAtomicExpr();
    }

    private _EllipsesFnExpr read_EllipsesFnExprBody() throws java.io.IOException {
        return new _EllipsesFnExpr();
    }

    private _EllipsesLetExpr read_EllipsesLetExprBody() throws java.io.IOException {
        return new _EllipsesLetExpr();
    }

    private _EllipsesLetFn read_EllipsesLetFnBody() throws java.io.IOException {
        return new _EllipsesLetFn();
    }

    private _EllipsesLocalVarDecl read_EllipsesLocalVarDeclBody() throws java.io.IOException {
        return new _EllipsesLocalVarDecl();
    }

    private _EllipsesSimpleExpr read_EllipsesSimpleExprBody() throws java.io.IOException {
        return new _EllipsesSimpleExpr();
    }

    private _EllipsesSubscriptExpr read_EllipsesSubscriptExprBody() throws java.io.IOException {
        return new _EllipsesSubscriptExpr();
    }

    private _EllipsesPrimary read_EllipsesPrimaryBody() throws java.io.IOException {
        return new _EllipsesPrimary();
    }

    private _EllipsesLiteralExpr read_EllipsesLiteralExprBody() throws java.io.IOException {
        return new _EllipsesLiteralExpr();
    }

    private _EllipsesNumberLiteralExpr read_EllipsesNumberLiteralExprBody() throws java.io.IOException {
        return new _EllipsesNumberLiteralExpr();
    }

    private _EllipsesFloatLiteralExpr read_EllipsesFloatLiteralExprBody() throws java.io.IOException {
        return new _EllipsesFloatLiteralExpr();
    }

    private _EllipsesIntLiteralExpr read_EllipsesIntLiteralExprBody() throws java.io.IOException {
        return new _EllipsesIntLiteralExpr();
    }

    private _EllipsesCharLiteralExpr read_EllipsesCharLiteralExprBody() throws java.io.IOException {
        return new _EllipsesCharLiteralExpr();
    }

    private _EllipsesStringLiteralExpr read_EllipsesStringLiteralExprBody() throws java.io.IOException {
        return new _EllipsesStringLiteralExpr();
    }

    private _EllipsesVoidLiteralExpr read_EllipsesVoidLiteralExprBody() throws java.io.IOException {
        return new _EllipsesVoidLiteralExpr();
    }

    private _EllipsesBooleanLiteralExpr read_EllipsesBooleanLiteralExprBody() throws java.io.IOException {
        return new _EllipsesBooleanLiteralExpr();
    }

    private _EllipsesVarRef read_EllipsesVarRefBody() throws java.io.IOException {
        return new _EllipsesVarRef();
    }

    private _EllipsesFieldRef read_EllipsesFieldRefBody() throws java.io.IOException {
        return new _EllipsesFieldRef();
    }

    private _EllipsesFunctionalRef read_EllipsesFunctionalRefBody() throws java.io.IOException {
        return new _EllipsesFunctionalRef();
    }

    private _EllipsesFnRef read_EllipsesFnRefBody() throws java.io.IOException {
        return new _EllipsesFnRef();
    }

    private _EllipsesOpRef read_EllipsesOpRefBody() throws java.io.IOException {
        return new _EllipsesOpRef();
    }

    private _Ellipses_RewriteFnRef read_Ellipses_RewriteFnRefBody() throws java.io.IOException {
        return new _Ellipses_RewriteFnRef();
    }

    private _Ellipses_RewriteObjectExprRef read_Ellipses_RewriteObjectExprRefBody() throws java.io.IOException {
        return new _Ellipses_RewriteObjectExprRef();
    }

    private _EllipsesJuxt read_EllipsesJuxtBody() throws java.io.IOException {
        return new _EllipsesJuxt();
    }

    private _Ellipses_RewriteFnApp read_Ellipses_RewriteFnAppBody() throws java.io.IOException {
        return new _Ellipses_RewriteFnApp();
    }

    private _EllipsesOpExpr read_EllipsesOpExprBody() throws java.io.IOException {
        return new _EllipsesOpExpr();
    }

    private _EllipsesAmbiguousMultifixOpExpr read_EllipsesAmbiguousMultifixOpExprBody() throws java.io.IOException {
        return new _EllipsesAmbiguousMultifixOpExpr();
    }

    private _EllipsesChainExpr read_EllipsesChainExprBody() throws java.io.IOException {
        return new _EllipsesChainExpr();
    }

    private _EllipsesCoercionInvocation read_EllipsesCoercionInvocationBody() throws java.io.IOException {
        return new _EllipsesCoercionInvocation();
    }

    private _EllipsesTraitCoercionInvocation read_EllipsesTraitCoercionInvocationBody() throws java.io.IOException {
        return new _EllipsesTraitCoercionInvocation();
    }

    private _EllipsesTupleCoercionInvocation read_EllipsesTupleCoercionInvocationBody() throws java.io.IOException {
        return new _EllipsesTupleCoercionInvocation();
    }

    private _EllipsesArrowCoercionInvocation read_EllipsesArrowCoercionInvocationBody() throws java.io.IOException {
        return new _EllipsesArrowCoercionInvocation();
    }

    private _EllipsesUnionCoercionInvocation read_EllipsesUnionCoercionInvocationBody() throws java.io.IOException {
        return new _EllipsesUnionCoercionInvocation();
    }

    private _EllipsesMethodInvocation read_EllipsesMethodInvocationBody() throws java.io.IOException {
        return new _EllipsesMethodInvocation();
    }

    private _EllipsesMathPrimary read_EllipsesMathPrimaryBody() throws java.io.IOException {
        return new _EllipsesMathPrimary();
    }

    private _EllipsesArrayExpr read_EllipsesArrayExprBody() throws java.io.IOException {
        return new _EllipsesArrayExpr();
    }

    private _EllipsesArrayElement read_EllipsesArrayElementBody() throws java.io.IOException {
        return new _EllipsesArrayElement();
    }

    private _EllipsesArrayElements read_EllipsesArrayElementsBody() throws java.io.IOException {
        return new _EllipsesArrayElements();
    }

    private _EllipsesType read_EllipsesTypeBody() throws java.io.IOException {
        return new _EllipsesType();
    }

    private _EllipsesBaseType read_EllipsesBaseTypeBody() throws java.io.IOException {
        return new _EllipsesBaseType();
    }

    private _EllipsesAnyType read_EllipsesAnyTypeBody() throws java.io.IOException {
        return new _EllipsesAnyType();
    }

    private _EllipsesBottomType read_EllipsesBottomTypeBody() throws java.io.IOException {
        return new _EllipsesBottomType();
    }

    private _EllipsesUnknownType read_EllipsesUnknownTypeBody() throws java.io.IOException {
        return new _EllipsesUnknownType();
    }

    private _EllipsesSelfType read_EllipsesSelfTypeBody() throws java.io.IOException {
        return new _EllipsesSelfType();
    }

    private _EllipsesTraitSelfType read_EllipsesTraitSelfTypeBody() throws java.io.IOException {
        return new _EllipsesTraitSelfType();
    }

    private _EllipsesObjectExprType read_EllipsesObjectExprTypeBody() throws java.io.IOException {
        return new _EllipsesObjectExprType();
    }

    private _EllipsesNamedType read_EllipsesNamedTypeBody() throws java.io.IOException {
        return new _EllipsesNamedType();
    }

    private _Ellipses_InferenceVarType read_Ellipses_InferenceVarTypeBody() throws java.io.IOException {
        return new _Ellipses_InferenceVarType();
    }

    private _EllipsesVarType read_EllipsesVarTypeBody() throws java.io.IOException {
        return new _EllipsesVarType();
    }

    private _EllipsesTraitType read_EllipsesTraitTypeBody() throws java.io.IOException {
        return new _EllipsesTraitType();
    }

    private _EllipsesAbbreviatedType read_EllipsesAbbreviatedTypeBody() throws java.io.IOException {
        return new _EllipsesAbbreviatedType();
    }

    private _EllipsesArrayType read_EllipsesArrayTypeBody() throws java.io.IOException {
        return new _EllipsesArrayType();
    }

    private _EllipsesMatrixType read_EllipsesMatrixTypeBody() throws java.io.IOException {
        return new _EllipsesMatrixType();
    }

    private _EllipsesTaggedDimType read_EllipsesTaggedDimTypeBody() throws java.io.IOException {
        return new _EllipsesTaggedDimType();
    }

    private _EllipsesTaggedUnitType read_EllipsesTaggedUnitTypeBody() throws java.io.IOException {
        return new _EllipsesTaggedUnitType();
    }

    private _EllipsesTupleType read_EllipsesTupleTypeBody() throws java.io.IOException {
        return new _EllipsesTupleType();
    }

    private _EllipsesArrowType read_EllipsesArrowTypeBody() throws java.io.IOException {
        return new _EllipsesArrowType();
    }

    private _EllipsesBoundType read_EllipsesBoundTypeBody() throws java.io.IOException {
        return new _EllipsesBoundType();
    }

    private _EllipsesIntersectionType read_EllipsesIntersectionTypeBody() throws java.io.IOException {
        return new _EllipsesIntersectionType();
    }

    private _EllipsesUnionType read_EllipsesUnionTypeBody() throws java.io.IOException {
        return new _EllipsesUnionType();
    }

    private _EllipsesFixedPointType read_EllipsesFixedPointTypeBody() throws java.io.IOException {
        return new _EllipsesFixedPointType();
    }

    private _EllipsesLabelType read_EllipsesLabelTypeBody() throws java.io.IOException {
        return new _EllipsesLabelType();
    }

    private _EllipsesDimExpr read_EllipsesDimExprBody() throws java.io.IOException {
        return new _EllipsesDimExpr();
    }

    private _EllipsesDimBase read_EllipsesDimBaseBody() throws java.io.IOException {
        return new _EllipsesDimBase();
    }

    private _EllipsesDimRef read_EllipsesDimRefBody() throws java.io.IOException {
        return new _EllipsesDimRef();
    }

    private _EllipsesDimExponent read_EllipsesDimExponentBody() throws java.io.IOException {
        return new _EllipsesDimExponent();
    }

    private _EllipsesDimUnaryOp read_EllipsesDimUnaryOpBody() throws java.io.IOException {
        return new _EllipsesDimUnaryOp();
    }

    private _EllipsesDimBinaryOp read_EllipsesDimBinaryOpBody() throws java.io.IOException {
        return new _EllipsesDimBinaryOp();
    }

    private _EllipsesPattern read_EllipsesPatternBody() throws java.io.IOException {
        return new _EllipsesPattern();
    }

    private _EllipsesPatternArgs read_EllipsesPatternArgsBody() throws java.io.IOException {
        return new _EllipsesPatternArgs();
    }

    private _EllipsesPatternBinding read_EllipsesPatternBindingBody() throws java.io.IOException {
        return new _EllipsesPatternBinding();
    }

    private _EllipsesPlainPattern read_EllipsesPlainPatternBody() throws java.io.IOException {
        return new _EllipsesPlainPattern();
    }

    private _EllipsesTypePattern read_EllipsesTypePatternBody() throws java.io.IOException {
        return new _EllipsesTypePattern();
    }

    private _EllipsesNestedPattern read_EllipsesNestedPatternBody() throws java.io.IOException {
        return new _EllipsesNestedPattern();
    }

    private _EllipsesStaticArg read_EllipsesStaticArgBody() throws java.io.IOException {
        return new _EllipsesStaticArg();
    }

    private _EllipsesTypeArg read_EllipsesTypeArgBody() throws java.io.IOException {
        return new _EllipsesTypeArg();
    }

    private _EllipsesIntArg read_EllipsesIntArgBody() throws java.io.IOException {
        return new _EllipsesIntArg();
    }

    private _EllipsesBoolArg read_EllipsesBoolArgBody() throws java.io.IOException {
        return new _EllipsesBoolArg();
    }

    private _EllipsesOpArg read_EllipsesOpArgBody() throws java.io.IOException {
        return new _EllipsesOpArg();
    }

    private _EllipsesDimArg read_EllipsesDimArgBody() throws java.io.IOException {
        return new _EllipsesDimArg();
    }

    private _EllipsesUnitArg read_EllipsesUnitArgBody() throws java.io.IOException {
        return new _EllipsesUnitArg();
    }

    private _EllipsesStaticExpr read_EllipsesStaticExprBody() throws java.io.IOException {
        return new _EllipsesStaticExpr();
    }

    private _EllipsesIntExpr read_EllipsesIntExprBody() throws java.io.IOException {
        return new _EllipsesIntExpr();
    }

    private _EllipsesIntBase read_EllipsesIntBaseBody() throws java.io.IOException {
        return new _EllipsesIntBase();
    }

    private _EllipsesIntRef read_EllipsesIntRefBody() throws java.io.IOException {
        return new _EllipsesIntRef();
    }

    private _EllipsesIntBinaryOp read_EllipsesIntBinaryOpBody() throws java.io.IOException {
        return new _EllipsesIntBinaryOp();
    }

    private _EllipsesBoolExpr read_EllipsesBoolExprBody() throws java.io.IOException {
        return new _EllipsesBoolExpr();
    }

    private _EllipsesBoolBase read_EllipsesBoolBaseBody() throws java.io.IOException {
        return new _EllipsesBoolBase();
    }

    private _EllipsesBoolRef read_EllipsesBoolRefBody() throws java.io.IOException {
        return new _EllipsesBoolRef();
    }

    private _EllipsesBoolConstraint read_EllipsesBoolConstraintBody() throws java.io.IOException {
        return new _EllipsesBoolConstraint();
    }

    private _EllipsesBoolUnaryOp read_EllipsesBoolUnaryOpBody() throws java.io.IOException {
        return new _EllipsesBoolUnaryOp();
    }

    private _EllipsesBoolBinaryOp read_EllipsesBoolBinaryOpBody() throws java.io.IOException {
        return new _EllipsesBoolBinaryOp();
    }

    private _EllipsesUnitExpr read_EllipsesUnitExprBody() throws java.io.IOException {
        return new _EllipsesUnitExpr();
    }

    private _EllipsesUnitRef read_EllipsesUnitRefBody() throws java.io.IOException {
        return new _EllipsesUnitRef();
    }

    private _EllipsesUnitBinaryOp read_EllipsesUnitBinaryOpBody() throws java.io.IOException {
        return new _EllipsesUnitBinaryOp();
    }

    private _EllipsesEffect read_EllipsesEffectBody() throws java.io.IOException {
        return new _EllipsesEffect();
    }

    private _EllipsesWhereClause read_EllipsesWhereClauseBody() throws java.io.IOException {
        return new _EllipsesWhereClause();
    }

    private _EllipsesWhereBinding read_EllipsesWhereBindingBody() throws java.io.IOException {
        return new _EllipsesWhereBinding();
    }

    private _EllipsesWhereConstraint read_EllipsesWhereConstraintBody() throws java.io.IOException {
        return new _EllipsesWhereConstraint();
    }

    private _EllipsesWhereExtends read_EllipsesWhereExtendsBody() throws java.io.IOException {
        return new _EllipsesWhereExtends();
    }

    private _EllipsesWhereTypeAlias read_EllipsesWhereTypeAliasBody() throws java.io.IOException {
        return new _EllipsesWhereTypeAlias();
    }

    private _EllipsesWhereCoerces read_EllipsesWhereCoercesBody() throws java.io.IOException {
        return new _EllipsesWhereCoerces();
    }

    private _EllipsesWhereEquals read_EllipsesWhereEqualsBody() throws java.io.IOException {
        return new _EllipsesWhereEquals();
    }

    private _EllipsesUnitConstraint read_EllipsesUnitConstraintBody() throws java.io.IOException {
        return new _EllipsesUnitConstraint();
    }

    private _EllipsesIntConstraint read_EllipsesIntConstraintBody() throws java.io.IOException {
        return new _EllipsesIntConstraint();
    }

    private _EllipsesBoolConstraintExpr read_EllipsesBoolConstraintExprBody() throws java.io.IOException {
        return new _EllipsesBoolConstraintExpr();
    }

    private _EllipsesContract read_EllipsesContractBody() throws java.io.IOException {
        return new _EllipsesContract();
    }

    private _EllipsesEnsuresClause read_EllipsesEnsuresClauseBody() throws java.io.IOException {
        return new _EllipsesEnsuresClause();
    }

    private _EllipsesStaticParam read_EllipsesStaticParamBody() throws java.io.IOException {
        return new _EllipsesStaticParam();
    }

    private _EllipsesName read_EllipsesNameBody() throws java.io.IOException {
        return new _EllipsesName();
    }

    private _EllipsesAPIName read_EllipsesAPINameBody() throws java.io.IOException {
        return new _EllipsesAPIName();
    }

    private _EllipsesIdOrOpOrAnonymousName read_EllipsesIdOrOpOrAnonymousNameBody() throws java.io.IOException {
        return new _EllipsesIdOrOpOrAnonymousName();
    }

    private _EllipsesIdOrOp read_EllipsesIdOrOpBody() throws java.io.IOException {
        return new _EllipsesIdOrOp();
    }

    private _EllipsesId read_EllipsesIdBody() throws java.io.IOException {
        return new _EllipsesId();
    }

    private _EllipsesOp read_EllipsesOpBody() throws java.io.IOException {
        return new _EllipsesOp();
    }

    private _EllipsesNamedOp read_EllipsesNamedOpBody() throws java.io.IOException {
        return new _EllipsesNamedOp();
    }

    private _Ellipses_InferenceVarOp read_Ellipses_InferenceVarOpBody() throws java.io.IOException {
        return new _Ellipses_InferenceVarOp();
    }

    private _EllipsesAnonymousName read_EllipsesAnonymousNameBody() throws java.io.IOException {
        return new _EllipsesAnonymousName();
    }

    private _EllipsesAnonymousFnName read_EllipsesAnonymousFnNameBody() throws java.io.IOException {
        return new _EllipsesAnonymousFnName();
    }

    private _EllipsesConstructorFnName read_EllipsesConstructorFnNameBody() throws java.io.IOException {
        return new _EllipsesConstructorFnName();
    }

    private _EllipsesArrayComprehensionClause read_EllipsesArrayComprehensionClauseBody() throws java.io.IOException {
        return new _EllipsesArrayComprehensionClause();
    }

    private _EllipsesKeywordExpr read_EllipsesKeywordExprBody() throws java.io.IOException {
        return new _EllipsesKeywordExpr();
    }

    private _EllipsesCaseClause read_EllipsesCaseClauseBody() throws java.io.IOException {
        return new _EllipsesCaseClause();
    }

    private _EllipsesCatch read_EllipsesCatchBody() throws java.io.IOException {
        return new _EllipsesCatch();
    }

    private _EllipsesCatchClause read_EllipsesCatchClauseBody() throws java.io.IOException {
        return new _EllipsesCatchClause();
    }

    private _EllipsesIfClause read_EllipsesIfClauseBody() throws java.io.IOException {
        return new _EllipsesIfClause();
    }

    private _EllipsesTypecaseClause read_EllipsesTypecaseClauseBody() throws java.io.IOException {
        return new _EllipsesTypecaseClause();
    }

    private _EllipsesExtentRange read_EllipsesExtentRangeBody() throws java.io.IOException {
        return new _EllipsesExtentRange();
    }

    private _EllipsesGeneratorClause read_EllipsesGeneratorClauseBody() throws java.io.IOException {
        return new _EllipsesGeneratorClause();
    }

    private _EllipsesKeywordType read_EllipsesKeywordTypeBody() throws java.io.IOException {
        return new _EllipsesKeywordType();
    }

    private _EllipsesTraitTypeWhere read_EllipsesTraitTypeWhereBody() throws java.io.IOException {
        return new _EllipsesTraitTypeWhere();
    }

    private _EllipsesIndices read_EllipsesIndicesBody() throws java.io.IOException {
        return new _EllipsesIndices();
    }

    private _EllipsesMathItem read_EllipsesMathItemBody() throws java.io.IOException {
        return new _EllipsesMathItem();
    }

    private _EllipsesExprMI read_EllipsesExprMIBody() throws java.io.IOException {
        return new _EllipsesExprMI();
    }

    private _EllipsesParenthesisDelimitedMI read_EllipsesParenthesisDelimitedMIBody() throws java.io.IOException {
        return new _EllipsesParenthesisDelimitedMI();
    }

    private _EllipsesNonParenthesisDelimitedMI read_EllipsesNonParenthesisDelimitedMIBody() throws java.io.IOException {
        return new _EllipsesNonParenthesisDelimitedMI();
    }

    private _EllipsesNonExprMI read_EllipsesNonExprMIBody() throws java.io.IOException {
        return new _EllipsesNonExprMI();
    }

    private _EllipsesExponentiationMI read_EllipsesExponentiationMIBody() throws java.io.IOException {
        return new _EllipsesExponentiationMI();
    }

    private _EllipsesSubscriptingMI read_EllipsesSubscriptingMIBody() throws java.io.IOException {
        return new _EllipsesSubscriptingMI();
    }

    private _EllipsesOverloading read_EllipsesOverloadingBody() throws java.io.IOException {
        return new _EllipsesOverloading();
    }

    private _EllipsesNonterminalHeader read_EllipsesNonterminalHeaderBody() throws java.io.IOException {
        return new _EllipsesNonterminalHeader();
    }

    private _EllipsesNonterminalParameter read_EllipsesNonterminalParameterBody() throws java.io.IOException {
        return new _EllipsesNonterminalParameter();
    }

    private _EllipsesSyntaxDecl read_EllipsesSyntaxDeclBody() throws java.io.IOException {
        return new _EllipsesSyntaxDecl();
    }

    private _EllipsesSyntaxDef read_EllipsesSyntaxDefBody() throws java.io.IOException {
        return new _EllipsesSyntaxDef();
    }

    private _EllipsesSuperSyntaxDef read_EllipsesSuperSyntaxDefBody() throws java.io.IOException {
        return new _EllipsesSuperSyntaxDef();
    }

    private _EllipsesTransformerDecl read_EllipsesTransformerDeclBody() throws java.io.IOException {
        return new _EllipsesTransformerDecl();
    }

    private _EllipsesPreTransformerDef read_EllipsesPreTransformerDefBody() throws java.io.IOException {
        return new _EllipsesPreTransformerDef();
    }

    private _EllipsesNamedTransformerDef read_EllipsesNamedTransformerDefBody() throws java.io.IOException {
        return new _EllipsesNamedTransformerDef();
    }

    private _EllipsesTransformer read_EllipsesTransformerBody() throws java.io.IOException {
        return new _EllipsesTransformer();
    }

    private _EllipsesUnparsedTransformer read_EllipsesUnparsedTransformerBody() throws java.io.IOException {
        return new _EllipsesUnparsedTransformer();
    }

    private _EllipsesNodeTransformer read_EllipsesNodeTransformerBody() throws java.io.IOException {
        return new _EllipsesNodeTransformer();
    }

    private _EllipsesCaseTransformer read_EllipsesCaseTransformerBody() throws java.io.IOException {
        return new _EllipsesCaseTransformer();
    }

    private _EllipsesCaseTransformerClause read_EllipsesCaseTransformerClauseBody() throws java.io.IOException {
        return new _EllipsesCaseTransformerClause();
    }

    private _EllipsesSyntaxSymbol read_EllipsesSyntaxSymbolBody() throws java.io.IOException {
        return new _EllipsesSyntaxSymbol();
    }

    private _EllipsesPrefixedSymbol read_EllipsesPrefixedSymbolBody() throws java.io.IOException {
        return new _EllipsesPrefixedSymbol();
    }

    private _EllipsesOptionalSymbol read_EllipsesOptionalSymbolBody() throws java.io.IOException {
        return new _EllipsesOptionalSymbol();
    }

    private _EllipsesRepeatSymbol read_EllipsesRepeatSymbolBody() throws java.io.IOException {
        return new _EllipsesRepeatSymbol();
    }

    private _EllipsesRepeatOneOrMoreSymbol read_EllipsesRepeatOneOrMoreSymbolBody() throws java.io.IOException {
        return new _EllipsesRepeatOneOrMoreSymbol();
    }

    private _EllipsesNoWhitespaceSymbol read_EllipsesNoWhitespaceSymbolBody() throws java.io.IOException {
        return new _EllipsesNoWhitespaceSymbol();
    }

    private _EllipsesGroupSymbol read_EllipsesGroupSymbolBody() throws java.io.IOException {
        return new _EllipsesGroupSymbol();
    }

    private _EllipsesSpecialSymbol read_EllipsesSpecialSymbolBody() throws java.io.IOException {
        return new _EllipsesSpecialSymbol();
    }

    private _EllipsesAnyCharacterSymbol read_EllipsesAnyCharacterSymbolBody() throws java.io.IOException {
        return new _EllipsesAnyCharacterSymbol();
    }

    private _EllipsesWhitespaceSymbol read_EllipsesWhitespaceSymbolBody() throws java.io.IOException {
        return new _EllipsesWhitespaceSymbol();
    }

    private _EllipsesTabSymbol read_EllipsesTabSymbolBody() throws java.io.IOException {
        return new _EllipsesTabSymbol();
    }

    private _EllipsesFormfeedSymbol read_EllipsesFormfeedSymbolBody() throws java.io.IOException {
        return new _EllipsesFormfeedSymbol();
    }

    private _EllipsesCarriageReturnSymbol read_EllipsesCarriageReturnSymbolBody() throws java.io.IOException {
        return new _EllipsesCarriageReturnSymbol();
    }

    private _EllipsesBackspaceSymbol read_EllipsesBackspaceSymbolBody() throws java.io.IOException {
        return new _EllipsesBackspaceSymbol();
    }

    private _EllipsesNewlineSymbol read_EllipsesNewlineSymbolBody() throws java.io.IOException {
        return new _EllipsesNewlineSymbol();
    }

    private _EllipsesBreaklineSymbol read_EllipsesBreaklineSymbolBody() throws java.io.IOException {
        return new _EllipsesBreaklineSymbol();
    }

    private _EllipsesItemSymbol read_EllipsesItemSymbolBody() throws java.io.IOException {
        return new _EllipsesItemSymbol();
    }

    private _EllipsesNonterminalSymbol read_EllipsesNonterminalSymbolBody() throws java.io.IOException {
        return new _EllipsesNonterminalSymbol();
    }

    private _EllipsesKeywordSymbol read_EllipsesKeywordSymbolBody() throws java.io.IOException {
        return new _EllipsesKeywordSymbol();
    }

    private _EllipsesTokenSymbol read_EllipsesTokenSymbolBody() throws java.io.IOException {
        return new _EllipsesTokenSymbol();
    }

    private _EllipsesNotPredicateSymbol read_EllipsesNotPredicateSymbolBody() throws java.io.IOException {
        return new _EllipsesNotPredicateSymbol();
    }

    private _EllipsesAndPredicateSymbol read_EllipsesAndPredicateSymbolBody() throws java.io.IOException {
        return new _EllipsesAndPredicateSymbol();
    }

    private _EllipsesCharacterClassSymbol read_EllipsesCharacterClassSymbolBody() throws java.io.IOException {
        return new _EllipsesCharacterClassSymbol();
    }

    private _EllipsesCharacterSymbol read_EllipsesCharacterSymbolBody() throws java.io.IOException {
        return new _EllipsesCharacterSymbol();
    }

    private _EllipsesCharSymbol read_EllipsesCharSymbolBody() throws java.io.IOException {
        return new _EllipsesCharSymbol();
    }

    private _EllipsesCharacterInterval read_EllipsesCharacterIntervalBody() throws java.io.IOException {
        return new _EllipsesCharacterInterval();
    }

    private _EllipsesLink read_EllipsesLinkBody() throws java.io.IOException {
        return new _EllipsesLink();
    }

    private TemplateGapAbstractNode readTemplateGapAbstractNodeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAbstractNode(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCompilationUnit readTemplateGapCompilationUnitBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCompilationUnit(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapComponent readTemplateGapComponentBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapComponent(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapApi readTemplateGapApiBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapApi(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapImport readTemplateGapImportBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapImport(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapImportedNames readTemplateGapImportedNamesBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapImportedNames(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapImportStar readTemplateGapImportStarBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapImportStar(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapImportNames readTemplateGapImportNamesBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapImportNames(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapImportApi readTemplateGapImportApiBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapImportApi(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAliasedSimpleName readTemplateGapAliasedSimpleNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAliasedSimpleName(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAliasedAPIName readTemplateGapAliasedAPINameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAliasedAPIName(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapDecl readTemplateGapDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTraitObjectDecl readTemplateGapTraitObjectDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTraitObjectDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTraitDecl readTemplateGapTraitDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTraitDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapObjectDecl readTemplateGapObjectDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapObjectDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapVarDecl readTemplateGapVarDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapVarDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapFnDecl readTemplateGapFnDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapFnDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGap_RewriteFnOverloadDecl readTemplateGap_RewriteFnOverloadDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGap_RewriteFnOverloadDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGap_RewriteObjectExprDecl readTemplateGap_RewriteObjectExprDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGap_RewriteObjectExprDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGap_RewriteFunctionalMethodDecl readTemplateGap_RewriteFunctionalMethodDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGap_RewriteFunctionalMethodDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapDimUnitDecl readTemplateGapDimUnitDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapDimUnitDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapDimDecl readTemplateGapDimDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapDimDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapUnitDecl readTemplateGapUnitDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapUnitDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTestDecl readTemplateGapTestDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTestDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapPropertyDecl readTemplateGapPropertyDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapPropertyDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTypeAlias readTemplateGapTypeAliasBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTypeAlias(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapGrammarDecl readTemplateGapGrammarDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapGrammarDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapGrammarMemberDecl readTemplateGapGrammarMemberDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapGrammarMemberDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNonterminalDecl readTemplateGapNonterminalDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNonterminalDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNonterminalDef readTemplateGapNonterminalDefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNonterminalDef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNonterminalExtensionDef readTemplateGapNonterminalExtensionDefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNonterminalExtensionDef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBinding readTemplateGapBindingBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBinding(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapLValue readTemplateGapLValueBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapLValue(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapParam readTemplateGapParamBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapParam(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapExpr readTemplateGapExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapDummyExpr readTemplateGapDummyExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapDummyExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTypeAnnotatedExpr readTemplateGapTypeAnnotatedExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTypeAnnotatedExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAsExpr readTemplateGapAsExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAsExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAsIfExpr readTemplateGapAsIfExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAsIfExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAssignment readTemplateGapAssignmentBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAssignment(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBlock readTemplateGapBlockBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBlock(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapDo readTemplateGapDoBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapDo(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCaseExpr readTemplateGapCaseExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCaseExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapIf readTemplateGapIfBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapIf(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapLabel readTemplateGapLabelBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapLabel(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAbstractObjectExpr readTemplateGapAbstractObjectExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAbstractObjectExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapObjectExpr readTemplateGapObjectExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapObjectExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGap_RewriteObjectExpr readTemplateGap_RewriteObjectExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGap_RewriteObjectExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTry readTemplateGapTryBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTry(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTupleExpr readTemplateGapTupleExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTupleExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTypecase readTemplateGapTypecaseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTypecase(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapWhile readTemplateGapWhileBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapWhile(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapFor readTemplateGapForBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapFor(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBigOpApp readTemplateGapBigOpAppBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBigOpApp(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAccumulator readTemplateGapAccumulatorBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAccumulator(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapArrayComprehension readTemplateGapArrayComprehensionBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapArrayComprehension(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAtomicExpr readTemplateGapAtomicExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAtomicExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapExit readTemplateGapExitBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapExit(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapSpawn readTemplateGapSpawnBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapSpawn(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapThrow readTemplateGapThrowBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapThrow(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTryAtomicExpr readTemplateGapTryAtomicExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTryAtomicExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapFnExpr readTemplateGapFnExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapFnExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapLetExpr readTemplateGapLetExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapLetExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapLetFn readTemplateGapLetFnBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapLetFn(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapLocalVarDecl readTemplateGapLocalVarDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapLocalVarDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapSimpleExpr readTemplateGapSimpleExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapSimpleExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapSubscriptExpr readTemplateGapSubscriptExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapSubscriptExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapPrimary readTemplateGapPrimaryBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapPrimary(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapLiteralExpr readTemplateGapLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapLiteralExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNumberLiteralExpr readTemplateGapNumberLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNumberLiteralExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapFloatLiteralExpr readTemplateGapFloatLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapFloatLiteralExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapIntLiteralExpr readTemplateGapIntLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapIntLiteralExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCharLiteralExpr readTemplateGapCharLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCharLiteralExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapStringLiteralExpr readTemplateGapStringLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapStringLiteralExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapVoidLiteralExpr readTemplateGapVoidLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapVoidLiteralExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBooleanLiteralExpr readTemplateGapBooleanLiteralExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBooleanLiteralExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapVarRef readTemplateGapVarRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapVarRef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapFieldRef readTemplateGapFieldRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapFieldRef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapFunctionalRef readTemplateGapFunctionalRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapFunctionalRef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapFnRef readTemplateGapFnRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapFnRef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapOpRef readTemplateGapOpRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapOpRef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGap_RewriteFnRef readTemplateGap_RewriteFnRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGap_RewriteFnRef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGap_RewriteObjectExprRef readTemplateGap_RewriteObjectExprRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGap_RewriteObjectExprRef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapJuxt readTemplateGapJuxtBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapJuxt(read_info, read_gapId, read_templateParams);
    }

    private TemplateGap_RewriteFnApp readTemplateGap_RewriteFnAppBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGap_RewriteFnApp(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapOpExpr readTemplateGapOpExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapOpExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAmbiguousMultifixOpExpr readTemplateGapAmbiguousMultifixOpExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAmbiguousMultifixOpExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapChainExpr readTemplateGapChainExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapChainExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCoercionInvocation readTemplateGapCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCoercionInvocation(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTraitCoercionInvocation readTemplateGapTraitCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTraitCoercionInvocation(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTupleCoercionInvocation readTemplateGapTupleCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTupleCoercionInvocation(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapArrowCoercionInvocation readTemplateGapArrowCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapArrowCoercionInvocation(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapUnionCoercionInvocation readTemplateGapUnionCoercionInvocationBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapUnionCoercionInvocation(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapMethodInvocation readTemplateGapMethodInvocationBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapMethodInvocation(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapMathPrimary readTemplateGapMathPrimaryBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapMathPrimary(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapArrayExpr readTemplateGapArrayExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapArrayExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapArrayElement readTemplateGapArrayElementBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapArrayElement(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapArrayElements readTemplateGapArrayElementsBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ExprInfo read_info = (ExprInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapArrayElements(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapType readTemplateGapTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBaseType readTemplateGapBaseTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBaseType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAnyType readTemplateGapAnyTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAnyType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBottomType readTemplateGapBottomTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBottomType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapUnknownType readTemplateGapUnknownTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapUnknownType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapSelfType readTemplateGapSelfTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapSelfType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTraitSelfType readTemplateGapTraitSelfTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTraitSelfType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapObjectExprType readTemplateGapObjectExprTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapObjectExprType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNamedType readTemplateGapNamedTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNamedType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGap_InferenceVarType readTemplateGap_InferenceVarTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGap_InferenceVarType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapVarType readTemplateGapVarTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapVarType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTraitType readTemplateGapTraitTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTraitType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAbbreviatedType readTemplateGapAbbreviatedTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAbbreviatedType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapArrayType readTemplateGapArrayTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapArrayType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapMatrixType readTemplateGapMatrixTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapMatrixType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTaggedDimType readTemplateGapTaggedDimTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTaggedDimType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTaggedUnitType readTemplateGapTaggedUnitTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTaggedUnitType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTupleType readTemplateGapTupleTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTupleType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapArrowType readTemplateGapArrowTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapArrowType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBoundType readTemplateGapBoundTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBoundType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapIntersectionType readTemplateGapIntersectionTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapIntersectionType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapUnionType readTemplateGapUnionTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapUnionType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapFixedPointType readTemplateGapFixedPointTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapFixedPointType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapLabelType readTemplateGapLabelTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapLabelType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapDimExpr readTemplateGapDimExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapDimExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapDimBase readTemplateGapDimBaseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapDimBase(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapDimRef readTemplateGapDimRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapDimRef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapDimExponent readTemplateGapDimExponentBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapDimExponent(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapDimUnaryOp readTemplateGapDimUnaryOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapDimUnaryOp(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapDimBinaryOp readTemplateGapDimBinaryOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        TypeInfo read_info = (TypeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapDimBinaryOp(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapPattern readTemplateGapPatternBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapPattern(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapPatternArgs readTemplateGapPatternArgsBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapPatternArgs(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapPatternBinding readTemplateGapPatternBindingBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapPatternBinding(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapPlainPattern readTemplateGapPlainPatternBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapPlainPattern(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTypePattern readTemplateGapTypePatternBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTypePattern(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNestedPattern readTemplateGapNestedPatternBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNestedPattern(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapStaticArg readTemplateGapStaticArgBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapStaticArg(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTypeArg readTemplateGapTypeArgBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTypeArg(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapIntArg readTemplateGapIntArgBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapIntArg(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBoolArg readTemplateGapBoolArgBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBoolArg(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapOpArg readTemplateGapOpArgBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapOpArg(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapDimArg readTemplateGapDimArgBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapDimArg(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapUnitArg readTemplateGapUnitArgBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapUnitArg(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapStaticExpr readTemplateGapStaticExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapStaticExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapIntExpr readTemplateGapIntExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapIntExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapIntBase readTemplateGapIntBaseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapIntBase(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapIntRef readTemplateGapIntRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapIntRef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapIntBinaryOp readTemplateGapIntBinaryOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapIntBinaryOp(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBoolExpr readTemplateGapBoolExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBoolExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBoolBase readTemplateGapBoolBaseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBoolBase(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBoolRef readTemplateGapBoolRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBoolRef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBoolConstraint readTemplateGapBoolConstraintBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBoolConstraint(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBoolUnaryOp readTemplateGapBoolUnaryOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBoolUnaryOp(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBoolBinaryOp readTemplateGapBoolBinaryOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBoolBinaryOp(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapUnitExpr readTemplateGapUnitExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapUnitExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapUnitRef readTemplateGapUnitRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapUnitRef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapUnitBinaryOp readTemplateGapUnitBinaryOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapUnitBinaryOp(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapEffect readTemplateGapEffectBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapEffect(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapWhereClause readTemplateGapWhereClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapWhereClause(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapWhereBinding readTemplateGapWhereBindingBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapWhereBinding(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapWhereConstraint readTemplateGapWhereConstraintBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapWhereConstraint(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapWhereExtends readTemplateGapWhereExtendsBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapWhereExtends(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapWhereTypeAlias readTemplateGapWhereTypeAliasBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapWhereTypeAlias(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapWhereCoerces readTemplateGapWhereCoercesBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapWhereCoerces(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapWhereEquals readTemplateGapWhereEqualsBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapWhereEquals(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapUnitConstraint readTemplateGapUnitConstraintBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapUnitConstraint(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapIntConstraint readTemplateGapIntConstraintBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapIntConstraint(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBoolConstraintExpr readTemplateGapBoolConstraintExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBoolConstraintExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapContract readTemplateGapContractBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapContract(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapEnsuresClause readTemplateGapEnsuresClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapEnsuresClause(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapStaticParam readTemplateGapStaticParamBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapStaticParam(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapName readTemplateGapNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapName(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAPIName readTemplateGapAPINameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAPIName(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapIdOrOpOrAnonymousName readTemplateGapIdOrOpOrAnonymousNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapIdOrOpOrAnonymousName(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapIdOrOp readTemplateGapIdOrOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapIdOrOp(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapId readTemplateGapIdBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapId(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapOp readTemplateGapOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapOp(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNamedOp readTemplateGapNamedOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNamedOp(read_info, read_gapId, read_templateParams);
    }

    private TemplateGap_InferenceVarOp readTemplateGap_InferenceVarOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGap_InferenceVarOp(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAnonymousName readTemplateGapAnonymousNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAnonymousName(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAnonymousFnName readTemplateGapAnonymousFnNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAnonymousFnName(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapConstructorFnName readTemplateGapConstructorFnNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapConstructorFnName(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapArrayComprehensionClause readTemplateGapArrayComprehensionClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapArrayComprehensionClause(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapKeywordExpr readTemplateGapKeywordExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapKeywordExpr(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCaseClause readTemplateGapCaseClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCaseClause(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCatch readTemplateGapCatchBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCatch(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCatchClause readTemplateGapCatchClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCatchClause(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapIfClause readTemplateGapIfClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapIfClause(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTypecaseClause readTemplateGapTypecaseClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTypecaseClause(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapExtentRange readTemplateGapExtentRangeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapExtentRange(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapGeneratorClause readTemplateGapGeneratorClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapGeneratorClause(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapKeywordType readTemplateGapKeywordTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapKeywordType(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTraitTypeWhere readTemplateGapTraitTypeWhereBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTraitTypeWhere(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapIndices readTemplateGapIndicesBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapIndices(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapMathItem readTemplateGapMathItemBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapMathItem(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapExprMI readTemplateGapExprMIBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapExprMI(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapParenthesisDelimitedMI readTemplateGapParenthesisDelimitedMIBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapParenthesisDelimitedMI(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNonParenthesisDelimitedMI readTemplateGapNonParenthesisDelimitedMIBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNonParenthesisDelimitedMI(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNonExprMI readTemplateGapNonExprMIBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNonExprMI(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapExponentiationMI readTemplateGapExponentiationMIBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapExponentiationMI(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapSubscriptingMI readTemplateGapSubscriptingMIBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapSubscriptingMI(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapOverloading readTemplateGapOverloadingBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapOverloading(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNonterminalHeader readTemplateGapNonterminalHeaderBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNonterminalHeader(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNonterminalParameter readTemplateGapNonterminalParameterBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNonterminalParameter(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapSyntaxDecl readTemplateGapSyntaxDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapSyntaxDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapSyntaxDef readTemplateGapSyntaxDefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapSyntaxDef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapSuperSyntaxDef readTemplateGapSuperSyntaxDefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapSuperSyntaxDef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTransformerDecl readTemplateGapTransformerDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTransformerDecl(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapPreTransformerDef readTemplateGapPreTransformerDefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapPreTransformerDef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNamedTransformerDef readTemplateGapNamedTransformerDefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNamedTransformerDef(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTransformer readTemplateGapTransformerBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTransformer(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapUnparsedTransformer readTemplateGapUnparsedTransformerBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapUnparsedTransformer(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNodeTransformer readTemplateGapNodeTransformerBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNodeTransformer(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCaseTransformer readTemplateGapCaseTransformerBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCaseTransformer(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCaseTransformerClause readTemplateGapCaseTransformerClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCaseTransformerClause(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapSyntaxSymbol readTemplateGapSyntaxSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapSyntaxSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapPrefixedSymbol readTemplateGapPrefixedSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapPrefixedSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapOptionalSymbol readTemplateGapOptionalSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapOptionalSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapRepeatSymbol readTemplateGapRepeatSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapRepeatSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapRepeatOneOrMoreSymbol readTemplateGapRepeatOneOrMoreSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapRepeatOneOrMoreSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNoWhitespaceSymbol readTemplateGapNoWhitespaceSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNoWhitespaceSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapGroupSymbol readTemplateGapGroupSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapGroupSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapSpecialSymbol readTemplateGapSpecialSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapSpecialSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAnyCharacterSymbol readTemplateGapAnyCharacterSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAnyCharacterSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapWhitespaceSymbol readTemplateGapWhitespaceSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapWhitespaceSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTabSymbol readTemplateGapTabSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTabSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapFormfeedSymbol readTemplateGapFormfeedSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapFormfeedSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCarriageReturnSymbol readTemplateGapCarriageReturnSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCarriageReturnSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBackspaceSymbol readTemplateGapBackspaceSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBackspaceSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNewlineSymbol readTemplateGapNewlineSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNewlineSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapBreaklineSymbol readTemplateGapBreaklineSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapBreaklineSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapItemSymbol readTemplateGapItemSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapItemSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNonterminalSymbol readTemplateGapNonterminalSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNonterminalSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapKeywordSymbol readTemplateGapKeywordSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapKeywordSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapTokenSymbol readTemplateGapTokenSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapTokenSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapNotPredicateSymbol readTemplateGapNotPredicateSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapNotPredicateSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapAndPredicateSymbol readTemplateGapAndPredicateSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapAndPredicateSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCharacterClassSymbol readTemplateGapCharacterClassSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCharacterClassSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCharacterSymbol readTemplateGapCharacterSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCharacterSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCharSymbol readTemplateGapCharSymbolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCharSymbol(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapCharacterInterval readTemplateGapCharacterIntervalBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapCharacterInterval(read_info, read_gapId, read_templateParams);
    }

    private TemplateGapLink readTemplateGapLinkBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTNodeInfo read_info = (ASTNodeInfo) readNode();
        readFieldDelim("gapId = ");
        Id read_gapId = (Id) readNode();
        readFieldDelim("templateParams = ");
        List<Id> read_templateParams = readListOfId();
        return new TemplateGapLink(read_info, read_gapId, read_templateParams);
    }


    private List<Import> readListOfImport() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Import> accum = new java.util.ArrayList<Import>();
        while (readMoreListElements()) {
            accum.add((Import) readNode());
        }
        return accum;
    }

    private List<Decl> readListOfDecl() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Decl> accum = new java.util.ArrayList<Decl>();
        while (readMoreListElements()) {
            accum.add((Decl) readNode());
        }
        return accum;
    }

    private List<APIName> readListOfAPIName() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<APIName> accum = new java.util.ArrayList<APIName>();
        while (readMoreListElements()) {
            accum.add((APIName) readNode());
        }
        return accum;
    }

    private Option<String> readOptionOfString() throws java.io.IOException {
        if (readOptionHeader()) {
            String elt_result = readString();
            readExpected(")");
            return Option.<String>some(elt_result);
        }
        else { return Option.<String>none(); }
    }

    private List<IdOrOpOrAnonymousName> readListOfIdOrOpOrAnonymousName() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<IdOrOpOrAnonymousName> accum = new java.util.ArrayList<IdOrOpOrAnonymousName>();
        while (readMoreListElements()) {
            accum.add((IdOrOpOrAnonymousName) readNode());
        }
        return accum;
    }

    private List<AliasedSimpleName> readListOfAliasedSimpleName() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<AliasedSimpleName> accum = new java.util.ArrayList<AliasedSimpleName>();
        while (readMoreListElements()) {
            accum.add((AliasedSimpleName) readNode());
        }
        return accum;
    }

    private List<AliasedAPIName> readListOfAliasedAPIName() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<AliasedAPIName> accum = new java.util.ArrayList<AliasedAPIName>();
        while (readMoreListElements()) {
            accum.add((AliasedAPIName) readNode());
        }
        return accum;
    }

    private Option<IdOrOpOrAnonymousName> readOptionOfIdOrOpOrAnonymousName() throws java.io.IOException {
        if (readOptionHeader()) {
            IdOrOpOrAnonymousName elt_result = (IdOrOpOrAnonymousName) readNode();
            readExpected(")");
            return Option.<IdOrOpOrAnonymousName>some(elt_result);
        }
        else { return Option.<IdOrOpOrAnonymousName>none(); }
    }

    private Option<Id> readOptionOfId() throws java.io.IOException {
        if (readOptionHeader()) {
            Id elt_result = (Id) readNode();
            readExpected(")");
            return Option.<Id>some(elt_result);
        }
        else { return Option.<Id>none(); }
    }

    private Option<SelfType> readOptionOfSelfType() throws java.io.IOException {
        if (readOptionHeader()) {
            SelfType elt_result = (SelfType) readNode();
            readExpected(")");
            return Option.<SelfType>some(elt_result);
        }
        else { return Option.<SelfType>none(); }
    }

    private List<BaseType> readListOfBaseType() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<BaseType> accum = new java.util.ArrayList<BaseType>();
        while (readMoreListElements()) {
            accum.add((BaseType) readNode());
        }
        return accum;
    }

    private List<NamedType> readListOfNamedType() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<NamedType> accum = new java.util.ArrayList<NamedType>();
        while (readMoreListElements()) {
            accum.add((NamedType) readNode());
        }
        return accum;
    }

    private Option<List<NamedType>> readOptionOfListOfNamedType() throws java.io.IOException {
        if (readOptionHeader()) {
            List<NamedType> elt_result = readListOfNamedType();
            readExpected(")");
            return Option.<List<NamedType>>some(elt_result);
        }
        else { return Option.<List<NamedType>>none(); }
    }

    private List<LValue> readListOfLValue() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<LValue> accum = new java.util.ArrayList<LValue>();
        while (readMoreListElements()) {
            accum.add((LValue) readNode());
        }
        return accum;
    }

    private Option<Expr> readOptionOfExpr() throws java.io.IOException {
        if (readOptionHeader()) {
            Expr elt_result = (Expr) readNode();
            readExpected(")");
            return Option.<Expr>some(elt_result);
        }
        else { return Option.<Expr>none(); }
    }

    private Option<IdOrOp> readOptionOfIdOrOp() throws java.io.IOException {
        if (readOptionHeader()) {
            IdOrOp elt_result = (IdOrOp) readNode();
            readExpected(")");
            return Option.<IdOrOp>some(elt_result);
        }
        else { return Option.<IdOrOp>none(); }
    }

    private List<IdOrOp> readListOfIdOrOp() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<IdOrOp> accum = new java.util.ArrayList<IdOrOp>();
        while (readMoreListElements()) {
            accum.add((IdOrOp) readNode());
        }
        return accum;
    }

    private Option<Type> readOptionOfType() throws java.io.IOException {
        if (readOptionHeader()) {
            Type elt_result = (Type) readNode();
            readExpected(")");
            return Option.<Type>some(elt_result);
        }
        else { return Option.<Type>none(); }
    }

    private List<_RewriteObjectExpr> readListOf_RewriteObjectExpr() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<_RewriteObjectExpr> accum = new java.util.ArrayList<_RewriteObjectExpr>();
        while (readMoreListElements()) {
            accum.add((_RewriteObjectExpr) readNode());
        }
        return accum;
    }

    private List<String> readListOfString() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<String> accum = new java.util.ArrayList<String>();
        while (readMoreListElements()) {
            accum.add(readString());
        }
        return accum;
    }

    private List<Id> readListOfId() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Id> accum = new java.util.ArrayList<Id>();
        while (readMoreListElements()) {
            accum.add((Id) readNode());
        }
        return accum;
    }

    private List<GeneratorClause> readListOfGeneratorClause() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<GeneratorClause> accum = new java.util.ArrayList<GeneratorClause>();
        while (readMoreListElements()) {
            accum.add((GeneratorClause) readNode());
        }
        return accum;
    }

    private List<Param> readListOfParam() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Param> accum = new java.util.ArrayList<Param>();
        while (readMoreListElements()) {
            accum.add((Param) readNode());
        }
        return accum;
    }

    private List<StaticParam> readListOfStaticParam() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<StaticParam> accum = new java.util.ArrayList<StaticParam>();
        while (readMoreListElements()) {
            accum.add((StaticParam) readNode());
        }
        return accum;
    }

    private List<GrammarMemberDecl> readListOfGrammarMemberDecl() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<GrammarMemberDecl> accum = new java.util.ArrayList<GrammarMemberDecl>();
        while (readMoreListElements()) {
            accum.add((GrammarMemberDecl) readNode());
        }
        return accum;
    }

    private List<TransformerDecl> readListOfTransformerDecl() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<TransformerDecl> accum = new java.util.ArrayList<TransformerDecl>();
        while (readMoreListElements()) {
            accum.add((TransformerDecl) readNode());
        }
        return accum;
    }

    private List<SyntaxDecl> readListOfSyntaxDecl() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<SyntaxDecl> accum = new java.util.ArrayList<SyntaxDecl>();
        while (readMoreListElements()) {
            accum.add((SyntaxDecl) readNode());
        }
        return accum;
    }

    private Option<BaseType> readOptionOfBaseType() throws java.io.IOException {
        if (readOptionHeader()) {
            BaseType elt_result = (BaseType) readNode();
            readExpected(")");
            return Option.<BaseType>some(elt_result);
        }
        else { return Option.<BaseType>none(); }
    }

    private Option<TypeOrPattern> readOptionOfTypeOrPattern() throws java.io.IOException {
        if (readOptionHeader()) {
            TypeOrPattern elt_result = (TypeOrPattern) readNode();
            readExpected(")");
            return Option.<TypeOrPattern>some(elt_result);
        }
        else { return Option.<TypeOrPattern>none(); }
    }

    private List<Lhs> readListOfLhs() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Lhs> accum = new java.util.ArrayList<Lhs>();
        while (readMoreListElements()) {
            accum.add((Lhs) readNode());
        }
        return accum;
    }

    private Option<FunctionalRef> readOptionOfFunctionalRef() throws java.io.IOException {
        if (readOptionHeader()) {
            FunctionalRef elt_result = (FunctionalRef) readNode();
            readExpected(")");
            return Option.<FunctionalRef>some(elt_result);
        }
        else { return Option.<FunctionalRef>none(); }
    }

    private List<CompoundAssignmentInfo> readListOfCompoundAssignmentInfo() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<CompoundAssignmentInfo> accum = new java.util.ArrayList<CompoundAssignmentInfo>();
        while (readMoreListElements()) {
            accum.add((CompoundAssignmentInfo) readNode());
        }
        return accum;
    }

    private List<Expr> readListOfExpr() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Expr> accum = new java.util.ArrayList<Expr>();
        while (readMoreListElements()) {
            accum.add((Expr) readNode());
        }
        return accum;
    }

    private List<Block> readListOfBlock() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Block> accum = new java.util.ArrayList<Block>();
        while (readMoreListElements()) {
            accum.add((Block) readNode());
        }
        return accum;
    }

    private List<CaseClause> readListOfCaseClause() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<CaseClause> accum = new java.util.ArrayList<CaseClause>();
        while (readMoreListElements()) {
            accum.add((CaseClause) readNode());
        }
        return accum;
    }

    private Option<Block> readOptionOfBlock() throws java.io.IOException {
        if (readOptionHeader()) {
            Block elt_result = (Block) readNode();
            readExpected(")");
            return Option.<Block>some(elt_result);
        }
        else { return Option.<Block>none(); }
    }

    private List<IfClause> readListOfIfClause() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<IfClause> accum = new java.util.ArrayList<IfClause>();
        while (readMoreListElements()) {
            accum.add((IfClause) readNode());
        }
        return accum;
    }

    private List<StaticArg> readListOfStaticArg() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<StaticArg> accum = new java.util.ArrayList<StaticArg>();
        while (readMoreListElements()) {
            accum.add((StaticArg) readNode());
        }
        return accum;
    }

    private Option<Catch> readOptionOfCatch() throws java.io.IOException {
        if (readOptionHeader()) {
            Catch elt_result = (Catch) readNode();
            readExpected(")");
            return Option.<Catch>some(elt_result);
        }
        else { return Option.<Catch>none(); }
    }

    private List<KeywordExpr> readListOfKeywordExpr() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<KeywordExpr> accum = new java.util.ArrayList<KeywordExpr>();
        while (readMoreListElements()) {
            accum.add((KeywordExpr) readNode());
        }
        return accum;
    }

    private List<TypecaseClause> readListOfTypecaseClause() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<TypecaseClause> accum = new java.util.ArrayList<TypecaseClause>();
        while (readMoreListElements()) {
            accum.add((TypecaseClause) readNode());
        }
        return accum;
    }

    private List<ArrayComprehensionClause> readListOfArrayComprehensionClause() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<ArrayComprehensionClause> accum = new java.util.ArrayList<ArrayComprehensionClause>();
        while (readMoreListElements()) {
            accum.add((ArrayComprehensionClause) readNode());
        }
        return accum;
    }

    private List<FnDecl> readListOfFnDecl() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<FnDecl> accum = new java.util.ArrayList<FnDecl>();
        while (readMoreListElements()) {
            accum.add((FnDecl) readNode());
        }
        return accum;
    }

    private Option<Op> readOptionOfOp() throws java.io.IOException {
        if (readOptionHeader()) {
            Op elt_result = (Op) readNode();
            readExpected(")");
            return Option.<Op>some(elt_result);
        }
        else { return Option.<Op>none(); }
    }

    private List<Overloading> readListOfOverloading() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Overloading> accum = new java.util.ArrayList<Overloading>();
        while (readMoreListElements()) {
            accum.add((Overloading) readNode());
        }
        return accum;
    }

    private List<Link> readListOfLink() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Link> accum = new java.util.ArrayList<Link>();
        while (readMoreListElements()) {
            accum.add((Link) readNode());
        }
        return accum;
    }

    private Option<CoercionInvocation> readOptionOfCoercionInvocation() throws java.io.IOException {
        if (readOptionHeader()) {
            CoercionInvocation elt_result = (CoercionInvocation) readNode();
            readExpected(")");
            return Option.<CoercionInvocation>some(elt_result);
        }
        else { return Option.<CoercionInvocation>none(); }
    }

    private List<Option<CoercionInvocation>> readListOfOptionOfCoercionInvocation() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Option<CoercionInvocation>> accum = new java.util.ArrayList<Option<CoercionInvocation>>();
        while (readMoreListElements()) {
            accum.add(readOptionOfCoercionInvocation());
        }
        return accum;
    }

    private Option<Option<CoercionInvocation>> readOptionOfOptionOfCoercionInvocation() throws java.io.IOException {
        if (readOptionHeader()) {
            Option<CoercionInvocation> elt_result = readOptionOfCoercionInvocation();
            readExpected(")");
            return Option.<Option<CoercionInvocation>>some(elt_result);
        }
        else { return Option.<Option<CoercionInvocation>>none(); }
    }

    private List<Type> readListOfType() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Type> accum = new java.util.ArrayList<Type>();
        while (readMoreListElements()) {
            accum.add((Type) readNode());
        }
        return accum;
    }

    private List<MathItem> readListOfMathItem() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<MathItem> accum = new java.util.ArrayList<MathItem>();
        while (readMoreListElements()) {
            accum.add((MathItem) readNode());
        }
        return accum;
    }

    private List<ArrayExpr> readListOfArrayExpr() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<ArrayExpr> accum = new java.util.ArrayList<ArrayExpr>();
        while (readMoreListElements()) {
            accum.add((ArrayExpr) readNode());
        }
        return accum;
    }

    private List<ExtentRange> readListOfExtentRange() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<ExtentRange> accum = new java.util.ArrayList<ExtentRange>();
        while (readMoreListElements()) {
            accum.add((ExtentRange) readNode());
        }
        return accum;
    }

    private List<KeywordType> readListOfKeywordType() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<KeywordType> accum = new java.util.ArrayList<KeywordType>();
        while (readMoreListElements()) {
            accum.add((KeywordType) readNode());
        }
        return accum;
    }

    private Option<MethodInfo> readOptionOfMethodInfo() throws java.io.IOException {
        if (readOptionHeader()) {
            MethodInfo elt_result = (MethodInfo) readNode();
            readExpected(")");
            return Option.<MethodInfo>some(elt_result);
        }
        else { return Option.<MethodInfo>none(); }
    }

    private List<PatternBinding> readListOfPatternBinding() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<PatternBinding> accum = new java.util.ArrayList<PatternBinding>();
        while (readMoreListElements()) {
            accum.add((PatternBinding) readNode());
        }
        return accum;
    }

    private Option<List<Type>> readOptionOfListOfType() throws java.io.IOException {
        if (readOptionHeader()) {
            List<Type> elt_result = readListOfType();
            readExpected(")");
            return Option.<List<Type>>some(elt_result);
        }
        else { return Option.<List<Type>>none(); }
    }

    private List<WhereBinding> readListOfWhereBinding() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<WhereBinding> accum = new java.util.ArrayList<WhereBinding>();
        while (readMoreListElements()) {
            accum.add((WhereBinding) readNode());
        }
        return accum;
    }

    private List<WhereConstraint> readListOfWhereConstraint() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<WhereConstraint> accum = new java.util.ArrayList<WhereConstraint>();
        while (readMoreListElements()) {
            accum.add((WhereConstraint) readNode());
        }
        return accum;
    }

    private Option<List<Expr>> readOptionOfListOfExpr() throws java.io.IOException {
        if (readOptionHeader()) {
            List<Expr> elt_result = readListOfExpr();
            readExpected(")");
            return Option.<List<Expr>>some(elt_result);
        }
        else { return Option.<List<Expr>>none(); }
    }

    private List<EnsuresClause> readListOfEnsuresClause() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<EnsuresClause> accum = new java.util.ArrayList<EnsuresClause>();
        while (readMoreListElements()) {
            accum.add((EnsuresClause) readNode());
        }
        return accum;
    }

    private Option<List<EnsuresClause>> readOptionOfListOfEnsuresClause() throws java.io.IOException {
        if (readOptionHeader()) {
            List<EnsuresClause> elt_result = readListOfEnsuresClause();
            readExpected(")");
            return Option.<List<EnsuresClause>>some(elt_result);
        }
        else { return Option.<List<EnsuresClause>>none(); }
    }

    private Option<APIName> readOptionOfAPIName() throws java.io.IOException {
        if (readOptionHeader()) {
            APIName elt_result = (APIName) readNode();
            readExpected(")");
            return Option.<APIName>some(elt_result);
        }
        else { return Option.<APIName>none(); }
    }

    private List<CatchClause> readListOfCatchClause() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<CatchClause> accum = new java.util.ArrayList<CatchClause>();
        while (readMoreListElements()) {
            accum.add((CatchClause) readNode());
        }
        return accum;
    }

    private Option<StaticArg> readOptionOfStaticArg() throws java.io.IOException {
        if (readOptionHeader()) {
            StaticArg elt_result = (StaticArg) readNode();
            readExpected(")");
            return Option.<StaticArg>some(elt_result);
        }
        else { return Option.<StaticArg>none(); }
    }

    private Option<WhereClause> readOptionOfWhereClause() throws java.io.IOException {
        if (readOptionHeader()) {
            WhereClause elt_result = (WhereClause) readNode();
            readExpected(")");
            return Option.<WhereClause>some(elt_result);
        }
        else { return Option.<WhereClause>none(); }
    }

    private Option<ArrowType> readOptionOfArrowType() throws java.io.IOException {
        if (readOptionHeader()) {
            ArrowType elt_result = (ArrowType) readNode();
            readExpected(")");
            return Option.<ArrowType>some(elt_result);
        }
        else { return Option.<ArrowType>none(); }
    }

    private List<NonterminalParameter> readListOfNonterminalParameter() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<NonterminalParameter> accum = new java.util.ArrayList<NonterminalParameter>();
        while (readMoreListElements()) {
            accum.add((NonterminalParameter) readNode());
        }
        return accum;
    }

    private List<SyntaxSymbol> readListOfSyntaxSymbol() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<SyntaxSymbol> accum = new java.util.ArrayList<SyntaxSymbol>();
        while (readMoreListElements()) {
            accum.add((SyntaxSymbol) readNode());
        }
        return accum;
    }

    private List<CaseTransformerClause> readListOfCaseTransformerClause() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<CaseTransformerClause> accum = new java.util.ArrayList<CaseTransformerClause>();
        while (readMoreListElements()) {
            accum.add((CaseTransformerClause) readNode());
        }
        return accum;
    }

    private List<CharacterSymbol> readListOfCharacterSymbol() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<CharacterSymbol> accum = new java.util.ArrayList<CharacterSymbol>();
        while (readMoreListElements()) {
            accum.add((CharacterSymbol) readNode());
        }
        return accum;
    }

    private Option<Contract> readOptionOfContract() throws java.io.IOException {
        if (readOptionHeader()) {
            Contract elt_result = (Contract) readNode();
            readExpected(")");
            return Option.<Contract>some(elt_result);
        }
        else { return Option.<Contract>none(); }
    }

    private List<TraitTypeWhere> readListOfTraitTypeWhere() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<TraitTypeWhere> accum = new java.util.ArrayList<TraitTypeWhere>();
        while (readMoreListElements()) {
            accum.add((TraitTypeWhere) readNode());
        }
        return accum;
    }

    private Option<List<Param>> readOptionOfListOfParam() throws java.io.IOException {
        if (readOptionHeader()) {
            List<Param> elt_result = readListOfParam();
            readExpected(")");
            return Option.<List<Param>>some(elt_result);
        }
        else { return Option.<List<Param>>none(); }
    }

    private java.util.List<String> read_java_util_ListOfString() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<String> accum = new java.util.ArrayList<String>();
        while (readMoreListElements()) {
            accum.add(readString());
        }
        return accum;
    }

    protected boolean readBoolean() throws java.io.IOException {
      char c = readCharWord();
      char t = c;
      while (!java.lang.Character.isWhitespace(t)) t=next();
      if (c=='t') return true;
      if (c=='f') return false;
      throw error();
    }
    
    protected char readChar() throws java.io.IOException {
      readExpected("\"");
      java.lang.String word = readTo('"', true);
      java.lang.String result = unescape(word);
      if (result.length() != 1) throw error();
      return result.charAt(0);
    }
    
    protected byte readByte() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Byte.parseByte(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected short readShort() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Short.parseShort(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected int readInt() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Integer.parseInt(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected long readLong() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Long.parseLong(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected float readFloat() throws java.io.IOException {
      java.lang.String word = readWord();
      try { return java.lang.Float.parseFloat(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected double readDouble() throws java.io.IOException {
      java.lang.String word = readWord();
      try { return java.lang.Double.parseDouble(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected java.lang.String readString() throws java.io.IOException {
      char delim = readCharWord();
      if (delim == '_') { return null; }
      if (delim != '"') { throw error(); }
      next();
      java.lang.String word = readTo('"', true);
      return unescape(word);
    }
    
    protected Object wordToUnknownObject(java.lang.String word) throws java.io.IOException {
      if (word.equals("_")) return null;
      java.io.ObjectInputStream objIn = toObjectStream(word);
      try { return objIn.readObject(); } // may throw an IOException
      catch (java.lang.ClassNotFoundException e) {
        throw new java.io.IOException("ClassNotFoundException: " + e.getMessage());
      }
      finally {
        try { objIn.close(); }
        catch (java.io.IOException e) { /* made a best attempt; ignore */ }
      }
    }
    
    protected Object readUnknownObject() throws java.io.IOException {
      java.lang.String word = readWord();
      readToNewline();
      return wordToUnknownObject(word);
    }
    
    /** Read the next word, delimited by whitespace, starting from curr().
        curr() is next whitespace char after word. */
    protected java.lang.String readWord() throws java.io.IOException {
      char c = readCharWord();
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      do {
        result.append(c);
        c = next();
      } while (!java.lang.Character.isWhitespace(c));
      return result.toString();
    }
    
    /** Read the next number starting with curr(): whitespace, possible
        '-', digit sequence.  curr() is first non-digit char
        thereafter. */
    protected java.lang.String readNum() throws java.io.IOException {
      char c = readCharWord();
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      if (c!='-' && !java.lang.Character.isDigit(c))
        throw error();
      do {
        result.append(c);
        c = next();
      } while (java.lang.Character.isDigit(c));
      return result.toString();
    }
    
    /** Read the next character, skipping any previous whitespace. */
    protected char readCharWord() throws java.io.IOException {
      char c = currentChar;
      while (java.lang.Character.isWhitespace(c)) {
        c = next();
      }
      return c;
    }
    
    /** Discard whitespace, then read exactly the string s.  curr() just afterwards. */
    protected void readExpected(java.lang.String s) throws java.io.IOException {
      char c = readCharWord();
      for (int i = 0; i < s.length(); i++) {
        if (c != s.charAt(i)) {
          System.out.println("Was expecting '"+s+"', saw '"+c+
                             "' instead of '"+s.charAt(i)+"'");
          throw error();
        }
        c = next();
      }
    }
    
    /** Look for and discard field delimiter. */
    protected void readFieldDelim(java.lang.String s) throws java.io.IOException {
      readExpected(s);
    }
    
    /** Look for next element in list. */
    protected boolean readMoreListElements() throws java.io.IOException {
      char c = readCharWord();
      if (c=='}') {
        next();
        return false;
      }
      if (c=='*') {
        next();
        return true;
      }
      throw error();
    }
    
    /** Look for header of option type.  Return true if contents must be
        parsed, false if it is Option.none(). */
    protected boolean readOptionHeader() throws java.io.IOException {
      char c = readCharWord();
      if (c=='~') {
        next();
        return false;
      }
      if (c=='(') {
        next();
        return true;
      }
      throw error();
    }
    
    /**
     * Read up to a delimiter; it is an error if a newline or eof is encountered first.
     * @return The the characters read before the delimiter.
     */
    protected java.lang.String readTo(char delim, boolean skipEscape) throws java.io.IOException {
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      boolean escape = false;
      char c = curr();
      while (escape || c != delim) {
        if (c == '\n' || c == '\r') throw error();
        result.append(c);
        if (escape) escape = false;
        else if (skipEscape && c == '\\') escape = true;
        c = next();
      }
      next(); // skip delim
      return result.toString();
    }
    
    /**
     * Skip to one of the given delimiters; it is an error if a newline or eof is encountered first.
     * @return The delimiter that was found.
     */
    protected char skipTo(char... delims) throws java.io.IOException {
      char c = currentChar;
      while (true) {
        if (c == '\n' || c == '\r') throw error();
        for (char delim : delims) {
          if (c == delim) return delim;
        }
        c = next();
      }
    }
    
    protected java.lang.String readToNewline() throws java.io.IOException {
      java.lang.String result = in.readLine();
      if (result == null) throw error();
      readCharWord();
      return result;
    }
    
    protected char next() throws java.io.IOException {
      int c = in.read();
      if (c == -1) throw error();
      currentChar = (char)c;
      return currentChar;
    }
    
    protected char curr() {
      return currentChar;
    }
    
    /** Unescapes a subset of valid Java-style escaped strings.  Unicode escapes are not
      * supported (the JLS doesn't treat them as part of this escaping process, either).
      * Octal escapes are required to use exactly 3 digits.
      */
    protected java.lang.String unescape(java.lang.String s) throws java.io.IOException {
      boolean escape = false;
      final java.lang.StringBuilder digits = new java.lang.StringBuilder();
      boolean changed = false;
      final java.lang.StringBuilder result = new java.lang.StringBuilder();
      for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        if (escape) {
          switch (c) {
            case 'b': result.append('\b'); break;
            case 't': result.append('\t'); break;
            case 'n': result.append('\n'); break;
            case 'f': result.append('\f'); break;
            case 'r': result.append('\r'); break;
    
            case '"': case '\'': case '\\':
              result.append(c); break;
    
            case '0': case '1': case '2': case '3':
            case '4': case '5': case '6': case '7':
              digits.append(c);
              if (digits.length() == 3) {
                // this should succeed -- there are guaranteed to be 3 octal digits
                result.append((char) java.lang.Integer.parseInt(digits.toString(), 8));
                digits.setLength(0);
              }
              break;
    
            default:
              throw error();
          }
          if (digits.length() == 0) escape = false;
        }
        else {
          if (c == '\\') { escape = true; changed = true; }
          else { result.append(c); }
        }
      }
      if (escape) throw error(); // escape was not completed
      return changed ? result.toString() : s;
    }
    
    /** Treat a string representation of a hexadecimal number as an ObjectInputStream */
    protected java.io.ObjectInputStream toObjectStream(java.lang.String byteString)
        throws java.io.IOException {
      if (byteString.length() % 2 != 0) throw error();
      int length = byteString.length() / 2;
      byte[] bytes = new byte[length];
      for (int i = 0; i < length; i++) {
        java.lang.String b = byteString.substring(i*2, i*2+2);
        try {
          int unsigned = java.lang.Integer.parseInt(b, 16);
          if (unsigned < 128) bytes[i] = (byte) unsigned;
          else bytes[i] = (byte) (unsigned - 256); // maps 255 to -1, 128 to -128
        }
        catch (java.lang.NumberFormatException e) { throw error(); }
      }
      // this may throw an IOException
      return new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(bytes));
    }
    
    protected java.io.IOException error() {
      return new java.io.IOException("Serialized data is not properly encoded");
    }
}
